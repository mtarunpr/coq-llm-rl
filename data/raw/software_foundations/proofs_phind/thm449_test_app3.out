PROVING test_app3
ATTEMPTED EXAMPLE PROOF (LEMMAS USED: 0)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.




Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.
Proof.
  destruct p. reflexivity. Qed.



Theorem fst_swap_is_snd : forall (p : natprod),
  fst (swap_pair p) = snd p.
Proof.
  destruct p. reflexivity. Qed.







Inductive natlist : Type :=
  | nil
  | cons (n : nat) (l : natlist).



Definition mylist := cons 1 (cons 2 (cons 3 nil)).



Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).



Definition mylist1 := 1 :: (2 :: (3 :: nil)).
Definition mylist2 := 1 :: 2 :: 3 :: nil.
Definition mylist3 := [1;2;3].








Fixpoint repeat (n count : nat) : natlist :=
  match count with
  | O => nil
  | S count' => n :: (repeat n count')
  end.






Fixpoint length (l:natlist) : nat :=
  match l with
  | nil => O
  | h :: t => S (length t)
  end.






Fixpoint app (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil    => l2
  | h :: t => h :: (app t l2)
  end.



Notation "x ++ y" := (app x y)
                     (right associativity, at level 60).

Example test_app1:             [1;2;3] ++ [4;5] = [1;2;3;4;5].
Proof. reflexivity. Qed.
Example test_app2:             nil ++ [4;5] = [4;5].
Proof. reflexivity. Qed.


Example test_app3 : [1;2;3] ++ nil = [1;2;3].

Proof.
(* We will proceed by induction on the first list.
*)
  intros l1 l2.
(* We will need to use the IHapp_list lemma, which states that the length of the
     concatenation of two lists is the sum of their lengths.
*)
  rewrite IHapp_list in IHapp_list.
(* We will also need to use the IHlength lemma, which states that the length of a
     non-empty list is greater than the length of its tail.
*)
  rewrite IHlength in IHlength.
(* We will also need to use the IHcons lemma, which states that the concatenation
     of a non-empty list with another list is the same as consing the head of the
     first list onto the concatenation of its tail with the second list.
*)
  rewrite IHcons in IHcons.
(* We will also need to use the IHnil lemma, which states that the concatenation
     of an empty list with another list is the same as the second list.
*)
  rewrite IHnil in IHnil.
(* Now we can proceed with the proof.
*)
  induction l1 as [| n l1'].
- (* Base case: l1 is empty.
*)
    simpl.
rewrite IHnil.
reflexivity.
- (* Inductive case: l1 is cons n l1'.
*)
    simpl.
rewrite IHcons.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN EXAMPLE PROOF (FRAGMENT #124)
Error in step "intros l1 l2.".
Message: No product even after head-reduction..
Goal: [1; 2; 3] ++ [ ] = [1; 2; 3].


TRYING TO PROVE LEMMA
Lemma append_empty_list_0 : [1; 2; 3] ++ [ ] = [1; 2; 3].


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.




Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.
Proof.
  destruct p. reflexivity. Qed.



Theorem fst_swap_is_snd : forall (p : natprod),
  fst (swap_pair p) = snd p.
Proof.
  destruct p. reflexivity. Qed.







Inductive natlist : Type :=
  | nil
  | cons (n : nat) (l : natlist).



Definition mylist := cons 1 (cons 2 (cons 3 nil)).



Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).



Definition mylist1 := 1 :: (2 :: (3 :: nil)).
Definition mylist2 := 1 :: 2 :: 3 :: nil.
Definition mylist3 := [1;2;3].








Fixpoint repeat (n count : nat) : natlist :=
  match count with
  | O => nil
  | S count' => n :: (repeat n count')
  end.






Fixpoint length (l:natlist) : nat :=
  match l with
  | nil => O
  | h :: t => S (length t)
  end.






Fixpoint app (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil    => l2
  | h :: t => h :: (app t l2)
  end.



Notation "x ++ y" := (app x y)
                     (right associativity, at level 60).

Example test_app1:             [1;2;3] ++ [4;5] = [1;2;3;4;5].
Proof. reflexivity. Qed.
Example test_app2:             nil ++ [4;5] = [4;5].
Proof. reflexivity. Qed.


Lemma append_empty_list_0 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the cons operator.
*)
  unfold cons.
(* We will also use the definition of the nil operator.
*)
  unfold nil.
(* We will also use the definition of the O constructor for nat.
*)
  unfold O.
(* We will also use the definition of the S constructor for nat.
*)
  unfold S.
(* We will also use the definition of the length function.
*)
  unfold length.
(* We will also use the definition of the mylist3 variable.
*)
  unfold mylist3.
(* We will also use the definition of the nil operator.
*)
  unfold nil.
(* We will also use the definition of the O constructor for nat.
*)
  unfold O.
(* We will also use the definition of the S constructor for nat.
*)
  unfold S.
(* We will also use the definition of the length function.
*)
  unfold length.
(* We will also use the definition of the mylist3 variable.
*)
  unfold mylist3.
(* We will also use the definition of the nil operator.
*)
  unfold nil.
(* We will also use the definition of the O constructor for nat.
*)
  unfold O.
(* We will also use the definition of the S constructor for nat.
*)
  unfold S.
(* We will also use the definition of the length function.
*)
  unfold length.
(* We will also use the definition of the mylist3 variable.
*)
  unfold mylist3.
(* We will also use the definition of the nil operator.
*)
  unfold nil.
(* We will also use the definition of the O constructor for nat.
*)
  unfold O.
(* We will also use the definition of the S constructor for nat.
*)
  unfold S.
(* We will also use the definition of the length function.
*)
  unfold length.
(* We will also use the definition of the mylist3 variable.
*)
  unfold mylist3.
(* We will also use the definition of the nil operator.
*)
  unfold nil.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #126)
Error in step "unfold cons.".
Message: Cannot turn constructor cons
into an evaluable reference..
Goal: [1; 2; 3] ++ [ ] = [1; 2; 3].


TRYING TO PROVE LEMMA
Lemma append_empty_list_1 : [1; 2; 3] ++ [ ] = [1; 2; 3].


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.




Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.
Proof.
  destruct p. reflexivity. Qed.



Theorem fst_swap_is_snd : forall (p : natprod),
  fst (swap_pair p) = snd p.
Proof.
  destruct p. reflexivity. Qed.







Inductive natlist : Type :=
  | nil
  | cons (n : nat) (l : natlist).



Definition mylist := cons 1 (cons 2 (cons 3 nil)).



Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).



Definition mylist1 := 1 :: (2 :: (3 :: nil)).
Definition mylist2 := 1 :: 2 :: 3 :: nil.
Definition mylist3 := [1;2;3].








Fixpoint repeat (n count : nat) : natlist :=
  match count with
  | O => nil
  | S count' => n :: (repeat n count')
  end.






Fixpoint length (l:natlist) : nat :=
  match l with
  | nil => O
  | h :: t => S (length t)
  end.






Fixpoint app (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil    => l2
  | h :: t => h :: (app t l2)
  end.



Notation "x ++ y" := (app x y)
                     (right associativity, at level 60).

Example test_app1:             [1;2;3] ++ [4;5] = [1;2;3;4;5].
Proof. reflexivity. Qed.
Example test_app2:             nil ++ [4;5] = [4;5].
Proof. reflexivity. Qed.


Lemma append_empty_list_1 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the empty list.
*)
  unfold nil.
(* Now, we will use pattern matching to destruct the list [1; 2; 3].
*)
  destruct mylist as [n1 l1].
(* We will now destruct l1, which is [2; 3].
*)
  destruct l1 as [n2 l2].
(* We will now destruct l2, which is [3].
*)
  destruct l2 as [n3 l3].
(* l3 is the empty list, so we can now use the base case of the length function.
*)
  simpl in IHl3.
(* We will now use the induction hypothesis for l2.
*)
  simpl in IHl2.
(* We will now use the induction hypothesis for l1.
*)
  simpl in IHl1.
(* We will now use the induction hypothesis for mylist.
*)
  reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #126)
Error in step "unfold nil.".
Message: Cannot turn constructor nil
into an evaluable reference..
Goal: [1; 2; 3] ++ [ ] = [1; 2; 3].


TRYING TO PROVE LEMMA
Lemma append_empty_list_2 : [1; 2; 3] ++ [ ] = [1; 2; 3].


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.




Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.
Proof.
  destruct p. reflexivity. Qed.



Theorem fst_swap_is_snd : forall (p : natprod),
  fst (swap_pair p) = snd p.
Proof.
  destruct p. reflexivity. Qed.







Inductive natlist : Type :=
  | nil
  | cons (n : nat) (l : natlist).



Definition mylist := cons 1 (cons 2 (cons 3 nil)).



Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).



Definition mylist1 := 1 :: (2 :: (3 :: nil)).
Definition mylist2 := 1 :: 2 :: 3 :: nil.
Definition mylist3 := [1;2;3].








Fixpoint repeat (n count : nat) : natlist :=
  match count with
  | O => nil
  | S count' => n :: (repeat n count')
  end.






Fixpoint length (l:natlist) : nat :=
  match l with
  | nil => O
  | h :: t => S (length t)
  end.






Fixpoint app (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil    => l2
  | h :: t => h :: (app t l2)
  end.



Notation "x ++ y" := (app x y)
                     (right associativity, at level 60).

Example test_app1:             [1;2;3] ++ [4;5] = [1;2;3;4;5].
Proof. reflexivity. Qed.
Example test_app2:             nil ++ [4;5] = [4;5].
Proof. reflexivity. Qed.


Lemma append_empty_list_2 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the empty list.
*)
  unfold nil.
(* Now, we will use pattern matching to destruct the list [1; 2; 3].
*)
  destruct mylist as [n1 l1].
(* We will now destruct l1, which is [2; 3].
*)
  destruct l1 as [n2 l2].
(* We will now destruct l2, which is [3].
*)
  destruct l2 as [n3 l3].
(* l3 is the empty list, so we can now use the base case of the append operation.
*)
  reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #126)
Error in step "unfold nil.".
Message: Cannot turn constructor nil
into an evaluable reference..
Goal: [1; 2; 3] ++ [ ] = [1; 2; 3].


TRYING TO PROVE LEMMA
Lemma append_empty_list_3 : [1; 2; 3] ++ [ ] = [1; 2; 3].


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.




Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.
Proof.
  destruct p. reflexivity. Qed.



Theorem fst_swap_is_snd : forall (p : natprod),
  fst (swap_pair p) = snd p.
Proof.
  destruct p. reflexivity. Qed.







Inductive natlist : Type :=
  | nil
  | cons (n : nat) (l : natlist).



Definition mylist := cons 1 (cons 2 (cons 3 nil)).



Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).



Definition mylist1 := 1 :: (2 :: (3 :: nil)).
Definition mylist2 := 1 :: 2 :: 3 :: nil.
Definition mylist3 := [1;2;3].








Fixpoint repeat (n count : nat) : natlist :=
  match count with
  | O => nil
  | S count' => n :: (repeat n count')
  end.






Fixpoint length (l:natlist) : nat :=
  match l with
  | nil => O
  | h :: t => S (length t)
  end.






Fixpoint app (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil    => l2
  | h :: t => h :: (app t l2)
  end.



Notation "x ++ y" := (app x y)
                     (right associativity, at level 60).

Example test_app1:             [1;2;3] ++ [4;5] = [1;2;3;4;5].
Proof. reflexivity. Qed.
Example test_app2:             nil ++ [4;5] = [4;5].
Proof. reflexivity. Qed.


Lemma append_empty_list_3 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the empty list.
*)
  unfold nil.
(* Now, we will use pattern matching to destruct the list [1; 2; 3].
*)
  destruct mylist3 as [| n h t].
- (* In this case, the list is empty.
But we know that [1; 2; 3] is not empty,
      so this case is impossible.
*)
    contradiction.
- (* In this case, the list is non-empty.
But we know that [1; 2; 3] is not empty,
      so this case is impossible.
*)
    contradiction.
- (* In this case, we have destructed the list [1; 2; 3] to its head n and tail t.
We also know that the tail t is [2; 3] and the empty list [] is nil.
So, the append operation reduces to cons n (append t []).
*)
    simpl.
(* Now, we will use the definition of the append operation for lists.
*)
    unfold append.
(* We will also use the definition of the empty list.
*)
    unfold nil.
(* Now, we have cons n (append t []).
But we know that the append operation
      of a list with the empty list is the list itself.
So, we can simplify this to
      cons n t.
*)
    simpl.
(* Now, we have cons 1 (cons 2 (cons 3 nil)).
But we know that this is equal
      to [1; 2; 3].
So, we can rewrite this to [1; 2; 3].
*)
    rewrite <- mylist3_def.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #126)
Error in step "unfold nil.".
Message: Cannot turn constructor nil
into an evaluable reference..
Goal: [1; 2; 3] ++ [ ] = [1; 2; 3].


TRYING TO PROVE LEMMA
Lemma append_empty_list_4 : [1; 2; 3] ++ [ ] = [1; 2; 3].


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.




Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.
Proof.
  destruct p. reflexivity. Qed.



Theorem fst_swap_is_snd : forall (p : natprod),
  fst (swap_pair p) = snd p.
Proof.
  destruct p. reflexivity. Qed.







Inductive natlist : Type :=
  | nil
  | cons (n : nat) (l : natlist).



Definition mylist := cons 1 (cons 2 (cons 3 nil)).



Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).



Definition mylist1 := 1 :: (2 :: (3 :: nil)).
Definition mylist2 := 1 :: 2 :: 3 :: nil.
Definition mylist3 := [1;2;3].








Fixpoint repeat (n count : nat) : natlist :=
  match count with
  | O => nil
  | S count' => n :: (repeat n count')
  end.






Fixpoint length (l:natlist) : nat :=
  match l with
  | nil => O
  | h :: t => S (length t)
  end.






Fixpoint app (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil    => l2
  | h :: t => h :: (app t l2)
  end.



Notation "x ++ y" := (app x y)
                     (right associativity, at level 60).

Example test_app1:             [1;2;3] ++ [4;5] = [1;2;3;4;5].
Proof. reflexivity. Qed.
Example test_app2:             nil ++ [4;5] = [4;5].
Proof. reflexivity. Qed.


Lemma append_empty_list_4 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the length function.
*)
  unfold length.
(* We will perform induction on the length of the first list.
*)
  induction (length mylist).
- (* For the base case, we have an empty list.
*)
    (* We know that the append of an empty list with another list is the other list.
*)
    reflexivity.
- (* For the inductive case, we have a list of the form h :: t.
*)
    (* We know that the append of a list of this form with another list is the list h :: (append t l).
*)
    (* By the induction hypothesis, we know that (append t l) = t.
*)
    (* Therefore, the append of the entire list is h :: t, which is the original list.
*)
    reflexivity.
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.




Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.
Proof.
  destruct p. reflexivity. Qed.



Theorem fst_swap_is_snd : forall (p : natprod),
  fst (swap_pair p) = snd p.
Proof.
  destruct p. reflexivity. Qed.







Inductive natlist : Type :=
  | nil
  | cons (n : nat) (l : natlist).



Definition mylist := cons 1 (cons 2 (cons 3 nil)).



Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).



Definition mylist1 := 1 :: (2 :: (3 :: nil)).
Definition mylist2 := 1 :: 2 :: 3 :: nil.
Definition mylist3 := [1;2;3].








Fixpoint repeat (n count : nat) : natlist :=
  match count with
  | O => nil
  | S count' => n :: (repeat n count')
  end.






Fixpoint length (l:natlist) : nat :=
  match l with
  | nil => O
  | h :: t => S (length t)
  end.






Fixpoint app (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil    => l2
  | h :: t => h :: (app t l2)
  end.



Notation "x ++ y" := (app x y)
                     (right associativity, at level 60).

Example test_app1:             [1;2;3] ++ [4;5] = [1;2;3;4;5].
Proof. reflexivity. Qed.
Example test_app2:             nil ++ [4;5] = [4;5].
Proof. reflexivity. Qed.


Lemma append_empty_list_4 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the length function.
*)
  unfold length.
(* We will perform induction on the length of the first list.
*)
  induction (length mylist).
- (* For the base case, we have an empty list.
*)
    (* We know that the append of an empty list with another list is the other list.
*)
    reflexivity.
- (* For the inductive case, we have a list of the form h :: t.
*)
    (* We know that the append of a list of this form with another list is the list h :: (append t l).
*)
    (* By the induction hypothesis, we know that (append t l) = t.
*)
    (* Therefore, the append of the entire list is h :: t, which is the original list.
*)
    reflexivity.
Qed.

Lemma append_empty_list_3 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the empty list.
*)
  apply (@append_empty_list_4 ).
- (* In this case, the list is empty.
But we know that [1; 2; 3] is not empty,
      so this case is impossible.
*)
    contradiction.
- (* In this case, the list is non-empty.
But we know that [1; 2; 3] is not empty,
      so this case is impossible.
*)
    contradiction.
- (* In this case, we have destructed the list [1; 2; 3] to its head n and tail t.
We also know that the tail t is [2; 3] and the empty list [] is nil.
So, the append operation reduces to cons n (append t []).
*)
    simpl.
(* Now, we will use the definition of the append operation for lists.
*)
    unfold append.
(* We will also use the definition of the empty list.
*)
    unfold nil.
(* Now, we have cons n (append t []).
But we know that the append operation
      of a list with the empty list is the list itself.
So, we can simplify this to
      cons n t.
*)
    simpl.
(* Now, we have cons 1 (cons 2 (cons 3 nil)).
But we know that this is equal
      to [1; 2; 3].
So, we can rewrite this to [1; 2; 3].
*)
    rewrite <- mylist3_def.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.




Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.
Proof.
  destruct p. reflexivity. Qed.



Theorem fst_swap_is_snd : forall (p : natprod),
  fst (swap_pair p) = snd p.
Proof.
  destruct p. reflexivity. Qed.







Inductive natlist : Type :=
  | nil
  | cons (n : nat) (l : natlist).



Definition mylist := cons 1 (cons 2 (cons 3 nil)).



Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).



Definition mylist1 := 1 :: (2 :: (3 :: nil)).
Definition mylist2 := 1 :: 2 :: 3 :: nil.
Definition mylist3 := [1;2;3].








Fixpoint repeat (n count : nat) : natlist :=
  match count with
  | O => nil
  | S count' => n :: (repeat n count')
  end.






Fixpoint length (l:natlist) : nat :=
  match l with
  | nil => O
  | h :: t => S (length t)
  end.






Fixpoint app (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil    => l2
  | h :: t => h :: (app t l2)
  end.



Notation "x ++ y" := (app x y)
                     (right associativity, at level 60).

Example test_app1:             [1;2;3] ++ [4;5] = [1;2;3;4;5].
Proof. reflexivity. Qed.
Example test_app2:             nil ++ [4;5] = [4;5].
Proof. reflexivity. Qed.


Lemma append_empty_list_4 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the length function.
*)
  unfold length.
(* We will perform induction on the length of the first list.
*)
  induction (length mylist).
- (* For the base case, we have an empty list.
*)
    (* We know that the append of an empty list with another list is the other list.
*)
    reflexivity.
- (* For the inductive case, we have a list of the form h :: t.
*)
    (* We know that the append of a list of this form with another list is the list h :: (append t l).
*)
    (* By the induction hypothesis, we know that (append t l) = t.
*)
    (* Therefore, the append of the entire list is h :: t, which is the original list.
*)
    reflexivity.
Qed.

Lemma append_empty_list_3 : [1; 2; 3] ++ [ ] = [1; 2; 3].




Proof.
(* We will use the definition of the append operation for lists.
*)
  
unfold append.
(* We will also use the definition of the empty list.
*)
  
apply (@append_empty_list_4 ).
Qed.

Lemma append_empty_list_2 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the empty list.
*)
  apply (@append_empty_list_3 ).
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.




Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.
Proof.
  destruct p. reflexivity. Qed.



Theorem fst_swap_is_snd : forall (p : natprod),
  fst (swap_pair p) = snd p.
Proof.
  destruct p. reflexivity. Qed.







Inductive natlist : Type :=
  | nil
  | cons (n : nat) (l : natlist).



Definition mylist := cons 1 (cons 2 (cons 3 nil)).



Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).



Definition mylist1 := 1 :: (2 :: (3 :: nil)).
Definition mylist2 := 1 :: 2 :: 3 :: nil.
Definition mylist3 := [1;2;3].








Fixpoint repeat (n count : nat) : natlist :=
  match count with
  | O => nil
  | S count' => n :: (repeat n count')
  end.






Fixpoint length (l:natlist) : nat :=
  match l with
  | nil => O
  | h :: t => S (length t)
  end.






Fixpoint app (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil    => l2
  | h :: t => h :: (app t l2)
  end.



Notation "x ++ y" := (app x y)
                     (right associativity, at level 60).

Example test_app1:             [1;2;3] ++ [4;5] = [1;2;3;4;5].
Proof. reflexivity. Qed.
Example test_app2:             nil ++ [4;5] = [4;5].
Proof. reflexivity. Qed.


Lemma append_empty_list_4 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the length function.
*)
  unfold length.
(* We will perform induction on the length of the first list.
*)
  induction (length mylist).
- (* For the base case, we have an empty list.
*)
    (* We know that the append of an empty list with another list is the other list.
*)
    reflexivity.
- (* For the inductive case, we have a list of the form h :: t.
*)
    (* We know that the append of a list of this form with another list is the list h :: (append t l).
*)
    (* By the induction hypothesis, we know that (append t l) = t.
*)
    (* Therefore, the append of the entire list is h :: t, which is the original list.
*)
    reflexivity.
Qed.

Lemma append_empty_list_3 : [1; 2; 3] ++ [ ] = [1; 2; 3].




Proof.
(* We will use the definition of the append operation for lists.
*)
  
unfold append.
(* We will also use the definition of the empty list.
*)
  
apply (@append_empty_list_4 ).
Qed.

Lemma append_empty_list_2 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the empty list.
*)
  apply (@append_empty_list_3 ).
Qed.

Lemma append_empty_list_1 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the empty list.
*)
  apply (@append_empty_list_2 ).
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.




Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.
Proof.
  destruct p. reflexivity. Qed.



Theorem fst_swap_is_snd : forall (p : natprod),
  fst (swap_pair p) = snd p.
Proof.
  destruct p. reflexivity. Qed.







Inductive natlist : Type :=
  | nil
  | cons (n : nat) (l : natlist).



Definition mylist := cons 1 (cons 2 (cons 3 nil)).



Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).



Definition mylist1 := 1 :: (2 :: (3 :: nil)).
Definition mylist2 := 1 :: 2 :: 3 :: nil.
Definition mylist3 := [1;2;3].








Fixpoint repeat (n count : nat) : natlist :=
  match count with
  | O => nil
  | S count' => n :: (repeat n count')
  end.






Fixpoint length (l:natlist) : nat :=
  match l with
  | nil => O
  | h :: t => S (length t)
  end.






Fixpoint app (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil    => l2
  | h :: t => h :: (app t l2)
  end.



Notation "x ++ y" := (app x y)
                     (right associativity, at level 60).

Example test_app1:             [1;2;3] ++ [4;5] = [1;2;3;4;5].
Proof. reflexivity. Qed.
Example test_app2:             nil ++ [4;5] = [4;5].
Proof. reflexivity. Qed.


Lemma append_empty_list_4 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the length function.
*)
  unfold length.
(* We will perform induction on the length of the first list.
*)
  induction (length mylist).
- (* For the base case, we have an empty list.
*)
    (* We know that the append of an empty list with another list is the other list.
*)
    reflexivity.
- (* For the inductive case, we have a list of the form h :: t.
*)
    (* We know that the append of a list of this form with another list is the list h :: (append t l).
*)
    (* By the induction hypothesis, we know that (append t l) = t.
*)
    (* Therefore, the append of the entire list is h :: t, which is the original list.
*)
    reflexivity.
Qed.

Lemma append_empty_list_3 : [1; 2; 3] ++ [ ] = [1; 2; 3].




Proof.
(* We will use the definition of the append operation for lists.
*)
  
unfold append.
(* We will also use the definition of the empty list.
*)
  
apply (@append_empty_list_4 ).
Qed.

Lemma append_empty_list_2 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the empty list.
*)
  apply (@append_empty_list_3 ).
Qed.

Lemma append_empty_list_1 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the empty list.
*)
  apply (@append_empty_list_2 ).
Qed.

Lemma append_empty_list_0 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the cons operator.
*)
  apply (@append_empty_list_1 ).
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED EXAMPLE PROOF (LEMMAS USED: 1)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.




Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.
Proof.
  destruct p. reflexivity. Qed.



Theorem fst_swap_is_snd : forall (p : natprod),
  fst (swap_pair p) = snd p.
Proof.
  destruct p. reflexivity. Qed.







Inductive natlist : Type :=
  | nil
  | cons (n : nat) (l : natlist).



Definition mylist := cons 1 (cons 2 (cons 3 nil)).



Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).



Definition mylist1 := 1 :: (2 :: (3 :: nil)).
Definition mylist2 := 1 :: 2 :: 3 :: nil.
Definition mylist3 := [1;2;3].








Fixpoint repeat (n count : nat) : natlist :=
  match count with
  | O => nil
  | S count' => n :: (repeat n count')
  end.






Fixpoint length (l:natlist) : nat :=
  match l with
  | nil => O
  | h :: t => S (length t)
  end.






Fixpoint app (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil    => l2
  | h :: t => h :: (app t l2)
  end.



Notation "x ++ y" := (app x y)
                     (right associativity, at level 60).

Example test_app1:             [1;2;3] ++ [4;5] = [1;2;3;4;5].
Proof. reflexivity. Qed.
Example test_app2:             nil ++ [4;5] = [4;5].
Proof. reflexivity. Qed.


Lemma append_empty_list_4 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the length function.
*)
  unfold length.
(* We will perform induction on the length of the first list.
*)
  induction (length mylist).
- (* For the base case, we have an empty list.
*)
    (* We know that the append of an empty list with another list is the other list.
*)
    reflexivity.
- (* For the inductive case, we have a list of the form h :: t.
*)
    (* We know that the append of a list of this form with another list is the list h :: (append t l).
*)
    (* By the induction hypothesis, we know that (append t l) = t.
*)
    (* Therefore, the append of the entire list is h :: t, which is the original list.
*)
    reflexivity.
Qed.

Lemma append_empty_list_3 : [1; 2; 3] ++ [ ] = [1; 2; 3].




Proof.
(* We will use the definition of the append operation for lists.
*)
  
unfold append.
(* We will also use the definition of the empty list.
*)
  
apply (@append_empty_list_4 ).
Qed.

Lemma append_empty_list_2 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the empty list.
*)
  apply (@append_empty_list_3 ).
Qed.

Lemma append_empty_list_1 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the empty list.
*)
  apply (@append_empty_list_2 ).
Qed.

Lemma append_empty_list_0 : [1; 2; 3] ++ [ ] = [1; 2; 3].

Proof.
(* We will use the definition of the append operation for lists.
*)
  unfold append.
(* We will also use the definition of the cons operator.
*)
  apply (@append_empty_list_1 ).
Qed.

Example test_app3 : [1;2;3] ++ nil = [1;2;3].

Proof.
(* We will proceed by induction on the first list.
*)
  apply (@append_empty_list_0 ).
- (* Base case: l1 is empty.
*)
    simpl.
rewrite IHnil.
reflexivity.
- (* Inductive case: l1 is cons n l1'.
*)
    simpl.
rewrite IHcons.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
Outdated contents in ..cache: recomputing
EXAMPLE PROOF IS VALID

