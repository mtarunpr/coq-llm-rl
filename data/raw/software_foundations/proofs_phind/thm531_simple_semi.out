PROVING simple_semi
ATTEMPTED LEMMA PROOF (LEMMAS USED: 0)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.












Lemma simple_semi : forall n, (n + 1 =? 0) = false.

Proof.
(*
    We will proceed by induction on n.
Base case: n = 0
    (n + 1 =? 0) = false
    Since n = 0, (0 + 1 =? 0) = false
    This is true because 1 <> 0.
*)
  intros n.
induction n as [|n' IHn'].
- simpl.
reflexivity.
(*
    Inductive case: n = S n'
    (S n' + 1 =? 0) = false
    By the induction hypothesis, we know that (n' + 1 =? 0) = false.
We will prove that (S n' + 1 =? 0) = false.
We have two cases to consider:
    1.
n' + 1 = 0
    2.
n' + 1 <> 0
    Case 1 is impossible because n' + 1 = 0 would mean n' = -1, which is not possible.
Therefore, we only need to consider case 2.
Since n' + 1 <> 0, S n' + 1 <> S 0 = 1.
Hence, (S n' + 1 =? 0) = false.
*)
  - simpl.
destruct (n' + 1 =? 0) eqn:E.
+ contradiction.
+ reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #190)
Error in step "contradiction.".
Message: No such contradiction.
Goal: false = false.


TRYING TO PROVE LEMMA
Lemma helper_lemma_zero_check_0 : forall n' : nat, forall E : (n' + 1 =? 0) = true, forall IHn' : true = false, false = false.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.












Lemma helper_lemma_zero_check_0 : forall n' : nat, forall E : (n' + 1 =? 0) = true, forall IHn' : true = false, false = false.

Proof.
(* We will proceed by induction on n'.
*)
  induction n' as [|n' IHn']; intros E IHn'.
(* Base case: n' = 0 *)
  - simpl.
(* We need to show that (0 + 1 =? 0) = true -> false = false.
*)
    (* This is trivial since (0 + 1 =? 0) = false by definition.
*)
    reflexivity.
(* Inductive case: n' = S n *)
  - simpl.
(* We need to show that (S n' + 1 =? 0) = true -> false = false.
*)
    (* This follows from the inductive hypothesis IHn'.
*)
    apply IHn'.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #172)
Error in step "induction n' as [|n' IHn']; intros E IHn'.".
Message: IHn' is already used..
Goal: forall n' : nat,
(n' + 1 =? 0) = true -> true = false -> false = false.


TRYING TO PROVE LEMMA
Lemma nat_plus_one_not_zero_1 : forall n' : nat,
(n' + 1 =? 0) = true -> true = false -> false = false.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.












Lemma nat_plus_one_not_zero_1 : forall n' : nat,
(n' + 1 =? 0) = true -> true = false -> false = false.

Proof.
(* We will proceed by contradiction.
Assume the premise of the lemma is true,
     i.e., n' + 1 = 0.
*)
  intros n' H.
assert (H0 : n' + 1 = 0) as H1.
(* Now, we have H1 : n' + 1 = 0.
We will use the theorem silly1 to rewrite this
     equation to 1 + n' = 0.
*)
  rewrite silly1 in H1.
(* Now, we have H1 : 1 + n' = 0.
We will use the theorem silly2 to rewrite this
     equation to true = false.
*)
  rewrite silly2 in H1.
(* Now, we have H1 : true = false.
We will use the theorem refl to rewrite this
     equation to true = true.
*)
  rewrite eq_refl in H1.
(* Now, we have H1 : true = true.
We will use the theorem eq_true_intro to
     rewrite this equation to true = true.
*)
  rewrite eq_true_intro in H1.
(* Now, we have H1 : true = true.
We will use the theorem eq_true_intro to
     rewrite this equation to true = true.
*)
  rewrite eq_true_intro in H1.
(* Now, we have H1 : true = true.
We will use the theorem eq_true_intro to
     rewrite this equation to true = true.
*)
  rewrite eq_true_intro in H1.
(* Now, we have H1 : true = true.
We will use the theorem eq_true_intro to
     rewrite this equation to true = true.
*)
  rewrite eq_true_intro in H1.
(* Now, we have H1 : true = true.
We will use the theorem eq_true_intro to
     rewrite this equation to true = true.
*)
  rewrite eq_true_intro in H1.
(* Now, we have H1 : true = true.
We will use the theorem eq_true_intro to
     rewrite this equation to true = true.
*)
  rewrite eq_true_intro in H1.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #174)
Error after step "intros n' H.".
Message: There are still unproven goals.
Goal: true = false -> false = false.


TRYING TO PROVE LEMMA
Lemma nat_plus_one_not_zero_2 : forall n' : nat, forall H : (n' + 1 =? 0) = true, true = false -> false = false.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.












Lemma nat_plus_one_not_zero_2 : forall n' : nat, forall H : (n' + 1 =? 0) = true, true = false -> false = false.

Proof.
intros n' H H0.
inversion H0.
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.












Lemma nat_plus_one_not_zero_2 : forall n' : nat, forall H : (n' + 1 =? 0) = true, true = false -> false = false.

Proof.
intros n' H H0.
inversion H0.
Qed.

Lemma nat_plus_one_not_zero_1 : forall n' : nat,
(n' + 1 =? 0) = true -> true = false -> false = false.

Proof.
(* We will proceed by contradiction.
Assume the premise of the lemma is true,
     i.e., n' + 1 = 0.
*)
  intros n' H.
assert (H0 : n' + 1 = 0) as H1.
(* Now, we have H1 : n' + 1 = 0.
We will use the theorem silly1 to rewrite this
     equation to 1 + n' = 0.
*)
  rewrite silly1 in H1.
(* Now, we have H1 : 1 + n' = 0.
We will use the theorem silly2 to rewrite this
     equation to true = false.
*)
  rewrite silly2 in H1.
(* Now, we have H1 : true = false.
We will use the theorem refl to rewrite this
     equation to true = true.
*)
  rewrite eq_refl in H1.
(* Now, we have H1 : true = true.
We will use the theorem eq_true_intro to
     rewrite this equation to true = true.
*)
  rewrite eq_true_intro in H1.
(* Now, we have H1 : true = true.
We will use the theorem eq_true_intro to
     rewrite this equation to true = true.
*)
  rewrite eq_true_intro in H1.
(* Now, we have H1 : true = true.
We will use the theorem eq_true_intro to
     rewrite this equation to true = true.
*)
  rewrite eq_true_intro in H1.
(* Now, we have H1 : true = true.
We will use the theorem eq_true_intro to
     rewrite this equation to true = true.
*)
  rewrite eq_true_intro in H1.
(* Now, we have H1 : true = true.
We will use the theorem eq_true_intro to
     rewrite this equation to true = true.
*)
  rewrite eq_true_intro in H1.
(* Now, we have H1 : true = true.
We will use the theorem eq_true_intro to
     rewrite this equation to true = true.
*)
  rewrite eq_true_intro in H1.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #184)
Error after step "intros n' H.".
Message: There are still unproven goals.
Goal: true = false -> false = false.


TRYING TO PROVE LEMMA
Lemma nat_plus_one_not_zero_3 : forall n' : nat, forall H : (n' + 1 =? 0) = true, true = false -> false = false.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.












Lemma nat_plus_one_not_zero_2 : forall n' : nat, forall H : (n' + 1 =? 0) = true, true = false -> false = false.

Proof.
intros n' H H0.
inversion H0.
Qed.

Lemma nat_plus_one_not_zero_3 : forall n' : nat, forall H : (n' + 1 =? 0) = true, true = false -> false = false.

Proof.
(* We will prove the theorem by contradiction.
We assume that n' + 1 = 0 and true = false.
We will derive a contradiction from this assumption.
*)
  intros n' H contra.
(* We have H : n' + 1 =? 0 = true and contra : true = false.
We can use the equality
     between propositions to rewrite H to n' + 1 = 0.
*)
  rewrite H in contra.
(* Now we have contra : 0 = false.
We can use the axiom of Peano to derive a contradiction
     from this equation.
The axiom of Peano states that for all n : nat, S n <> 0.
*)
  apply (Peano_axiom contra).
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #184)
Error in step "rewrite H in contra.".
Message: Found no subterm matching "n' + 1 =? 0" in contra..
Goal: false = false.


TRYING TO PROVE LEMMA
Lemma nat_addition_no_overflow_4 : forall n' : nat, forall H : (n' + 1 =? 0) = true, forall contra : true = false, false = false.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.












Lemma nat_plus_one_not_zero_2 : forall n' : nat, forall H : (n' + 1 =? 0) = true, true = false -> false = false.

Proof.
intros n' H H0.
inversion H0.
Qed.

Lemma nat_addition_no_overflow_4 : forall n' : nat, forall H : (n' + 1 =? 0) = true, forall contra : true = false, false = false.

Proof.
(* We will prove the lemma by contradiction.
We assume that n' + 1 = 0, which is our contradiction hypothesis (contra).
*)
  intros n' H contra.
(* We will now derive a contradiction from our assumption.
We know that n' + 1 = 0, so we can rewrite this as S n' = 0.
*)
  rewrite H in contra.
(* Now we have contra : S n' = 0.
We can now apply the lemma nat_plus_one_not_zero_2, which states that if S n' = 0, then false = false.
*)
  apply (nat_plus_one_not_zero_2 n' contra).
(* This gives us the goal false = false, which is a trivially true statement.
*)

Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #184)
Error in step "rewrite H in contra.".
Message: Found no subterm matching "n' + 1 =? 0" in contra..
Goal: false = false.


TRYING TO PROVE LEMMA
Lemma nat_addition_no_overflow_5 : forall n' : nat, forall H : (n' + 1 =? 0) = true, forall contra : true = false, false = false.


Error proving simple_semi
MAX LEMMA DEPTH REACHED. GIVING UP.