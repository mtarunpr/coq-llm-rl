PROVING app_length'
ATTEMPTED THEOREM PROOF (LEMMAS USED: 0)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.










Lemma simple_semi : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  destruct n eqn:E.
    
    -  simpl. reflexivity.
    -  simpl. reflexivity.
Qed.



Lemma simple_semi' : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  
  destruct n;
  
  simpl;
  
  reflexivity.
Qed.



Lemma simple_semi'' : forall n, (n + 1 =? 0) = false.
Proof.
  destruct n; reflexivity.
Qed.





Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof. destruct b; destruct c; try reflexivity; try discriminate. Qed.

Theorem add_assoc : forall n m p : nat,
    n + (m + p) = (n + m) + p.
Proof. intros n m p; induction n as [| n' IHn']; try (simpl; rewrite IHn'); reflexivity. Qed.

Fixpoint nonzeros (lst : list nat) :=
  match lst with
  | [] => []
  | 0 :: t => nonzeros t
  | h :: t => h :: nonzeros t
  end.

Lemma nonzeros_app : forall lst1 lst2 : list nat,
  nonzeros (lst1 ++ lst2) = (nonzeros lst1) ++ (nonzeros lst2).
Proof. intros lst1 lst2; induction lst1 as [|h t IH]; try (destruct h; simpl; rewrite <- IH); reflexivity. Qed.





Lemma re_opt_e_match' : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2];
    
    simpl.
  -  apply MEmpty.
  -  apply MChar.
  - 
    destruct re1;
    
    try (apply MApp; try apply IH1; apply IH2).
    
    inversion Hmatch1. simpl. apply IH2.
  -  apply MUnionL. apply IH.
  -  apply MUnionR. apply IH.
  -  apply MStar0.
  -   apply MStarApp. apply IH1.  apply IH2.
Qed.






Theorem app_length : forall (X : Type) (lst1 lst2 : list X),
    length (lst1 ++ lst2) = (length lst1) + (length lst2).
Proof.
  intros; induction lst1;
    [reflexivity | simpl; rewrite IHlst1; reflexivity].
Qed.





Theorem app_length' : forall (X : Type) (lst1 lst2 : list X),
    length (lst1 ++ lst2) = (length lst1) + (length lst2).

Proof.
(* We will proceed by induction on lst1.
*)
  intros X lst1 lst2.
(* Base case: lst1 = [] *)
  induction lst1 as [|x lst1' IHlst1'].
- (* lst1 = [] *)
    reflexivity.
- (* lst1 = x :: lst1' *)
    (* We will use the induction hypothesis IHlst1' *)
    (* lst1' ++ lst2 = (x :: lst1') ++ lst2 = x :: (lst1' ++ lst2) *)
    simpl.
(* By the induction hypothesis, we have *)
    (*   length (lst1' ++ lst2) = length lst1' + length lst2 *)
    (* And by definition of length, we have *)
    (*   length (x :: lst1' ++ lst2) = S (length (lst1' ++ lst2)) *)
    (* So, we have *)
    (*   S (length (lst1' ++ lst2)) = S (length lst1' + length lst2) *)
    (* Which simplifies to *)
    (*   length (x :: lst1' ++ lst2) = length (x :: lst1') + length lst2 *)
    (* By the previous computation, we have *)
    (*   length (x :: lst1' ++ lst2) = length (x :: lst1') + length lst2 *)
    (* So, we have proved the theorem by induction.
*)
    reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN THEOREM PROOF (FRAGMENT #310)
Error in step "reflexivity.".
Message: In environment
X : Type
x : X
lst1', lst2 : list X
IHlst1' : length (lst1' ++ lst2) =
          length lst1' + length lst2
Unable to unify "S (length lst1' + length lst2)" with
 "S (length (lst1' ++ lst2))"..
Goal: S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).


TRYING TO PROVE LEMMA
Lemma length_append_equal_plus_0 : forall X : Type, forall x : X, forall lst1' lst2 : list X, forall IHlst1' : length (lst1' ++ lst2) =
length lst1' + length lst2, S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.










Lemma simple_semi : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  destruct n eqn:E.
    
    -  simpl. reflexivity.
    -  simpl. reflexivity.
Qed.



Lemma simple_semi' : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  
  destruct n;
  
  simpl;
  
  reflexivity.
Qed.



Lemma simple_semi'' : forall n, (n + 1 =? 0) = false.
Proof.
  destruct n; reflexivity.
Qed.





Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof. destruct b; destruct c; try reflexivity; try discriminate. Qed.

Theorem add_assoc : forall n m p : nat,
    n + (m + p) = (n + m) + p.
Proof. intros n m p; induction n as [| n' IHn']; try (simpl; rewrite IHn'); reflexivity. Qed.

Fixpoint nonzeros (lst : list nat) :=
  match lst with
  | [] => []
  | 0 :: t => nonzeros t
  | h :: t => h :: nonzeros t
  end.

Lemma nonzeros_app : forall lst1 lst2 : list nat,
  nonzeros (lst1 ++ lst2) = (nonzeros lst1) ++ (nonzeros lst2).
Proof. intros lst1 lst2; induction lst1 as [|h t IH]; try (destruct h; simpl; rewrite <- IH); reflexivity. Qed.





Lemma re_opt_e_match' : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2];
    
    simpl.
  -  apply MEmpty.
  -  apply MChar.
  - 
    destruct re1;
    
    try (apply MApp; try apply IH1; apply IH2).
    
    inversion Hmatch1. simpl. apply IH2.
  -  apply MUnionL. apply IH.
  -  apply MUnionR. apply IH.
  -  apply MStar0.
  -   apply MStarApp. apply IH1.  apply IH2.
Qed.






Theorem app_length : forall (X : Type) (lst1 lst2 : list X),
    length (lst1 ++ lst2) = (length lst1) + (length lst2).
Proof.
  intros; induction lst1;
    [reflexivity | simpl; rewrite IHlst1; reflexivity].
Qed.





Lemma length_append_equal_plus_0 : forall X : Type, forall x : X, forall lst1' lst2 : list X, forall IHlst1' : length (lst1' ++ lst2) =
length lst1' + length lst2, S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).

Proof.
(* We will proceed by induction on the list lst1'.
*)
  intros X x lst1' lst2 IHlst1'.
(* We will need to use the app_length theorem.
*)
  apply app_length.
(* We will also need to use the IHlst1' hypothesis.
*)
  rewrite IHlst1'.
(* Now we just need to prove that S (length lst1' + length lst2) = S (S (length lst1' + length lst2)).
*)
  reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #300)
Error in step "apply app_length.".
Message: In environment
X : Type
x : X
lst1', lst2 : list X
IHlst1' : length (lst1' ++ lst2) =
          length lst1' + length lst2
Unable to unify
 "length (?M1379 ++ ?M1380) =
  length ?M1379 + length ?M1380"
with
 "S (length (lst1' ++ lst2)) =
  S (length lst1' + length lst2)"..
Goal: S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).


TRYING TO PROVE LEMMA
Lemma length_append_equal_plus_1 : forall X : Type, forall x : X, forall lst1' lst2 : list X, forall IHlst1' : length (lst1' ++ lst2) =
length lst1' + length lst2, S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.










Lemma simple_semi : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  destruct n eqn:E.
    
    -  simpl. reflexivity.
    -  simpl. reflexivity.
Qed.



Lemma simple_semi' : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  
  destruct n;
  
  simpl;
  
  reflexivity.
Qed.



Lemma simple_semi'' : forall n, (n + 1 =? 0) = false.
Proof.
  destruct n; reflexivity.
Qed.





Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof. destruct b; destruct c; try reflexivity; try discriminate. Qed.

Theorem add_assoc : forall n m p : nat,
    n + (m + p) = (n + m) + p.
Proof. intros n m p; induction n as [| n' IHn']; try (simpl; rewrite IHn'); reflexivity. Qed.

Fixpoint nonzeros (lst : list nat) :=
  match lst with
  | [] => []
  | 0 :: t => nonzeros t
  | h :: t => h :: nonzeros t
  end.

Lemma nonzeros_app : forall lst1 lst2 : list nat,
  nonzeros (lst1 ++ lst2) = (nonzeros lst1) ++ (nonzeros lst2).
Proof. intros lst1 lst2; induction lst1 as [|h t IH]; try (destruct h; simpl; rewrite <- IH); reflexivity. Qed.





Lemma re_opt_e_match' : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2];
    
    simpl.
  -  apply MEmpty.
  -  apply MChar.
  - 
    destruct re1;
    
    try (apply MApp; try apply IH1; apply IH2).
    
    inversion Hmatch1. simpl. apply IH2.
  -  apply MUnionL. apply IH.
  -  apply MUnionR. apply IH.
  -  apply MStar0.
  -   apply MStarApp. apply IH1.  apply IH2.
Qed.






Theorem app_length : forall (X : Type) (lst1 lst2 : list X),
    length (lst1 ++ lst2) = (length lst1) + (length lst2).
Proof.
  intros; induction lst1;
    [reflexivity | simpl; rewrite IHlst1; reflexivity].
Qed.





Lemma length_append_equal_plus_1 : forall X : Type, forall x : X, forall lst1' lst2 : list X, forall IHlst1' : length (lst1' ++ lst2) =
length lst1' + length lst2, S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).

Proof.
(* We will proceed by induction on the length of lst1'.
*)
  intros X x lst1' lst2 IHlst1'.
(* We will need the app_length theorem, which states that the length of the concatenation of two lists is the sum of their lengths.
*)
  apply app_length.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #300)
Error in step "apply app_length.".
Message: In environment
X : Type
x : X
lst1', lst2 : list X
IHlst1' : length (lst1' ++ lst2) =
          length lst1' + length lst2
Unable to unify
 "length (?M1379 ++ ?M1380) =
  length ?M1379 + length ?M1380"
with
 "S (length (lst1' ++ lst2)) =
  S (length lst1' + length lst2)"..
Goal: S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).


TRYING TO PROVE LEMMA
Lemma length_append_equal_plus_2 : forall X : Type, forall x : X, forall lst1' lst2 : list X, forall IHlst1' : length (lst1' ++ lst2) =
length lst1' + length lst2, S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.










Lemma simple_semi : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  destruct n eqn:E.
    
    -  simpl. reflexivity.
    -  simpl. reflexivity.
Qed.



Lemma simple_semi' : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  
  destruct n;
  
  simpl;
  
  reflexivity.
Qed.



Lemma simple_semi'' : forall n, (n + 1 =? 0) = false.
Proof.
  destruct n; reflexivity.
Qed.





Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof. destruct b; destruct c; try reflexivity; try discriminate. Qed.

Theorem add_assoc : forall n m p : nat,
    n + (m + p) = (n + m) + p.
Proof. intros n m p; induction n as [| n' IHn']; try (simpl; rewrite IHn'); reflexivity. Qed.

Fixpoint nonzeros (lst : list nat) :=
  match lst with
  | [] => []
  | 0 :: t => nonzeros t
  | h :: t => h :: nonzeros t
  end.

Lemma nonzeros_app : forall lst1 lst2 : list nat,
  nonzeros (lst1 ++ lst2) = (nonzeros lst1) ++ (nonzeros lst2).
Proof. intros lst1 lst2; induction lst1 as [|h t IH]; try (destruct h; simpl; rewrite <- IH); reflexivity. Qed.





Lemma re_opt_e_match' : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2];
    
    simpl.
  -  apply MEmpty.
  -  apply MChar.
  - 
    destruct re1;
    
    try (apply MApp; try apply IH1; apply IH2).
    
    inversion Hmatch1. simpl. apply IH2.
  -  apply MUnionL. apply IH.
  -  apply MUnionR. apply IH.
  -  apply MStar0.
  -   apply MStarApp. apply IH1.  apply IH2.
Qed.






Theorem app_length : forall (X : Type) (lst1 lst2 : list X),
    length (lst1 ++ lst2) = (length lst1) + (length lst2).
Proof.
  intros; induction lst1;
    [reflexivity | simpl; rewrite IHlst1; reflexivity].
Qed.





Lemma length_append_equal_plus_2 : forall X : Type, forall x : X, forall lst1' lst2 : list X, forall IHlst1' : length (lst1' ++ lst2) =
length lst1' + length lst2, S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).

Proof.
(* We will proceed by induction on the length of lst1'.
*)
  intros X x lst1' lst2 IHlst1'.
(* We will need the app_length theorem, which states that the length of the concatenation of two lists is the sum of their lengths.
*)
  apply app_length.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #300)
Error in step "apply app_length.".
Message: In environment
X : Type
x : X
lst1', lst2 : list X
IHlst1' : length (lst1' ++ lst2) =
          length lst1' + length lst2
Unable to unify
 "length (?M1379 ++ ?M1380) =
  length ?M1379 + length ?M1380"
with
 "S (length (lst1' ++ lst2)) =
  S (length lst1' + length lst2)"..
Goal: S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).


TRYING TO PROVE LEMMA
Lemma length_append_equal_plus_3 : forall X : Type, forall x : X, forall lst1' lst2 : list X, forall IHlst1' : length (lst1' ++ lst2) =
length lst1' + length lst2, S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.










Lemma simple_semi : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  destruct n eqn:E.
    
    -  simpl. reflexivity.
    -  simpl. reflexivity.
Qed.



Lemma simple_semi' : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  
  destruct n;
  
  simpl;
  
  reflexivity.
Qed.



Lemma simple_semi'' : forall n, (n + 1 =? 0) = false.
Proof.
  destruct n; reflexivity.
Qed.





Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof. destruct b; destruct c; try reflexivity; try discriminate. Qed.

Theorem add_assoc : forall n m p : nat,
    n + (m + p) = (n + m) + p.
Proof. intros n m p; induction n as [| n' IHn']; try (simpl; rewrite IHn'); reflexivity. Qed.

Fixpoint nonzeros (lst : list nat) :=
  match lst with
  | [] => []
  | 0 :: t => nonzeros t
  | h :: t => h :: nonzeros t
  end.

Lemma nonzeros_app : forall lst1 lst2 : list nat,
  nonzeros (lst1 ++ lst2) = (nonzeros lst1) ++ (nonzeros lst2).
Proof. intros lst1 lst2; induction lst1 as [|h t IH]; try (destruct h; simpl; rewrite <- IH); reflexivity. Qed.





Lemma re_opt_e_match' : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2];
    
    simpl.
  -  apply MEmpty.
  -  apply MChar.
  - 
    destruct re1;
    
    try (apply MApp; try apply IH1; apply IH2).
    
    inversion Hmatch1. simpl. apply IH2.
  -  apply MUnionL. apply IH.
  -  apply MUnionR. apply IH.
  -  apply MStar0.
  -   apply MStarApp. apply IH1.  apply IH2.
Qed.






Theorem app_length : forall (X : Type) (lst1 lst2 : list X),
    length (lst1 ++ lst2) = (length lst1) + (length lst2).
Proof.
  intros; induction lst1;
    [reflexivity | simpl; rewrite IHlst1; reflexivity].
Qed.





Lemma length_append_equal_plus_3 : forall X : Type, forall x : X, forall lst1' lst2 : list X, forall IHlst1' : length (lst1' ++ lst2) =
length lst1' + length lst2, S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).

Proof.
(* We will proceed by induction on the length of lst1'.
*)
  intros X x lst1' lst2 IHlst1'.
(* We will need the app_length theorem, which states that the length of the concatenation of two lists is the sum of their lengths.
*)
  apply app_length.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #300)
Error in step "apply app_length.".
Message: In environment
X : Type
x : X
lst1', lst2 : list X
IHlst1' : length (lst1' ++ lst2) =
          length lst1' + length lst2
Unable to unify
 "length (?M1379 ++ ?M1380) =
  length ?M1379 + length ?M1380"
with
 "S (length (lst1' ++ lst2)) =
  S (length lst1' + length lst2)"..
Goal: S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).


TRYING TO PROVE LEMMA
Lemma length_append_equal_plus_4 : forall X : Type, forall x : X, forall lst1' lst2 : list X, forall IHlst1' : length (lst1' ++ lst2) =
length lst1' + length lst2, S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.










Lemma simple_semi : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  destruct n eqn:E.
    
    -  simpl. reflexivity.
    -  simpl. reflexivity.
Qed.



Lemma simple_semi' : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  
  destruct n;
  
  simpl;
  
  reflexivity.
Qed.



Lemma simple_semi'' : forall n, (n + 1 =? 0) = false.
Proof.
  destruct n; reflexivity.
Qed.





Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof. destruct b; destruct c; try reflexivity; try discriminate. Qed.

Theorem add_assoc : forall n m p : nat,
    n + (m + p) = (n + m) + p.
Proof. intros n m p; induction n as [| n' IHn']; try (simpl; rewrite IHn'); reflexivity. Qed.

Fixpoint nonzeros (lst : list nat) :=
  match lst with
  | [] => []
  | 0 :: t => nonzeros t
  | h :: t => h :: nonzeros t
  end.

Lemma nonzeros_app : forall lst1 lst2 : list nat,
  nonzeros (lst1 ++ lst2) = (nonzeros lst1) ++ (nonzeros lst2).
Proof. intros lst1 lst2; induction lst1 as [|h t IH]; try (destruct h; simpl; rewrite <- IH); reflexivity. Qed.





Lemma re_opt_e_match' : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2];
    
    simpl.
  -  apply MEmpty.
  -  apply MChar.
  - 
    destruct re1;
    
    try (apply MApp; try apply IH1; apply IH2).
    
    inversion Hmatch1. simpl. apply IH2.
  -  apply MUnionL. apply IH.
  -  apply MUnionR. apply IH.
  -  apply MStar0.
  -   apply MStarApp. apply IH1.  apply IH2.
Qed.






Theorem app_length : forall (X : Type) (lst1 lst2 : list X),
    length (lst1 ++ lst2) = (length lst1) + (length lst2).
Proof.
  intros; induction lst1;
    [reflexivity | simpl; rewrite IHlst1; reflexivity].
Qed.





Lemma length_append_equal_plus_4 : forall X : Type, forall x : X, forall lst1' lst2 : list X, forall IHlst1' : length (lst1' ++ lst2) =
length lst1' + length lst2, S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).

Proof.
(* We will proceed by induction on the length of lst1'.
*)
  intros X x lst1' lst2 IHlst1'.
(* We will need the app_length theorem, which states that the length of the concatenation of two lists is the sum of their lengths.
*)
  apply app_length.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is associative.
*)
  apply add_assoc.
(* We will also need the add_assoc theorem, which states that addition is
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #300)
Error in step "apply app_length.".
Message: In environment
X : Type
x : X
lst1', lst2 : list X
IHlst1' : length (lst1' ++ lst2) =
          length lst1' + length lst2
Unable to unify
 "length (?M1379 ++ ?M1380) =
  length ?M1379 + length ?M1380"
with
 "S (length (lst1' ++ lst2)) =
  S (length lst1' + length lst2)"..
Goal: S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).


TRYING TO PROVE LEMMA
Lemma length_append_equal_plus_5 : forall X : Type, forall x : X, forall lst1' lst2 : list X, forall IHlst1' : length (lst1' ++ lst2) =
length lst1' + length lst2, S (length (lst1' ++ lst2)) =
S (length lst1' + length lst2).


Error proving app_length'
MAX LEMMA DEPTH REACHED. GIVING UP.