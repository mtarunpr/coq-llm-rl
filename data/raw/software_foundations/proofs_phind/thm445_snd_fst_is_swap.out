PROVING snd_fst_is_swap
ATTEMPTED THEOREM PROOF (LEMMAS USED: 0)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.






Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.

Proof.
(*
    We will proceed by induction on p.
The base case will be when p is (pair n m).
In this case, we will show that (m, n) = swap_pair (pair n m).
The inductive case will be when p is (pair n m) for some n, m.
In this case, we will show that (snd p, fst p) = swap_pair p.
*)
  intros p.
induction p as [| n m p' IHp'].
- (* Base case: p = pair n m *)
    simpl.
reflexivity.
- (* Inductive case: p = pair n m *)
    simpl.
rewrite IHp'.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN THEOREM PROOF (FRAGMENT #66)
Error in step "induction p as [| n m p' IHp'].".
Message: Expects a disjunctive pattern with 1 branch or a
conjunctive pattern made of 2 patterns..
Goal: (snd p, fst p) = swap_pair p.


TRYING TO PROVE LEMMA
Lemma lemma_swap_pair_inverse_0 : forall p : natprod, (snd p, fst p) = swap_pair p.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.






Lemma lemma_swap_pair_inverse_0 : forall p : natprod, (snd p, fst p) = swap_pair p.

Proof.
(* We will proceed by induction on p.
*)
  intros p.
(* We will then destruct p into its components.
*)
  destruct p as [(n, m)].
(* Now we can rewrite the goal using the definitions of swap_pair and fst and snd.
*)
  rewrite <- (swap_pair_def (n, m)).
(* We can now rewrite the goal using the definitions of fst and snd.
*)
  rewrite fst_def, snd_def.
(* The goal is now (m, n) = (n, m) which is obviously true.
*)
  reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #66)
Error in step "destruct p as [(n, m)].".
Message: Expects a disjunctive pattern with 2 branches..
Goal: (snd p, fst p) = swap_pair p.


TRYING TO PROVE LEMMA
Lemma lemma_swap_pair_inverse_1 : forall p : natprod, (snd p, fst p) = swap_pair p.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.






Lemma lemma_swap_pair_inverse_1 : forall p : natprod, (snd p, fst p) = swap_pair p.

Proof.
(* The lemma states that for any pair p, the pair of the second and first
     elements of p is equal to the result of swapping p.
We will proceed by
     induction on p.
*)
  intros p.
(* We first need to rewrite p in terms of the constructors of the
     inductive type natprod.
*)
  induction p as [ | p1 p2].
(* The base case is when p is of the form pair n1 n2.
In this case, we
     need to show that (n2, n1) = swap_pair (pair n1 n2).
*)
  - simpl.
reflexivity.
(* The inductive case is when p is of the form (n1, n2).
In this case, we
     need to show that (n2, n1) = swap_pair (n1, n2).
*)
  - simpl.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #66)
Error in step "induction p as [ | p1 p2].".
Message: Expects a disjunctive pattern with 1 branch or a
conjunctive pattern made of 2 patterns..
Goal: (snd p, fst p) = swap_pair p.


TRYING TO PROVE LEMMA
Lemma lemma_swap_pair_inverse_2 : forall p : natprod, (snd p, fst p) = swap_pair p.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.






Lemma lemma_swap_pair_inverse_2 : forall p : natprod, (snd p, fst p) = swap_pair p.

Proof.
intros p.
unfold swap_pair.
unfold fst, snd.
destruct p as [n m].
simpl.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.






Lemma lemma_swap_pair_inverse_2 : forall p : natprod, (snd p, fst p) = swap_pair p.

Proof.
intros p.
unfold swap_pair.
unfold fst, snd.
destruct p as [n m].
simpl.
reflexivity.
Qed.

Lemma lemma_swap_pair_inverse_1 : forall p : natprod, (snd p, fst p) = swap_pair p.

Proof.
(* The lemma states that for any pair p, the pair of the second and first
     elements of p is equal to the result of swapping p.
We will proceed by
     induction on p.
*)
  intros p.
(* We first need to rewrite p in terms of the constructors of the
     inductive type natprod.
*)
  apply (@lemma_swap_pair_inverse_2 p).
- simpl.
reflexivity.
(* The inductive case is when p is of the form (n1, n2).
In this case, we
     need to show that (n2, n1) = swap_pair (n1, n2).
*)
  - simpl.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.






Lemma lemma_swap_pair_inverse_2 : forall p : natprod, (snd p, fst p) = swap_pair p.

Proof.
intros p.
unfold swap_pair.
unfold fst, snd.
destruct p as [n m].
simpl.
reflexivity.
Qed.

Lemma lemma_swap_pair_inverse_1 : forall p : natprod, (snd p, fst p) = swap_pair p.




Proof.
(* The lemma states that for any pair p, the pair of the second and first
     elements of p is equal to the result of swapping p.
We will proceed by
     induction on p.
*)
  
intros p.
(* We first need to rewrite p in terms of the constructors of the
     inductive type natprod.
*)
  
apply (@lemma_swap_pair_inverse_2 p).
Qed.

Lemma lemma_swap_pair_inverse_0 : forall p : natprod, (snd p, fst p) = swap_pair p.

Proof.
(* We will proceed by induction on p.
*)
  intros p.
(* We will then destruct p into its components.
*)
  apply (@lemma_swap_pair_inverse_1 p).
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED THEOREM PROOF (LEMMAS USED: 1)


From LF Require Export Induction.
Module NatList.






Inductive natprod : Type :=
  | pair (n1 n2 : nat).



Check (pair 3 5) : natprod.



Definition fst (p : natprod) : nat :=
  match p with
  | pair x y => x
  end.

Definition snd (p : natprod) : nat :=
  match p with
  | pair x y => y
  end.

Compute (fst (pair 3 5)).




Notation "( x , y )" := (pair x y).



Compute (fst (3,5)).

Definition fst' (p : natprod) : nat :=
  match p with
  | (x,y) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with
  | (x,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (x,y) => (y,x)
  end.





Theorem surjective_pairing' : forall (n m : nat),
  (n,m) = (fst (n,m), snd (n,m)).
Proof.
  reflexivity. Qed.



Theorem surjective_pairing_stuck : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  simpl. 
Abort.



Theorem surjective_pairing : forall (p : natprod),
  p = (fst p, snd p).
Proof.
  intros p. destruct p as [n m]. simpl. reflexivity. Qed.






Lemma lemma_swap_pair_inverse_2 : forall p : natprod, (snd p, fst p) = swap_pair p.

Proof.
intros p.
unfold swap_pair.
unfold fst, snd.
destruct p as [n m].
simpl.
reflexivity.
Qed.

Lemma lemma_swap_pair_inverse_1 : forall p : natprod, (snd p, fst p) = swap_pair p.




Proof.
(* The lemma states that for any pair p, the pair of the second and first
     elements of p is equal to the result of swapping p.
We will proceed by
     induction on p.
*)
  
intros p.
(* We first need to rewrite p in terms of the constructors of the
     inductive type natprod.
*)
  
apply (@lemma_swap_pair_inverse_2 p).
Qed.

Lemma lemma_swap_pair_inverse_0 : forall p : natprod, (snd p, fst p) = swap_pair p.

Proof.
(* We will proceed by induction on p.
*)
  intros p.
(* We will then destruct p into its components.
*)
  apply (@lemma_swap_pair_inverse_1 p).
Qed.

Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.

Proof.
(*
    We will proceed by induction on p.
The base case will be when p is (pair n m).
In this case, we will show that (m, n) = swap_pair (pair n m).
The inductive case will be when p is (pair n m) for some n, m.
In this case, we will show that (snd p, fst p) = swap_pair p.
*)
  intros p.
apply (@lemma_swap_pair_inverse_0 p).
- (* Base case: p = pair n m *)
    simpl.
reflexivity.
- (* Inductive case: p = pair n m *)
    simpl.
rewrite IHp'.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
Outdated contents in ..cache: recomputing
THEOREM PROOF IS VALID

