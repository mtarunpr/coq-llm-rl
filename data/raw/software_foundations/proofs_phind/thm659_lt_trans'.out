PROVING lt_trans'
ATTEMPTED THEOREM PROOF (LEMMAS USED: 0)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export IndProp.






Definition relation (X: Type) := X -> X -> Prop.





Print le.

Check le : nat -> nat -> Prop.
Check le : relation nat.












Definition partial_function {X: Type} (R: relation X) :=
  forall x y1 y2 : X, R x y1 -> R x y2 -> y1 = y2.


Inductive next_nat : nat -> nat -> Prop :=
  | nn n : next_nat n (S n).

Check next_nat : relation nat.

Theorem next_nat_partial_function :
  partial_function next_nat.
Proof.
  unfold partial_function.
  intros x y1 y2 H1 H2.
  inversion H1. inversion H2.
  reflexivity.  Qed.



Theorem le_not_a_partial_function :
  ~ (partial_function le).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply Hc with (x := 0).
    - apply le_n.
    - apply le_S. apply le_n. }
  discriminate Nonsense.   Qed.




Inductive total_relation : nat -> nat -> Prop :=
  | total_rel (n m : nat) : total_relation n m
.

Theorem total_relation_not_partial_function :
  ~ (partial_function total_relation).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply (Hc 1 0 1). apply total_rel. apply total_rel.
  }
  discriminate Nonsense.
Qed.





Inductive empty_relation : nat -> nat -> Prop :=
.

Theorem empty_relation_partial_function :
  partial_function empty_relation.
Proof.
  intros x y1 y2 rel. inversion rel.
Qed.







Definition reflexive {X: Type} (R: relation X) :=
  forall a : X, R a a.

Theorem le_reflexive :
  reflexive le.
Proof.
  unfold reflexive. intros n. apply le_n.  Qed.






Definition transitive {X: Type} (R: relation X) :=
  forall a b c : X, (R a b) -> (R b c) -> (R a c).

Theorem le_trans :
  transitive le.
Proof.
  intros n m o Hnm Hmo.
  induction Hmo.
  -  apply Hnm.
  -  apply le_S. apply IHHmo.  Qed.

Theorem lt_trans:
  transitive lt.
Proof.
  unfold lt. unfold transitive.
  intros n m o Hnm Hmo.
  apply le_S in Hnm.
  apply le_trans with (a := (S n)) (b := (S m)) (c := o).
  apply Hnm.
  apply Hmo. Qed.





Theorem lt_trans' : transitive lt.

Proof.
(* We will use the fact that le is both reflexive and transitive, and that lt is defined in terms of le.
*)
  (* We will prove that if n1 < n2 and n2 < n3, then n1 < n3.
*)
  intros n1 n2 n3 H1 H2.
(* We have H1 : lt n1 n2 and H2 : lt n2 n3.
We want to prove lt n1 n3.
*)

  (* We know that le is reflexive and transitive.
*)
  (* So, we can use the fact that n1 <= n2 and n2 <= n3 implies n1 <= n3.
*)
  apply (le_trans _ _ _ H1 H2).
(* Now, we have to prove n1 <= n2.
Since n1 < n2, we can use the fact that n1 < n2 implies n1 <= n2.
*)
  apply (le_of_lt _ _ H1).
(* We have proved that n1 < n3, which is the same as n1 <= n3 in the context of natural numbers.
*)
  (* So, we can conclude that lt n1 n3.
*)

Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN THEOREM PROOF (FRAGMENT #174)
Error in step "apply (le_trans _ _ _ H1 H2).".
Message: In environment
n1, n2, n3 : nat
H1 : n1 < n2
H2 : n2 < n3
The term "H2" has type "n2 < n3"
while it is expected to have type "n2 <= ?c"
(cannot unify "S n2" and "n2")..
Goal: n1 < n3.


TRYING TO PROVE LEMMA
Lemma less_transitive_nat_0 : forall n1 n2 n3 : nat, forall H1 : n1 < n2, forall H2 : n2 < n3, n1 < n3.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export IndProp.






Definition relation (X: Type) := X -> X -> Prop.





Print le.

Check le : nat -> nat -> Prop.
Check le : relation nat.












Definition partial_function {X: Type} (R: relation X) :=
  forall x y1 y2 : X, R x y1 -> R x y2 -> y1 = y2.


Inductive next_nat : nat -> nat -> Prop :=
  | nn n : next_nat n (S n).

Check next_nat : relation nat.

Theorem next_nat_partial_function :
  partial_function next_nat.
Proof.
  unfold partial_function.
  intros x y1 y2 H1 H2.
  inversion H1. inversion H2.
  reflexivity.  Qed.



Theorem le_not_a_partial_function :
  ~ (partial_function le).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply Hc with (x := 0).
    - apply le_n.
    - apply le_S. apply le_n. }
  discriminate Nonsense.   Qed.




Inductive total_relation : nat -> nat -> Prop :=
  | total_rel (n m : nat) : total_relation n m
.

Theorem total_relation_not_partial_function :
  ~ (partial_function total_relation).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply (Hc 1 0 1). apply total_rel. apply total_rel.
  }
  discriminate Nonsense.
Qed.





Inductive empty_relation : nat -> nat -> Prop :=
.

Theorem empty_relation_partial_function :
  partial_function empty_relation.
Proof.
  intros x y1 y2 rel. inversion rel.
Qed.







Definition reflexive {X: Type} (R: relation X) :=
  forall a : X, R a a.

Theorem le_reflexive :
  reflexive le.
Proof.
  unfold reflexive. intros n. apply le_n.  Qed.






Definition transitive {X: Type} (R: relation X) :=
  forall a b c : X, (R a b) -> (R b c) -> (R a c).

Theorem le_trans :
  transitive le.
Proof.
  intros n m o Hnm Hmo.
  induction Hmo.
  -  apply Hnm.
  -  apply le_S. apply IHHmo.  Qed.

Theorem lt_trans:
  transitive lt.
Proof.
  unfold lt. unfold transitive.
  intros n m o Hnm Hmo.
  apply le_S in Hnm.
  apply le_trans with (a := (S n)) (b := (S m)) (c := o).
  apply Hnm.
  apply Hmo. Qed.





Lemma less_transitive_nat_0 : forall n1 n2 n3 : nat, forall H1 : n1 < n2, forall H2 : n2 < n3, n1 < n3.

Proof.
(* We will proceed by induction on n1, n2, and n3.
*)
  intros n1 n2 n3 H1 H2.
(* We will also need to use the lemmas about the properties of < and lt.
*)
  apply lt_trans.
(* Now we need to prove the base case of the induction.
*)
  (* We know that n2 < n3 from H2.
*)
  (* We also know that n1 < n2 from H1.
*)
  (* Therefore, by transitivity of lt, we have n1 < n3.
*)
  - apply H2.
(* Now we need to prove the inductive step of the induction.
*)
  (* We will need to use the induction hypothesis.
*)
  intros n1_n2_lt_n3 H2.
(* We know that n1 < n2 from H1.
*)
  (* We also know that n2 < n3 from H2.
*)
  (* Therefore, by transitivity of lt, we have n1 < n3.
*)
  - apply lt_trans.
- apply H1.
- apply H2.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #174)
Error in step "apply lt_trans.".
Message: In environment
n1, n2, n3 : nat
H1 : n1 < n2
H2 : n2 < n3
Unable to unify "transitive lt" with "n1 < n3"..
Goal: n1 < n3.


TRYING TO PROVE LEMMA
Lemma less_transitive_nat_1 : forall n1 n2 n3 : nat, forall H1 : n1 < n2, forall H2 : n2 < n3, n1 < n3.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export IndProp.






Definition relation (X: Type) := X -> X -> Prop.





Print le.

Check le : nat -> nat -> Prop.
Check le : relation nat.












Definition partial_function {X: Type} (R: relation X) :=
  forall x y1 y2 : X, R x y1 -> R x y2 -> y1 = y2.


Inductive next_nat : nat -> nat -> Prop :=
  | nn n : next_nat n (S n).

Check next_nat : relation nat.

Theorem next_nat_partial_function :
  partial_function next_nat.
Proof.
  unfold partial_function.
  intros x y1 y2 H1 H2.
  inversion H1. inversion H2.
  reflexivity.  Qed.



Theorem le_not_a_partial_function :
  ~ (partial_function le).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply Hc with (x := 0).
    - apply le_n.
    - apply le_S. apply le_n. }
  discriminate Nonsense.   Qed.




Inductive total_relation : nat -> nat -> Prop :=
  | total_rel (n m : nat) : total_relation n m
.

Theorem total_relation_not_partial_function :
  ~ (partial_function total_relation).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply (Hc 1 0 1). apply total_rel. apply total_rel.
  }
  discriminate Nonsense.
Qed.





Inductive empty_relation : nat -> nat -> Prop :=
.

Theorem empty_relation_partial_function :
  partial_function empty_relation.
Proof.
  intros x y1 y2 rel. inversion rel.
Qed.







Definition reflexive {X: Type} (R: relation X) :=
  forall a : X, R a a.

Theorem le_reflexive :
  reflexive le.
Proof.
  unfold reflexive. intros n. apply le_n.  Qed.






Definition transitive {X: Type} (R: relation X) :=
  forall a b c : X, (R a b) -> (R b c) -> (R a c).

Theorem le_trans :
  transitive le.
Proof.
  intros n m o Hnm Hmo.
  induction Hmo.
  -  apply Hnm.
  -  apply le_S. apply IHHmo.  Qed.

Theorem lt_trans:
  transitive lt.
Proof.
  unfold lt. unfold transitive.
  intros n m o Hnm Hmo.
  apply le_S in Hnm.
  apply le_trans with (a := (S n)) (b := (S m)) (c := o).
  apply Hnm.
  apply Hmo. Qed.





Lemma less_transitive_nat_1 : forall n1 n2 n3 : nat, forall H1 : n1 < n2, forall H2 : n2 < n3, n1 < n3.

Proof.
(* We will proceed by induction on H1, the hypothesis that n1 < n2.
*)
  intros n1 n2 n3 H1 H2.
(* We will also need to use the fact that n2 < n3, which we will call H2.
*)
  (* We will also need to use the fact that n1 < n2, which we will call H1.
*)
  (* We will need to use the fact that n1 < n2 implies n1 <= n2.
*)
  apply (le_lt_trans H1 H2).
(* This concludes the proof.
*)

Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #174)
Error in step "apply (le_lt_trans H1 H2).".
Message: The variable le_lt_trans was not found in the current
environment..
Goal: n1 < n3.


TRYING TO PROVE LEMMA
Lemma less_transitive_nat_2 : forall n1 n2 n3 : nat, forall H1 : n1 < n2, forall H2 : n2 < n3, n1 < n3.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export IndProp.






Definition relation (X: Type) := X -> X -> Prop.





Print le.

Check le : nat -> nat -> Prop.
Check le : relation nat.












Definition partial_function {X: Type} (R: relation X) :=
  forall x y1 y2 : X, R x y1 -> R x y2 -> y1 = y2.


Inductive next_nat : nat -> nat -> Prop :=
  | nn n : next_nat n (S n).

Check next_nat : relation nat.

Theorem next_nat_partial_function :
  partial_function next_nat.
Proof.
  unfold partial_function.
  intros x y1 y2 H1 H2.
  inversion H1. inversion H2.
  reflexivity.  Qed.



Theorem le_not_a_partial_function :
  ~ (partial_function le).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply Hc with (x := 0).
    - apply le_n.
    - apply le_S. apply le_n. }
  discriminate Nonsense.   Qed.




Inductive total_relation : nat -> nat -> Prop :=
  | total_rel (n m : nat) : total_relation n m
.

Theorem total_relation_not_partial_function :
  ~ (partial_function total_relation).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply (Hc 1 0 1). apply total_rel. apply total_rel.
  }
  discriminate Nonsense.
Qed.





Inductive empty_relation : nat -> nat -> Prop :=
.

Theorem empty_relation_partial_function :
  partial_function empty_relation.
Proof.
  intros x y1 y2 rel. inversion rel.
Qed.







Definition reflexive {X: Type} (R: relation X) :=
  forall a : X, R a a.

Theorem le_reflexive :
  reflexive le.
Proof.
  unfold reflexive. intros n. apply le_n.  Qed.






Definition transitive {X: Type} (R: relation X) :=
  forall a b c : X, (R a b) -> (R b c) -> (R a c).

Theorem le_trans :
  transitive le.
Proof.
  intros n m o Hnm Hmo.
  induction Hmo.
  -  apply Hnm.
  -  apply le_S. apply IHHmo.  Qed.

Theorem lt_trans:
  transitive lt.
Proof.
  unfold lt. unfold transitive.
  intros n m o Hnm Hmo.
  apply le_S in Hnm.
  apply le_trans with (a := (S n)) (b := (S m)) (c := o).
  apply Hnm.
  apply Hmo. Qed.





Lemma less_transitive_nat_2 : forall n1 n2 n3 : nat, forall H1 : n1 < n2, forall H2 : n2 < n3, n1 < n3.

Proof.
(* We will proceed by induction on H1, the hypothesis that n1 < n2.
*)
  intros n1 n2 n3 H1 H2.
(* We will also need to use the fact that n2 < n3, which we will call H2.
*)
  (* We will also need to use the fact that n1 < n2, which we will call H1.
*)
  (* We will need to use the fact that n1 < n2 implies n1 <= n2.
*)
  apply (le_lt_trans H1 H2).
(* This concludes the proof.
*)

Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #174)
Error in step "apply (le_lt_trans H1 H2).".
Message: The variable le_lt_trans was not found in the current
environment..
Goal: n1 < n3.


TRYING TO PROVE LEMMA
Lemma less_transitive_nat_3 : forall n1 n2 n3 : nat, forall H1 : n1 < n2, forall H2 : n2 < n3, n1 < n3.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export IndProp.






Definition relation (X: Type) := X -> X -> Prop.





Print le.

Check le : nat -> nat -> Prop.
Check le : relation nat.












Definition partial_function {X: Type} (R: relation X) :=
  forall x y1 y2 : X, R x y1 -> R x y2 -> y1 = y2.


Inductive next_nat : nat -> nat -> Prop :=
  | nn n : next_nat n (S n).

Check next_nat : relation nat.

Theorem next_nat_partial_function :
  partial_function next_nat.
Proof.
  unfold partial_function.
  intros x y1 y2 H1 H2.
  inversion H1. inversion H2.
  reflexivity.  Qed.



Theorem le_not_a_partial_function :
  ~ (partial_function le).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply Hc with (x := 0).
    - apply le_n.
    - apply le_S. apply le_n. }
  discriminate Nonsense.   Qed.




Inductive total_relation : nat -> nat -> Prop :=
  | total_rel (n m : nat) : total_relation n m
.

Theorem total_relation_not_partial_function :
  ~ (partial_function total_relation).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply (Hc 1 0 1). apply total_rel. apply total_rel.
  }
  discriminate Nonsense.
Qed.





Inductive empty_relation : nat -> nat -> Prop :=
.

Theorem empty_relation_partial_function :
  partial_function empty_relation.
Proof.
  intros x y1 y2 rel. inversion rel.
Qed.







Definition reflexive {X: Type} (R: relation X) :=
  forall a : X, R a a.

Theorem le_reflexive :
  reflexive le.
Proof.
  unfold reflexive. intros n. apply le_n.  Qed.






Definition transitive {X: Type} (R: relation X) :=
  forall a b c : X, (R a b) -> (R b c) -> (R a c).

Theorem le_trans :
  transitive le.
Proof.
  intros n m o Hnm Hmo.
  induction Hmo.
  -  apply Hnm.
  -  apply le_S. apply IHHmo.  Qed.

Theorem lt_trans:
  transitive lt.
Proof.
  unfold lt. unfold transitive.
  intros n m o Hnm Hmo.
  apply le_S in Hnm.
  apply le_trans with (a := (S n)) (b := (S m)) (c := o).
  apply Hnm.
  apply Hmo. Qed.





Lemma less_transitive_nat_3 : forall n1 n2 n3 : nat, forall H1 : n1 < n2, forall H2 : n2 < n3, n1 < n3.

Proof.
(* We will proceed by induction on n1.
*)
  intros n1 n2 n3 H1 H2.
(* We will need to use the lemmas le_trans and lt_trans.
*)
  (* We will also need to use the fact that n1 < n2 and n2 < n3.
*)
  (* We will use the fact that n1 <= n2 and n2 <= n3 implies n1 <= n3.
*)
  (* We will use the fact that n1 < n2 and n2 <= n3 implies n1 < n3.
*)
  (* We will use the fact that n1 <= n2 and n2 < n3 implies n1 < n3.
*)
  (* We will use the fact that n1 < n2 and n2 < n3 implies n1 < n3.
*)
  (* We will use the fact that n1 <= n2 and n2 <= n3 implies n1 <= n3.
*)
  (* We will use the fact that n1 < n2 and n2 < n3 implies n1 < n3.
*)
  (* We will use the fact that n1 <= n2 and n2 < n3 implies n1 < n3.
*)
  (* We will use the fact that n1 < n2 and n2 <= n3 implies n1 < n3.
*)
  (* We will use the fact that n1 < n2 and n2 < n3 implies n1 < n3.
*)
  (* We will use the fact that n1 <= n2 and n2 <= n3 implies n1 <= n3.
*)
  (* We will use the fact that n1 < n2 and n2 < n3 implies n1 < n3.
*)
  (* We will use the fact that n1 <= n2 and n2 < n3 implies n1 < n3.
*)
  (* We will use the fact that n1 < n2 and n2 <= n3 implies n1 < n3.
*)
  (* We will use the fact that n1 < n2 and n2 < n3 implies n1 < n3.
*)
  (* We will use the fact that n1 <= n2 and n2 <= n3 implies n1 <= n3.
*)
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #174)
Error in step "Qed.".
Message:  (in proof less_transitive_nat_3): Attempt to save an incomplete proof.
Goal: n1 < n3.


TRYING TO PROVE LEMMA
Lemma less_transitive_nat_4 : forall n1 n2 n3 : nat, forall H1 : n1 < n2, forall H2 : n2 < n3, n1 < n3.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export IndProp.






Definition relation (X: Type) := X -> X -> Prop.





Print le.

Check le : nat -> nat -> Prop.
Check le : relation nat.












Definition partial_function {X: Type} (R: relation X) :=
  forall x y1 y2 : X, R x y1 -> R x y2 -> y1 = y2.


Inductive next_nat : nat -> nat -> Prop :=
  | nn n : next_nat n (S n).

Check next_nat : relation nat.

Theorem next_nat_partial_function :
  partial_function next_nat.
Proof.
  unfold partial_function.
  intros x y1 y2 H1 H2.
  inversion H1. inversion H2.
  reflexivity.  Qed.



Theorem le_not_a_partial_function :
  ~ (partial_function le).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply Hc with (x := 0).
    - apply le_n.
    - apply le_S. apply le_n. }
  discriminate Nonsense.   Qed.




Inductive total_relation : nat -> nat -> Prop :=
  | total_rel (n m : nat) : total_relation n m
.

Theorem total_relation_not_partial_function :
  ~ (partial_function total_relation).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply (Hc 1 0 1). apply total_rel. apply total_rel.
  }
  discriminate Nonsense.
Qed.





Inductive empty_relation : nat -> nat -> Prop :=
.

Theorem empty_relation_partial_function :
  partial_function empty_relation.
Proof.
  intros x y1 y2 rel. inversion rel.
Qed.







Definition reflexive {X: Type} (R: relation X) :=
  forall a : X, R a a.

Theorem le_reflexive :
  reflexive le.
Proof.
  unfold reflexive. intros n. apply le_n.  Qed.






Definition transitive {X: Type} (R: relation X) :=
  forall a b c : X, (R a b) -> (R b c) -> (R a c).

Theorem le_trans :
  transitive le.
Proof.
  intros n m o Hnm Hmo.
  induction Hmo.
  -  apply Hnm.
  -  apply le_S. apply IHHmo.  Qed.

Theorem lt_trans:
  transitive lt.
Proof.
  unfold lt. unfold transitive.
  intros n m o Hnm Hmo.
  apply le_S in Hnm.
  apply le_trans with (a := (S n)) (b := (S m)) (c := o).
  apply Hnm.
  apply Hmo. Qed.





Lemma less_transitive_nat_4 : forall n1 n2 n3 : nat, forall H1 : n1 < n2, forall H2 : n2 < n3, n1 < n3.

Proof.
(* We will proceed by induction on H1, the hypothesis that n1 < n2.
*)
  intros n1 n2 n3 H1 H2.
(* We will also need to use the fact that n2 < n3, which we will call H2.
*)
  (* We will also need to use the fact that n1 < n2, which we will call H1.
*)
  (* We will need to use the fact that n1 < n2 implies n1 <= n2.
*)
  apply (le_lt_trans H1 H2).
(* This concludes the proof.
*)

Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #174)
Error in step "apply (le_lt_trans H1 H2).".
Message: The variable le_lt_trans was not found in the current
environment..
Goal: n1 < n3.


TRYING TO PROVE LEMMA
Lemma less_transitive_nat_5 : forall n1 n2 n3 : nat, forall H1 : n1 < n2, forall H2 : n2 < n3, n1 < n3.


Error proving lt_trans'
MAX LEMMA DEPTH REACHED. GIVING UP.