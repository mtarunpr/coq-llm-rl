PROVING re_opt_e_match'
ATTEMPTED LEMMA PROOF (LEMMAS USED: 0)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.










Lemma simple_semi : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  destruct n eqn:E.
    
    -  simpl. reflexivity.
    -  simpl. reflexivity.
Qed.



Lemma simple_semi' : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  
  destruct n;
  
  simpl;
  
  reflexivity.
Qed.



Lemma simple_semi'' : forall n, (n + 1 =? 0) = false.
Proof.
  destruct n; reflexivity.
Qed.





Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof. destruct b; destruct c; try reflexivity; try discriminate. Qed.

Theorem add_assoc : forall n m p : nat,
    n + (m + p) = (n + m) + p.
Proof. intros n m p; induction n as [| n' IHn']; try (simpl; rewrite IHn'); reflexivity. Qed.

Fixpoint nonzeros (lst : list nat) :=
  match lst with
  | [] => []
  | 0 :: t => nonzeros t
  | h :: t => h :: nonzeros t
  end.

Lemma nonzeros_app : forall lst1 lst2 : list nat,
  nonzeros (lst1 ++ lst2) = (nonzeros lst1) ++ (nonzeros lst2).
Proof. intros lst1 lst2; induction lst1 as [|h t IH]; try (destruct h; simpl; rewrite <- IH); reflexivity. Qed.







Lemma re_opt_e_match' : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.

Proof.
(* We will proceed by induction on the structure of the regular expression re.
*)
  intros T re s H.
induction re as [|re1 re2 Hre1 Hre2].
- (* Case re = EmptySet *)
    (* Since s =~ EmptySet is false, we have a contradiction.
*)
    contradiction.
- (* Case re = Epsilon *)
    (* Since s =~ Epsilon is true, we have s =~ re_opt_e Epsilon.
*)
    reflexivity.
- (* Case re = Char c *)
    (* Since s =~ Char c is true, we have s =~ re_opt_e (Char c).
*)
    reflexivity.
- (* Case re = Star re1 *)
    (* We know that s =~ re1*.
Since s =~ re1*, we have s =~ re1*.
*)
    apply Hre1.
- (* Case re = re1 + re2 *)
    (* We know that s =~ re1 + re2 is true.
*)
    (* By the IH, we have s =~ re_opt_e re1 and s =~ re_opt_e re2.
*)
    apply Hre1.
apply Hre2.
- (* Case re = re1 * re2 *)
    (* We know that s =~ re1 * re2 is true.
*)
    (* By the IH, we have s =~ re_opt_e re1 and s =~ re_opt_e re2.
*)
    apply Hre1.
apply Hre2.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #240)
Error in step "induction re as [|re1 re2 Hre1 Hre2].".
Message: Expects a disjunctive pattern with 6 branches..
Goal: s =~ re_opt_e re.


TRYING TO PROVE LEMMA
Lemma reg_exp_match_optional_empty_0 : forall T : Type, forall re : reg_exp T, forall s : list T, forall H : s =~ re, s =~ re_opt_e re.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.










Lemma simple_semi : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  destruct n eqn:E.
    
    -  simpl. reflexivity.
    -  simpl. reflexivity.
Qed.



Lemma simple_semi' : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  
  destruct n;
  
  simpl;
  
  reflexivity.
Qed.



Lemma simple_semi'' : forall n, (n + 1 =? 0) = false.
Proof.
  destruct n; reflexivity.
Qed.





Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof. destruct b; destruct c; try reflexivity; try discriminate. Qed.

Theorem add_assoc : forall n m p : nat,
    n + (m + p) = (n + m) + p.
Proof. intros n m p; induction n as [| n' IHn']; try (simpl; rewrite IHn'); reflexivity. Qed.

Fixpoint nonzeros (lst : list nat) :=
  match lst with
  | [] => []
  | 0 :: t => nonzeros t
  | h :: t => h :: nonzeros t
  end.

Lemma nonzeros_app : forall lst1 lst2 : list nat,
  nonzeros (lst1 ++ lst2) = (nonzeros lst1) ++ (nonzeros lst2).
Proof. intros lst1 lst2; induction lst1 as [|h t IH]; try (destruct h; simpl; rewrite <- IH); reflexivity. Qed.







Lemma reg_exp_match_optional_empty_0 : forall T : Type, forall re : reg_exp T, forall s : list T, forall H : s =~ re, s =~ re_opt_e re.

Proof.
(* We will proceed by induction on the regular expression re.
*)
  intros T re s H.
induction re as [|re1 re2 | P | re'].
(* Case re = 0 *)
  - intros H.
inversion H.
(* Case re = 1 *)
  - intros H.
inversion H.
(* Case re = P *)
  - intros H.
inversion H.
(* Case re = re1 + re2 *)
  - intros H.
inversion H.
(* Case re = re1 * re2 *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #240)
Error in step "induction re as [|re1 re2 | P | re'].".
Message: Expects a disjunctive pattern with 6 branches..
Goal: s =~ re_opt_e re.


TRYING TO PROVE LEMMA
Lemma reg_exp_match_optional_empty_1 : forall T : Type, forall re : reg_exp T, forall s : list T, forall H : s =~ re, s =~ re_opt_e re.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.










Lemma simple_semi : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  destruct n eqn:E.
    
    -  simpl. reflexivity.
    -  simpl. reflexivity.
Qed.



Lemma simple_semi' : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  
  destruct n;
  
  simpl;
  
  reflexivity.
Qed.



Lemma simple_semi'' : forall n, (n + 1 =? 0) = false.
Proof.
  destruct n; reflexivity.
Qed.





Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof. destruct b; destruct c; try reflexivity; try discriminate. Qed.

Theorem add_assoc : forall n m p : nat,
    n + (m + p) = (n + m) + p.
Proof. intros n m p; induction n as [| n' IHn']; try (simpl; rewrite IHn'); reflexivity. Qed.

Fixpoint nonzeros (lst : list nat) :=
  match lst with
  | [] => []
  | 0 :: t => nonzeros t
  | h :: t => h :: nonzeros t
  end.

Lemma nonzeros_app : forall lst1 lst2 : list nat,
  nonzeros (lst1 ++ lst2) = (nonzeros lst1) ++ (nonzeros lst2).
Proof. intros lst1 lst2; induction lst1 as [|h t IH]; try (destruct h; simpl; rewrite <- IH); reflexivity. Qed.







Lemma reg_exp_match_optional_empty_1 : forall T : Type, forall re : reg_exp T, forall s : list T, forall H : s =~ re, s =~ re_opt_e re.

Proof.
(* We will proceed by induction on the regular expression re.
*)
  intros T re s H.
induction re as [|re1 re2 | P | re'].
(* Case re = 0 *)
  - intros H.
inversion H.
(* Case re = 1 *)
  - intros H.
inversion H.
(* Case re = P *)
  - intros H.
inversion H.
(* Case re = re1 + re2 *)
  - intros H.
inversion H.
(* Case re = re1 * re2 *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H.
inversion H.
(* Case re = re'[s := re] *)
  - intros H
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #240)
Error in step "induction re as [|re1 re2 | P | re'].".
Message: Expects a disjunctive pattern with 6 branches..
Goal: s =~ re_opt_e re.


TRYING TO PROVE LEMMA
Lemma reg_exp_match_optional_empty_2 : forall T : Type, forall re : reg_exp T, forall s : list T, forall H : s =~ re, s =~ re_opt_e re.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.










Lemma simple_semi : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  destruct n eqn:E.
    
    -  simpl. reflexivity.
    -  simpl. reflexivity.
Qed.



Lemma simple_semi' : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  
  destruct n;
  
  simpl;
  
  reflexivity.
Qed.



Lemma simple_semi'' : forall n, (n + 1 =? 0) = false.
Proof.
  destruct n; reflexivity.
Qed.





Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof. destruct b; destruct c; try reflexivity; try discriminate. Qed.

Theorem add_assoc : forall n m p : nat,
    n + (m + p) = (n + m) + p.
Proof. intros n m p; induction n as [| n' IHn']; try (simpl; rewrite IHn'); reflexivity. Qed.

Fixpoint nonzeros (lst : list nat) :=
  match lst with
  | [] => []
  | 0 :: t => nonzeros t
  | h :: t => h :: nonzeros t
  end.

Lemma nonzeros_app : forall lst1 lst2 : list nat,
  nonzeros (lst1 ++ lst2) = (nonzeros lst1) ++ (nonzeros lst2).
Proof. intros lst1 lst2; induction lst1 as [|h t IH]; try (destruct h; simpl; rewrite <- IH); reflexivity. Qed.







Lemma reg_exp_match_optional_empty_2 : forall T : Type, forall re : reg_exp T, forall s : list T, forall H : s =~ re, s =~ re_opt_e re.

Proof.
(* We will proceed by induction on the regular expression [re] and the list [s].
*)
  intros T re s H.
induction re as [|re1 re2 | re_e].
(* Case 1: re = re_e *)
  (* In this case, we have H : s =~ re_e, which is trivially true.
*)
  (* Thus, we have s =~ re_opt_e re_e.
*)
  constructor.
(* Case 2: re = re1 | re2 *)
  (* We will use the induction hypothesis on re1 and re2.
*)
  apply IHre1 in H.
apply IHre2 in H.
(* Case 3: re = re_opt_e re *)
  (* In this case, we have H : s =~ re_opt_e re, which is trivially true.
*)
  constructor.
(* 
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #240)
Error in step "induction re as [|re1 re2 | re_e].".
Message: Expects a disjunctive pattern with 6 branches..
Goal: s =~ re_opt_e re.


TRYING TO PROVE LEMMA
Lemma reg_exp_match_optional_empty_3 : forall T : Type, forall re : reg_exp T, forall s : list T, forall H : s =~ re, s =~ re_opt_e re.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.










Lemma simple_semi : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  destruct n eqn:E.
    
    -  simpl. reflexivity.
    -  simpl. reflexivity.
Qed.



Lemma simple_semi' : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  
  destruct n;
  
  simpl;
  
  reflexivity.
Qed.



Lemma simple_semi'' : forall n, (n + 1 =? 0) = false.
Proof.
  destruct n; reflexivity.
Qed.





Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof. destruct b; destruct c; try reflexivity; try discriminate. Qed.

Theorem add_assoc : forall n m p : nat,
    n + (m + p) = (n + m) + p.
Proof. intros n m p; induction n as [| n' IHn']; try (simpl; rewrite IHn'); reflexivity. Qed.

Fixpoint nonzeros (lst : list nat) :=
  match lst with
  | [] => []
  | 0 :: t => nonzeros t
  | h :: t => h :: nonzeros t
  end.

Lemma nonzeros_app : forall lst1 lst2 : list nat,
  nonzeros (lst1 ++ lst2) = (nonzeros lst1) ++ (nonzeros lst2).
Proof. intros lst1 lst2; induction lst1 as [|h t IH]; try (destruct h; simpl; rewrite <- IH); reflexivity. Qed.







Lemma reg_exp_match_optional_empty_3 : forall T : Type, forall re : reg_exp T, forall s : list T, forall H : s =~ re, s =~ re_opt_e re.

Proof.
(* We will proceed by induction on the regular expression [re] and the list [s].
*)
  intros T re s H.
induction re as [|re1 re2 | re_opt_e re1 IHre1 IHre2].
(* Case for empty regular expression *)
  - simpl.
(* We know that [s =~ []] is false by definition of [=~].
*)
    contradiction.
(* Case for a single element *)
  - simpl.
(* We know that [s =~ [re1]] is true by definition of [=~].
*)
    reflexivity.
(* Case for the union of two regular expressions *)
  - simpl.
(* We know that [s =~ (re1 | re2)] is true if [s =~ re1] or [s =~ re2].
*)
    destruct H as [H1 | H2].
- (* If [s =~ re1], then [s =~ re_opt_e (re1 | re2)] by IHre1.
*)
      apply IHre1.
assumption.
- (* If [s =~ re2], then [s =~ re_opt_e (re1 | re2)] by IHre2.
*)
      apply IHre2.
assumption.
(* Case for the optional empty regular expression *)
  - simpl.
(* We know that [s =~ (re_opt_e re)] is true if [s =~ re].
*)
    apply IHre1.
assumption.
(* Case for the concatenation of two regular expressions *)
  - simpl.
(* We know that [s =~ (re1 ++ re2)] is true if there exists a list [s1] and a list [s2]
       such that [s = s1 ++ s2] and [s1 =~ re1] and [s2 =~ re2].
*)
    destruct H as [s1 s2 H1 H2].
(* We know that [s1 ++ s2 =~ re1] and [s1 ++ s2 =~ re2] by IHre1 and IHre2.
*)
    apply IHre1.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #240)
Error in step "induction re as [|re1 re2 | re_opt_e re1 IHre1 IHre2].".
Message: Expects a disjunctive pattern with 6 branches..
Goal: s =~ re_opt_e re.


TRYING TO PROVE LEMMA
Lemma reg_exp_match_optional_empty_4 : forall T : Type, forall re : reg_exp T, forall s : list T, forall H : s =~ re, s =~ re_opt_e re.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Arith List.
From LF Require Import IndProp.



Fixpoint re_opt_e {T:Type} (re: reg_exp T) : reg_exp T :=
  match re with
  | App EmptyStr re2 => re_opt_e re2
  | App re1 re2 => App (re_opt_e re1) (re_opt_e re2)
  | Union re1 re2 => Union (re_opt_e re1) (re_opt_e re2)
  | Star re => Star (re_opt_e re)
  | _ => re
  end.



Lemma re_opt_e_match : forall T (re: reg_exp T) s,
  s =~ re -> s =~ re_opt_e re.
Proof.
  intros T re s M.
  induction M
    as [| x'
        | s1 re1 s2 re2 Hmatch1 IH1 Hmatch2 IH2
        | s1 re1 re2 Hmatch IH | re1 s2 re2 Hmatch IH
        | re | s1 s2 re Hmatch1 IH1 Hmatch2 IH2].
  -  simpl. apply MEmpty.
  -  simpl. apply MChar.
  -  simpl.
    destruct re1.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + inversion Hmatch1. simpl. apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
    + apply MApp.
      * apply IH1.
      * apply IH2.
  -  simpl. apply MUnionL. apply IH.
  -  simpl. apply MUnionR. apply IH.
  -  simpl. apply MStar0.
  -  simpl. apply MStarApp.
    * apply IH1.
    * apply IH2.
Qed.













Theorem silly1 : forall n, 1 + n = S n.
Proof. try reflexivity.  Qed.

Theorem silly2 : forall (P : Prop), P -> P.
Proof.
  intros P HP.
  Fail reflexivity.
  try reflexivity. 
  apply HP.
Qed.










Lemma simple_semi : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  destruct n eqn:E.
    
    -  simpl. reflexivity.
    -  simpl. reflexivity.
Qed.



Lemma simple_semi' : forall n, (n + 1 =? 0) = false.
Proof.
  intros n.
  
  destruct n;
  
  simpl;
  
  reflexivity.
Qed.



Lemma simple_semi'' : forall n, (n + 1 =? 0) = false.
Proof.
  destruct n; reflexivity.
Qed.





Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof. destruct b; destruct c; try reflexivity; try discriminate. Qed.

Theorem add_assoc : forall n m p : nat,
    n + (m + p) = (n + m) + p.
Proof. intros n m p; induction n as [| n' IHn']; try (simpl; rewrite IHn'); reflexivity. Qed.

Fixpoint nonzeros (lst : list nat) :=
  match lst with
  | [] => []
  | 0 :: t => nonzeros t
  | h :: t => h :: nonzeros t
  end.

Lemma nonzeros_app : forall lst1 lst2 : list nat,
  nonzeros (lst1 ++ lst2) = (nonzeros lst1) ++ (nonzeros lst2).
Proof. intros lst1 lst2; induction lst1 as [|h t IH]; try (destruct h; simpl; rewrite <- IH); reflexivity. Qed.







Lemma reg_exp_match_optional_empty_4 : forall T : Type, forall re : reg_exp T, forall s : list T, forall H : s =~ re, s =~ re_opt_e re.

Proof.
(* We will proceed by induction on the regular expression [re] and the list [s].
*)
  intros T re s H.
induction re as [|re1 re2 | re_e].
(* Case 1: re = re_e *)
  (* In this case, we have H : s =~ re_e, which is trivially true since re_e = ε and s = [] *)
  (* So, we have s =~ re_opt_e re_e *)
  reflexivity.
(* Case 2: re = re1 | re2 *)
  (* We have H : s =~ (re1 | re2) *)
  (* By the IH, we have s =~ re_opt_e re1 and s =~ re_opt_e re2 *)
  (* So, we have s =~ re_opt_e (re1 | re2) *)
  apply IHre1.
apply IHre2.
(* Case 3: re = re_opt_e re *)
  (* We have H : s =~ re_opt_e re *)
  (* So, we have s =~ re_opt_e (re_opt_e re) *)
  reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #240)
Error in step "induction re as [|re1 re2 | re_e].".
Message: Expects a disjunctive pattern with 6 branches..
Goal: s =~ re_opt_e re.


TRYING TO PROVE LEMMA
Lemma reg_exp_match_optional_empty_5 : forall T : Type, forall re : reg_exp T, forall s : list T, forall H : s =~ re, s =~ re_opt_e re.


Error proving re_opt_e_match'
MAX LEMMA DEPTH REACHED. GIVING UP.