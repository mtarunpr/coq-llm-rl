PROVING tokenize_ex1
ATTEMPTED EXAMPLE PROOF (LEMMAS USED: 0)






Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Strings.String.
From Coq Require Import Strings.Ascii.
From Coq Require Import Arith.Arith.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.EqNat.
From Coq Require Import Lists.List. Import ListNotations.
From LF Require Import Maps Imp.







Definition isWhite (c : ascii) : bool :=
  let n := nat_of_ascii c in
  orb (orb (n =? 32)   
           (n =? 9))   
      (orb (n =? 10)   
           (n =? 13)). 

Notation "x '<=?' y" := (x <=? y)
  (at level 70, no associativity) : nat_scope.

Definition isLowerAlpha (c : ascii) : bool :=
  let n := nat_of_ascii c in
    andb (97 <=? n) (n <=? 122).

Definition isAlpha (c : ascii) : bool :=
  let n := nat_of_ascii c in
    orb (andb (65 <=? n) (n <=? 90))
        (andb (97 <=? n) (n <=? 122)).

Definition isDigit (c : ascii) : bool :=
  let n := nat_of_ascii c in
     andb (48 <=? n) (n <=? 57).

Inductive chartype := white | alpha | digit | other.

Definition classifyChar (c : ascii) : chartype :=
  if isWhite c then
    white
  else if isAlpha c then
    alpha
  else if isDigit c then
    digit
  else
    other.

Fixpoint list_of_string (s : string) : list ascii :=
  match s with
  | EmptyString => []
  | String c s => c :: (list_of_string s)
  end.

Definition string_of_list (xs : list ascii) : string :=
  fold_right String EmptyString xs.

Definition token := string.

Fixpoint tokenize_helper (cls : chartype) (acc xs : list ascii)
                       : list (list ascii) :=
  let tk := match acc with [] => [] | _::_ => [rev acc] end in
  match xs with
  | [] => tk
  | (x::xs') =>
    match cls, classifyChar x, x with
    | _, _, "("      =>
      tk ++ ["("]::(tokenize_helper other [] xs')
    | _, _, ")"      =>
      tk ++ [")"]::(tokenize_helper other [] xs')
    | _, white, _    =>
      tk ++ (tokenize_helper white [] xs')
    | alpha,alpha,x  =>
      tokenize_helper alpha (x::acc) xs'
    | digit,digit,x  =>
      tokenize_helper digit (x::acc) xs'
    | other,other,x  =>
      tokenize_helper other (x::acc) xs'
    | _,tp,x         =>
      tk ++ (tokenize_helper tp [x] xs')
    end
  end %char.

Definition tokenize (s : string) : list string :=
  map string_of_list (tokenize_helper white [] (list_of_string s)).



Example tokenize_ex1 : tokenize "abc12=3  223*(3+(a+c))" %string
  = ["abc"; "12"; "="; "3"; "223";
       "*"; "("; "3"; "+"; "(";
       "a"; "+"; "c"; ")"; ")"]%string.

Proof.
(* We will proceed by induction on the input list of ascii characters.
*)
  intros s.
(* We will also need to use the following lemmas: *)
  (* - rev_inj: The reverse of a list is injective.
*)
  (* - fold_right_rev: fold_right with cons is the same as appending and then reversing.
*)
  (* - map_rev: The map of a reversed list is the same as reversing the map.
*)
  (* - map_string_of_list: The map of a list of ascii characters is the same as converting the list to a string.
*)
  (* - fold_right_append: fold_right with cons is the same as appending.
*)
  (* - fold_right_string: fold_right with String is the same as converting a list of ascii characters to a string.
*)
  (* - tokenize_helper_correct: The tokenize_helper function correctly tokenizes a list of ascii characters.
*)
  (* - tokenize_correct: The tokenize function correctly tokenizes a string.
*)
  (* We will also use the following tactics: *)
  (* - inversion: To case split on the current state of the tokenize_helper function.
*)
  (* - destruct: To case split on the current character and its classification.
*)
  (* - simpl: To simplify the current goal.
*)
  (* - rewrite: To rewrite a goal using a lemma.
*)
  (* - congruence: To finish the proof by checking that the two lists are equal.
*)
  (* We will also use the following notations: *)
  (* - "x :: xs" for the list cons operator.
*)
  (* - "EmptyString" for the empty string.
*)
  (* - "String c s" for the string cons operator.
*)
  (* - "rev xs" for the reverse of a list xs.
*)
  (* - "map f xs" for the map of a function f on a list xs.
*)
  (* - "fold_right f x xs" for the fold_right of a function f with initial value x on a list xs.
*)
  (* - "tokenize_helper cls acc xs
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN EXAMPLE PROOF (FRAGMENT #52)
Error in step "intros s.".
Message: No product even after head-reduction..
Goal: tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].


TRYING TO PROVE LEMMA
Lemma tokenize_example_string_0 : tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)






Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Strings.String.
From Coq Require Import Strings.Ascii.
From Coq Require Import Arith.Arith.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.EqNat.
From Coq Require Import Lists.List. Import ListNotations.
From LF Require Import Maps Imp.







Definition isWhite (c : ascii) : bool :=
  let n := nat_of_ascii c in
  orb (orb (n =? 32)   
           (n =? 9))   
      (orb (n =? 10)   
           (n =? 13)). 

Notation "x '<=?' y" := (x <=? y)
  (at level 70, no associativity) : nat_scope.

Definition isLowerAlpha (c : ascii) : bool :=
  let n := nat_of_ascii c in
    andb (97 <=? n) (n <=? 122).

Definition isAlpha (c : ascii) : bool :=
  let n := nat_of_ascii c in
    orb (andb (65 <=? n) (n <=? 90))
        (andb (97 <=? n) (n <=? 122)).

Definition isDigit (c : ascii) : bool :=
  let n := nat_of_ascii c in
     andb (48 <=? n) (n <=? 57).

Inductive chartype := white | alpha | digit | other.

Definition classifyChar (c : ascii) : chartype :=
  if isWhite c then
    white
  else if isAlpha c then
    alpha
  else if isDigit c then
    digit
  else
    other.

Fixpoint list_of_string (s : string) : list ascii :=
  match s with
  | EmptyString => []
  | String c s => c :: (list_of_string s)
  end.

Definition string_of_list (xs : list ascii) : string :=
  fold_right String EmptyString xs.

Definition token := string.

Fixpoint tokenize_helper (cls : chartype) (acc xs : list ascii)
                       : list (list ascii) :=
  let tk := match acc with [] => [] | _::_ => [rev acc] end in
  match xs with
  | [] => tk
  | (x::xs') =>
    match cls, classifyChar x, x with
    | _, _, "("      =>
      tk ++ ["("]::(tokenize_helper other [] xs')
    | _, _, ")"      =>
      tk ++ [")"]::(tokenize_helper other [] xs')
    | _, white, _    =>
      tk ++ (tokenize_helper white [] xs')
    | alpha,alpha,x  =>
      tokenize_helper alpha (x::acc) xs'
    | digit,digit,x  =>
      tokenize_helper digit (x::acc) xs'
    | other,other,x  =>
      tokenize_helper other (x::acc) xs'
    | _,tp,x         =>
      tk ++ (tokenize_helper tp [x] xs')
    end
  end %char.

Definition tokenize (s : string) : list string :=
  map string_of_list (tokenize_helper white [] (list_of_string s)).



Lemma tokenize_example_string_0 : tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].

Proof.
(* We will proceed by induction on the input string.
*)
  induction s as [|x s' IHs'].
- (* Base case: Empty string.
*)
    simpl.
reflexivity.
- (* Inductive case: Non-empty string.
*)
    simpl.
(* We will split the proof into several subgoals.
*)
    destruct (classifyChar x) as [cls].
- (* Subgoal: If x is a white space, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
- (* Subgoal: If x is an alpha character, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
- (* Subgoal: If x is a digit, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
- (* Subgoal: If x is an other character, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #52)
Error in step "induction s as [|x s' IHs'].".
Message: The variable s was not found in the current
environment..
Goal: tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].


TRYING TO PROVE LEMMA
Lemma tokenize_example_string_1 : tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)






Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Strings.String.
From Coq Require Import Strings.Ascii.
From Coq Require Import Arith.Arith.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.EqNat.
From Coq Require Import Lists.List. Import ListNotations.
From LF Require Import Maps Imp.







Definition isWhite (c : ascii) : bool :=
  let n := nat_of_ascii c in
  orb (orb (n =? 32)   
           (n =? 9))   
      (orb (n =? 10)   
           (n =? 13)). 

Notation "x '<=?' y" := (x <=? y)
  (at level 70, no associativity) : nat_scope.

Definition isLowerAlpha (c : ascii) : bool :=
  let n := nat_of_ascii c in
    andb (97 <=? n) (n <=? 122).

Definition isAlpha (c : ascii) : bool :=
  let n := nat_of_ascii c in
    orb (andb (65 <=? n) (n <=? 90))
        (andb (97 <=? n) (n <=? 122)).

Definition isDigit (c : ascii) : bool :=
  let n := nat_of_ascii c in
     andb (48 <=? n) (n <=? 57).

Inductive chartype := white | alpha | digit | other.

Definition classifyChar (c : ascii) : chartype :=
  if isWhite c then
    white
  else if isAlpha c then
    alpha
  else if isDigit c then
    digit
  else
    other.

Fixpoint list_of_string (s : string) : list ascii :=
  match s with
  | EmptyString => []
  | String c s => c :: (list_of_string s)
  end.

Definition string_of_list (xs : list ascii) : string :=
  fold_right String EmptyString xs.

Definition token := string.

Fixpoint tokenize_helper (cls : chartype) (acc xs : list ascii)
                       : list (list ascii) :=
  let tk := match acc with [] => [] | _::_ => [rev acc] end in
  match xs with
  | [] => tk
  | (x::xs') =>
    match cls, classifyChar x, x with
    | _, _, "("      =>
      tk ++ ["("]::(tokenize_helper other [] xs')
    | _, _, ")"      =>
      tk ++ [")"]::(tokenize_helper other [] xs')
    | _, white, _    =>
      tk ++ (tokenize_helper white [] xs')
    | alpha,alpha,x  =>
      tokenize_helper alpha (x::acc) xs'
    | digit,digit,x  =>
      tokenize_helper digit (x::acc) xs'
    | other,other,x  =>
      tokenize_helper other (x::acc) xs'
    | _,tp,x         =>
      tk ++ (tokenize_helper tp [x] xs')
    end
  end %char.

Definition tokenize (s : string) : list string :=
  map string_of_list (tokenize_helper white [] (list_of_string s)).



Lemma tokenize_example_string_1 : tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].

Proof.
(* We will proceed by induction on the input string.
*)
  intros s.
(* Base case: when the input string is empty, the result should be a list containing only the empty string.
*)
  reflexivity.
(* Inductive case: we will consider the first character of the string, and then recursively call the tokenize function on the rest of the string.
*)
  intros c s' H.
(* We will split the proof into several cases, depending on the character type of the first character.
*)
  destruct (classifyChar c) as [cls].
(* Case 1: the first character is white space.
*)
  destruct (tokenize_helper white [] (c :: list_of_string s')) as [tk1].
(* Case 2: the first character is a lowercase letter.
*)
  destruct (tokenize_helper alpha [c] (list_of_string s')) as [tk2].
(* Case 3: the first character is a digit.
*)
  destruct (tokenize_helper digit [c] (list_of_string s')) as [tk3].
(* Case 4: the first character is neither white space, a lowercase letter, nor a digit.
*)
  destruct (tokenize_helper other [c] (list_of_string s')) as [tk4].
(* In each case, we will show that the result of the tokenize function is as expected.
*)
  (* For case 1, we need to show that the result is the same as the result of recursively calling the tokenize function on the rest of the string.
*)
  (* For case 2, we need to show that the result is the same as the result of recursively calling the tokenize function on the rest of the string, with the first character added to the accumulator.
*)
  (* For case 3, we need to show that the result is the same as the result of recursively calling the tokenize function on the rest of the string, with the first character added to the accumulator.
*)
  (* For case 4, we need to show that the result is the same as the result of recursively calling the tokenize function on the rest of the string, with the first character added to
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #52)
Error in step "intros s.".
Message: No product even after head-reduction..
Goal: tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].


TRYING TO PROVE LEMMA
Lemma tokenize_example_string_2 : tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)






Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Strings.String.
From Coq Require Import Strings.Ascii.
From Coq Require Import Arith.Arith.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.EqNat.
From Coq Require Import Lists.List. Import ListNotations.
From LF Require Import Maps Imp.







Definition isWhite (c : ascii) : bool :=
  let n := nat_of_ascii c in
  orb (orb (n =? 32)   
           (n =? 9))   
      (orb (n =? 10)   
           (n =? 13)). 

Notation "x '<=?' y" := (x <=? y)
  (at level 70, no associativity) : nat_scope.

Definition isLowerAlpha (c : ascii) : bool :=
  let n := nat_of_ascii c in
    andb (97 <=? n) (n <=? 122).

Definition isAlpha (c : ascii) : bool :=
  let n := nat_of_ascii c in
    orb (andb (65 <=? n) (n <=? 90))
        (andb (97 <=? n) (n <=? 122)).

Definition isDigit (c : ascii) : bool :=
  let n := nat_of_ascii c in
     andb (48 <=? n) (n <=? 57).

Inductive chartype := white | alpha | digit | other.

Definition classifyChar (c : ascii) : chartype :=
  if isWhite c then
    white
  else if isAlpha c then
    alpha
  else if isDigit c then
    digit
  else
    other.

Fixpoint list_of_string (s : string) : list ascii :=
  match s with
  | EmptyString => []
  | String c s => c :: (list_of_string s)
  end.

Definition string_of_list (xs : list ascii) : string :=
  fold_right String EmptyString xs.

Definition token := string.

Fixpoint tokenize_helper (cls : chartype) (acc xs : list ascii)
                       : list (list ascii) :=
  let tk := match acc with [] => [] | _::_ => [rev acc] end in
  match xs with
  | [] => tk
  | (x::xs') =>
    match cls, classifyChar x, x with
    | _, _, "("      =>
      tk ++ ["("]::(tokenize_helper other [] xs')
    | _, _, ")"      =>
      tk ++ [")"]::(tokenize_helper other [] xs')
    | _, white, _    =>
      tk ++ (tokenize_helper white [] xs')
    | alpha,alpha,x  =>
      tokenize_helper alpha (x::acc) xs'
    | digit,digit,x  =>
      tokenize_helper digit (x::acc) xs'
    | other,other,x  =>
      tokenize_helper other (x::acc) xs'
    | _,tp,x         =>
      tk ++ (tokenize_helper tp [x] xs')
    end
  end %char.

Definition tokenize (s : string) : list string :=
  map string_of_list (tokenize_helper white [] (list_of_string s)).



Lemma tokenize_example_string_2 : tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].

Proof.
(* We will proceed by induction on the input string.
*)
  induction s as [|x s' IHs'].
- (* Base case: Empty string.
*)
    simpl.
reflexivity.
- (* Inductive case: Non-empty string.
*)
    simpl.
(* We will split the proof into several subgoals.
*)
    destruct (classifyChar x) as [cls].
- (* Subgoal: If x is a white space, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
- (* Subgoal: If x is an alpha character, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
- (* Subgoal: If x is a digit, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
- (* Subgoal: If x is an other character, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #52)
Error in step "induction s as [|x s' IHs'].".
Message: The variable s was not found in the current
environment..
Goal: tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].


TRYING TO PROVE LEMMA
Lemma tokenize_example_string_3 : tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)






Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Strings.String.
From Coq Require Import Strings.Ascii.
From Coq Require Import Arith.Arith.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.EqNat.
From Coq Require Import Lists.List. Import ListNotations.
From LF Require Import Maps Imp.







Definition isWhite (c : ascii) : bool :=
  let n := nat_of_ascii c in
  orb (orb (n =? 32)   
           (n =? 9))   
      (orb (n =? 10)   
           (n =? 13)). 

Notation "x '<=?' y" := (x <=? y)
  (at level 70, no associativity) : nat_scope.

Definition isLowerAlpha (c : ascii) : bool :=
  let n := nat_of_ascii c in
    andb (97 <=? n) (n <=? 122).

Definition isAlpha (c : ascii) : bool :=
  let n := nat_of_ascii c in
    orb (andb (65 <=? n) (n <=? 90))
        (andb (97 <=? n) (n <=? 122)).

Definition isDigit (c : ascii) : bool :=
  let n := nat_of_ascii c in
     andb (48 <=? n) (n <=? 57).

Inductive chartype := white | alpha | digit | other.

Definition classifyChar (c : ascii) : chartype :=
  if isWhite c then
    white
  else if isAlpha c then
    alpha
  else if isDigit c then
    digit
  else
    other.

Fixpoint list_of_string (s : string) : list ascii :=
  match s with
  | EmptyString => []
  | String c s => c :: (list_of_string s)
  end.

Definition string_of_list (xs : list ascii) : string :=
  fold_right String EmptyString xs.

Definition token := string.

Fixpoint tokenize_helper (cls : chartype) (acc xs : list ascii)
                       : list (list ascii) :=
  let tk := match acc with [] => [] | _::_ => [rev acc] end in
  match xs with
  | [] => tk
  | (x::xs') =>
    match cls, classifyChar x, x with
    | _, _, "("      =>
      tk ++ ["("]::(tokenize_helper other [] xs')
    | _, _, ")"      =>
      tk ++ [")"]::(tokenize_helper other [] xs')
    | _, white, _    =>
      tk ++ (tokenize_helper white [] xs')
    | alpha,alpha,x  =>
      tokenize_helper alpha (x::acc) xs'
    | digit,digit,x  =>
      tokenize_helper digit (x::acc) xs'
    | other,other,x  =>
      tokenize_helper other (x::acc) xs'
    | _,tp,x         =>
      tk ++ (tokenize_helper tp [x] xs')
    end
  end %char.

Definition tokenize (s : string) : list string :=
  map string_of_list (tokenize_helper white [] (list_of_string s)).



Lemma tokenize_example_string_3 : tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].

Proof.
(* We will proceed by induction on the input string.
*)
  induction s as [|x s' IHs'].
- (* Base case: Empty string.
*)
    simpl.
reflexivity.
- (* Inductive case: Non-empty string.
*)
    simpl.
(* We will split the proof into several subgoals.
*)
    destruct (classifyChar x) as [cls].
- (* Subgoal: If x is a white space, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
- (* Subgoal: If x is an alpha character, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
- (* Subgoal: If x is a digit, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
- (* Subgoal: If x is an other character, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #52)
Error in step "induction s as [|x s' IHs'].".
Message: The variable s was not found in the current
environment..
Goal: tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].


TRYING TO PROVE LEMMA
Lemma tokenize_example_string_4 : tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)






Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Strings.String.
From Coq Require Import Strings.Ascii.
From Coq Require Import Arith.Arith.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.EqNat.
From Coq Require Import Lists.List. Import ListNotations.
From LF Require Import Maps Imp.







Definition isWhite (c : ascii) : bool :=
  let n := nat_of_ascii c in
  orb (orb (n =? 32)   
           (n =? 9))   
      (orb (n =? 10)   
           (n =? 13)). 

Notation "x '<=?' y" := (x <=? y)
  (at level 70, no associativity) : nat_scope.

Definition isLowerAlpha (c : ascii) : bool :=
  let n := nat_of_ascii c in
    andb (97 <=? n) (n <=? 122).

Definition isAlpha (c : ascii) : bool :=
  let n := nat_of_ascii c in
    orb (andb (65 <=? n) (n <=? 90))
        (andb (97 <=? n) (n <=? 122)).

Definition isDigit (c : ascii) : bool :=
  let n := nat_of_ascii c in
     andb (48 <=? n) (n <=? 57).

Inductive chartype := white | alpha | digit | other.

Definition classifyChar (c : ascii) : chartype :=
  if isWhite c then
    white
  else if isAlpha c then
    alpha
  else if isDigit c then
    digit
  else
    other.

Fixpoint list_of_string (s : string) : list ascii :=
  match s with
  | EmptyString => []
  | String c s => c :: (list_of_string s)
  end.

Definition string_of_list (xs : list ascii) : string :=
  fold_right String EmptyString xs.

Definition token := string.

Fixpoint tokenize_helper (cls : chartype) (acc xs : list ascii)
                       : list (list ascii) :=
  let tk := match acc with [] => [] | _::_ => [rev acc] end in
  match xs with
  | [] => tk
  | (x::xs') =>
    match cls, classifyChar x, x with
    | _, _, "("      =>
      tk ++ ["("]::(tokenize_helper other [] xs')
    | _, _, ")"      =>
      tk ++ [")"]::(tokenize_helper other [] xs')
    | _, white, _    =>
      tk ++ (tokenize_helper white [] xs')
    | alpha,alpha,x  =>
      tokenize_helper alpha (x::acc) xs'
    | digit,digit,x  =>
      tokenize_helper digit (x::acc) xs'
    | other,other,x  =>
      tokenize_helper other (x::acc) xs'
    | _,tp,x         =>
      tk ++ (tokenize_helper tp [x] xs')
    end
  end %char.

Definition tokenize (s : string) : list string :=
  map string_of_list (tokenize_helper white [] (list_of_string s)).



Lemma tokenize_example_string_4 : tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].

Proof.
(* We will proceed by induction on the input string.
*)
  induction s as [|x s' IHs'].
- (* Base case: Empty string.
*)
    simpl.
reflexivity.
- (* Inductive case: Non-empty string.
*)
    simpl.
(* We will split the proof into several subgoals.
*)
    destruct (classifyChar x) as [cls].
- (* Subgoal: If x is a white space, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
- (* Subgoal: If x is an alpha character, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
- (* Subgoal: If x is a digit, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
- (* Subgoal: If x is an other character, then the result is the same as tokenizing the rest of the string.
*)
      simpl.
rewrite IHs'.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #52)
Error in step "induction s as [|x s' IHs'].".
Message: The variable s was not found in the current
environment..
Goal: tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].


TRYING TO PROVE LEMMA
Lemma tokenize_example_string_5 : tokenize "abc12=3  223*(3+(a+c))" =
["abc"%string; "12"%string; "="%string; "3"%string;
 "223"%string; "*"%string; "("%string; "3"%string;
 "+"%string; "("%string; "a"%string; "+"%string;
 "c"%string; ")"%string; ")"%string].


Error proving tokenize_ex1
MAX LEMMA DEPTH REACHED. GIVING UP.