PROVING auto_example_5'
ATTEMPTED EXAMPLE PROOF (LEMMAS USED: 0)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Example auto_example_5' : forall (P Q R S T U W: Prop),
  (U -> T) ->
  (W -> U) ->
  (R -> S) ->
  (S -> T) ->
  (P -> R) ->
  (U -> T) ->
  P ->
  T.

Proof.
(*
     We will proceed by induction on the constructors of the
     propositions P, Q, R, S, T, U, and W.
*)
  intros.
induction U, W, R, S, T, P as [ | P U' IHU' | P Q IHQ | P R IHR | P S IHS | P T IHT | P U IHU].
- (* U -> T *)
    intros.
apply IHU'.
assumption.
- (* W -> U *)
    intros.
apply IHU.
assumption.
- (* R -> S *)
    intros.
apply IHS.
assumption.
- (* S -> T *)
    intros.
apply IHT.
assumption.
- (* P -> R *)
    intros.
apply IHR.
assumption.
- (* U -> T *)
    intros.
apply IHU'.
assumption.
- (* P *)
    intros.
apply IHR.
assumption.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN EXAMPLE PROOF (FRAGMENT #148)
Error in step "induction U, W, R, S, T, P as [ | P U' IHU' | P Q IHQ | P R IHR | P S IHS | P T IHT | P U IHU].".
Message: Not an inductive definition..
Goal: T.


TRYING TO PROVE LEMMA
Lemma property_implication_transitivity_0 : forall P Q R S T U W : Prop, forall H : U -> T, forall H0 : W -> U, forall H1 : R -> S, forall H2 : S -> T, forall H3 : P -> R, forall H4 : U -> T, forall H5 : P, T.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Lemma property_implication_transitivity_0 : forall P Q R S T U W : Prop, forall H : U -> T, forall H0 : W -> U, forall H1 : R -> S, forall H2 : S -> T, forall H3 : P -> R, forall H4 : U -> T, forall H5 : P, T.

Proof.
(* We will apply the implication transitivity rule (H3, H4, H5) to obtain the result.
*)
  apply (H3 H5).
(* Now, we will apply the implication transitivity rule (H1, H2, H4) to obtain the result.
*)
  apply (H1 (H2 H4)).
(* Finally, we will apply the implication transitivity rule (H0, H1, H4) to obtain the result.
*)
  apply (H0 (H1 H4)).
(* The result follows.
*)

Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #146)
Error in step "apply (H3 H5).".
Message: The variable H3 was not found in the current
environment..
Goal: forall P : Prop,
Prop ->
forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.


TRYING TO PROVE LEMMA
Lemma property_chain_transitivity_1 : forall P : Prop,
Prop ->
forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Lemma property_chain_transitivity_1 : forall P : Prop,
Prop ->
forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the proposition P.
*)
  intros P H.
(* We will also need to use the axiom of propositional extensionality.
*)
  apply (propositional_extensionality P).
(* Now we will proceed by cases on P.
*)
  intros P_eq_R_or_S.
(* We will split into two subgoals based on P_eq_R_or_S.
*)
  destruct P_eq_R_or_S as [P_eq_R | P_eq_S].
- (* Case 1: P = R *)
    (* We will instantiate the existential variable R with P.
*)
    specialize (H P_eq_R).
(* Now we have H : (P -> R) -> (R -> S) -> (S -> T) -> (U -> T) -> P -> T.
*)
    (* We will instantiate the first existential variable with P_eq_R.
*)
    specialize (H P_eq_R).
(* Now we have H : (R -> S) -> (S -> T) -> (U -> T) -> P -> T.
*)
    (* We will instantiate the first existential variable with R_eq_S.
*)
    specialize (H R_eq_S).
(* Now we have H : (S -> T) -> (U -> T) -> P -> T.
*)
    (* We will instantiate the first existential variable with S_eq_T.
*)
    specialize (H S_eq_T).
(* Now we have H : (U -> T) -> P -> T.
*)
    (* We will instantiate the first existential variable with U_eq_T.
*)
    specialize (H U_eq_T).
(* Now we have H : P -> T.
*)
    (* We will instantiate the first existential variable with P_eq_T.
*)
    specialize (H P_eq_T).
(* Now we have H : T.
*)
    (* We will use the axiom of propositional extensionality to show that T is equivalent to P.
*)
    apply (propositional_extensional
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #148)
Error in step "apply (propositional_extensionality P).".
Message: The variable propositional_extensionality
was not found in the current environment..
Goal: forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.


TRYING TO PROVE LEMMA
Lemma lemma_implication_transitivity_2 : forall P H : Prop, forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Lemma lemma_implication_transitivity_2 : forall P H : Prop, forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the constructors of the implications.
*)
  intros P H R S T U W.
intros H1 H2 H3 H4 H5 H6 P.
(* We will first prove that (P -> R) is true.
*)
  apply H5.
(* Now, we will prove that (U -> T) is true.
*)
  apply H6.
(* We will now prove that (R -> S) is true.
*)
  apply H3.
(* We will now prove that (S -> T) is true.
*)
  apply H4.
(* We will now prove that (U -> T) is true.
*)
  apply H2.
(* We will now prove that (W -> U) is true.
*)
  apply H1.
(* Now, we have proven all the necessary implications.
*)
  (* Therefore, we can conclude that P -> T is true.
*)
  apply H5.
(* Now, we have proven that P -> T is true.
*)
  (* Therefore, we can conclude that T is true.
*)
  apply H6.
(* Now, we have proven that T is true.
*)
  (* Therefore, we can conclude that P -> T is true.
*)
  apply H5.
(* Now, we have proven that P -> T is true.
*)
  (* Therefore, we can conclude that T is true.
*)
  apply H6.
(* Now, we have proven that T is true.
*)
  (* Therefore, we can conclude that P -> T is true.
*)
  apply H5.
(* Now, we have proven that P -> T is true.
*)
  (* Therefore, we can conclude that T is true.
*)
  apply H6.
(* Now, we have proven that T is true.
*)
  (* Therefore, we can conclude that P -> T is true.
*)
  apply H5.
(* Now, we have proven that P -> T is true.
*)
  (* Therefore, we can conclude that T is true.
*)
  apply H6.
(* Now, we have proven that T is true.
*)
  (* Therefore, we
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #148)
Error in step "intros H1 H2 H3 H4 H5 H6 P.".
Message: P is already used..
Goal: (U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.


TRYING TO PROVE LEMMA
Lemma lemma_implication_transitivity_3 : forall P H R S T U W : Prop, (U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Lemma lemma_implication_transitivity_3 : forall P H R S T U W : Prop, (U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the proposition P.
*)
  intros P H R S T U W f g h i j p.
(* We will then apply the hypothesis (P -> R) to p.
*)
  apply (h p).
(* We will then apply the hypothesis (R -> S) to the result.
*)
  apply (i _).
(* We will then apply the hypothesis (S -> T) to the result.
*)
  apply (j _).
(* We will then apply the hypothesis (U -> T) to the result.
*)
  apply (f _).
(* We will then apply the hypothesis (W -> U) to p.
*)
  apply (g p).
(* We will then apply the hypothesis (U -> T) to the result.
*)
  apply (f _).
(* We will then apply the hypothesis (W -> U) to p.
*)
  apply (g p).
(* We will then apply the hypothesis (U -> T) to the result.
*)
  apply (f _).
(* We will then apply the hypothesis (W -> U) to p.
*)
  apply (g p).
(* We will then apply the hypothesis (U -> T) to the result.
*)
  apply (f _).
(* We will then apply the hypothesis (W -> U) to p.
*)
  apply (g p).
(* We will then apply the hypothesis (U -> T) to the result.
*)
  apply (f _).
(* We will then apply the hypothesis (W -> U) to p.
*)
  apply (g p).
(* We will then apply the hypothesis (U -> T) to the result.
*)
  apply (f _).
(* We will then apply the hypothesis (W -> U) to p.
*)
  apply (g p).
(* We will then apply the hypothesis (U -> T
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #148)
Error in step "apply (h p).".
Message: In environment
P, H, R, S, T, U, W : Prop
f : U -> T
g : W -> U
h : R -> S
i : S -> T
j : P -> R
p : U -> T
The term "p" has type "U -> T"
while it is expected to have type "R"..
Goal: P -> T.


TRYING TO PROVE LEMMA
Lemma lemma_composition_of_functions_4 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, P -> T.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Lemma lemma_composition_of_functions_4 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, P -> T.

Proof.
(* The goal is to prove P -> T.
We will use the given functions and the
     hypothesis P -> R to prove this.
*)
  intros P H R S T U W f g h i j p P_to_R.
(* We apply the function j to the hypothesis P_to_R to obtain a term of type R.
*)
  apply (j (P_to_R p)).
(* We now need to prove R -> T.
We will use the functions h, i, and the
     hypothesis P -> S to prove this.
*)
  intros R_to_S.
(* We apply the function h to R_to_S to obtain a term of type S.
*)
  apply (h (R_to_S p)).
(* We now need to prove S -> T.
We will use the functions i and the
     hypothesis P -> R to prove this.
*)
  intros S_to_T.
(* We apply the function i to S_to_T to obtain a term of type T.
*)
  apply (i (S_to_T p)).
(* The proof is now complete.
*)
  
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #148)
Error in step "apply (j (P_to_R p)).".
Message: Illegal application (Non-functional construction): 
The expression "P_to_R" of type 
"P" cannot be applied to the term
 "p" : "U -> T".
Goal: T.


TRYING TO PROVE LEMMA
Lemma helper_lemma_composition_of_functions_5 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, forall P_to_R : P, T.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 6)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Lemma helper_lemma_composition_of_functions_5 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, forall P_to_R : P, T.

Proof.
intros P H R S T U W f g h i j p P_to_R.
apply (i (h (j P_to_R))).
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED LEMMA PROOF (LEMMAS USED: 6)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Lemma helper_lemma_composition_of_functions_5 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, forall P_to_R : P, T.

Proof.
intros P H R S T U W f g h i j p P_to_R.
apply (i (h (j P_to_R))).
Qed.

Lemma lemma_composition_of_functions_4 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, P -> T.

Proof.
(* The goal is to prove P -> T.
We will use the given functions and the
     hypothesis P -> R to prove this.
*)
  intros P H R S T U W f g h i j p P_to_R.
(* We apply the function j to the hypothesis P_to_R to obtain a term of type R.
*)
  apply (@helper_lemma_composition_of_functions_5 P H R S T U W f g h i j p P_to_R).
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Lemma helper_lemma_composition_of_functions_5 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, forall P_to_R : P, T.

Proof.
intros P H R S T U W f g h i j p P_to_R.
apply (i (h (j P_to_R))).
Qed.

Lemma lemma_composition_of_functions_4 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, P -> T.

Proof.
(* The goal is to prove P -> T.
We will use the given functions and the
     hypothesis P -> R to prove this.
*)
  intros P H R S T U W f g h i j p P_to_R.
(* We apply the function j to the hypothesis P_to_R to obtain a term of type R.
*)
  apply (@helper_lemma_composition_of_functions_5 P H R S T U W f g h i j p P_to_R).
Qed.

Lemma lemma_implication_transitivity_3 : forall P H R S T U W : Prop, (U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the proposition P.
*)
  intros P H R S T U W f g h i j p.
(* We will then apply the hypothesis (P -> R) to p.
*)
  apply (@lemma_composition_of_functions_4 P H R S T U W f g h i j p).
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Lemma helper_lemma_composition_of_functions_5 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, forall P_to_R : P, T.

Proof.
intros P H R S T U W f g h i j p P_to_R.
apply (i (h (j P_to_R))).
Qed.

Lemma lemma_composition_of_functions_4 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, P -> T.

Proof.
(* The goal is to prove P -> T.
We will use the given functions and the
     hypothesis P -> R to prove this.
*)
  intros P H R S T U W f g h i j p P_to_R.
(* We apply the function j to the hypothesis P_to_R to obtain a term of type R.
*)
  apply (@helper_lemma_composition_of_functions_5 P H R S T U W f g h i j p P_to_R).
Qed.

Lemma lemma_implication_transitivity_3 : forall P H R S T U W : Prop, (U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the proposition P.
*)
  intros P H R S T U W f g h i j p.
(* We will then apply the hypothesis (P -> R) to p.
*)
  apply (@lemma_composition_of_functions_4 P H R S T U W f g h i j p).
Qed.

Lemma lemma_implication_transitivity_2 : forall P H : Prop, forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the constructors of the implications.
*)
  intros P H R S T U W.
apply (@lemma_implication_transitivity_3 P H R S T U W).
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Lemma helper_lemma_composition_of_functions_5 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, forall P_to_R : P, T.

Proof.
intros P H R S T U W f g h i j p P_to_R.
apply (i (h (j P_to_R))).
Qed.

Lemma lemma_composition_of_functions_4 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, P -> T.

Proof.
(* The goal is to prove P -> T.
We will use the given functions and the
     hypothesis P -> R to prove this.
*)
  intros P H R S T U W f g h i j p P_to_R.
(* We apply the function j to the hypothesis P_to_R to obtain a term of type R.
*)
  apply (@helper_lemma_composition_of_functions_5 P H R S T U W f g h i j p P_to_R).
Qed.

Lemma lemma_implication_transitivity_3 : forall P H R S T U W : Prop, (U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the proposition P.
*)
  intros P H R S T U W f g h i j p.
(* We will then apply the hypothesis (P -> R) to p.
*)
  apply (@lemma_composition_of_functions_4 P H R S T U W f g h i j p).
Qed.

Lemma lemma_implication_transitivity_2 : forall P H : Prop, forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the constructors of the implications.
*)
  intros P H R S T U W.
apply (@lemma_implication_transitivity_3 P H R S T U W).
Qed.

Lemma property_chain_transitivity_1 : forall P : Prop,
Prop ->
forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the proposition P.
*)
  intros P H.
(* We will also need to use the axiom of propositional extensionality.
*)
  apply (@lemma_implication_transitivity_2 P H).
- (* Case 1: P = R *)
    (* We will instantiate the existential variable R with P.
*)
    specialize (H P_eq_R).
(* Now we have H : (P -> R) -> (R -> S) -> (S -> T) -> (U -> T) -> P -> T.
*)
    (* We will instantiate the first existential variable with P_eq_R.
*)
    specialize (H P_eq_R).
(* Now we have H : (R -> S) -> (S -> T) -> (U -> T) -> P -> T.
*)
    (* We will instantiate the first existential variable with R_eq_S.
*)
    specialize (H R_eq_S).
(* Now we have H : (S -> T) -> (U -> T) -> P -> T.
*)
    (* We will instantiate the first existential variable with S_eq_T.
*)
    specialize (H S_eq_T).
(* Now we have H : (U -> T) -> P -> T.
*)
    (* We will instantiate the first existential variable with U_eq_T.
*)
    specialize (H U_eq_T).
(* Now we have H : P -> T.
*)
    (* We will instantiate the first existential variable with P_eq_T.
*)
    specialize (H P_eq_T).
(* Now we have H : T.
*)
    (* We will use the axiom of propositional extensionality to show that T is equivalent to P.
*)
    apply (propositional_extensional

Qed.

Outdated contents in ..cache: recomputing
Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Lemma helper_lemma_composition_of_functions_5 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, forall P_to_R : P, T.

Proof.
intros P H R S T U W f g h i j p P_to_R.
apply (i (h (j P_to_R))).
Qed.

Lemma lemma_composition_of_functions_4 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, P -> T.

Proof.
(* The goal is to prove P -> T.
We will use the given functions and the
     hypothesis P -> R to prove this.
*)
  intros P H R S T U W f g h i j p P_to_R.
(* We apply the function j to the hypothesis P_to_R to obtain a term of type R.
*)
  apply (@helper_lemma_composition_of_functions_5 P H R S T U W f g h i j p P_to_R).
Qed.

Lemma lemma_implication_transitivity_3 : forall P H R S T U W : Prop, (U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the proposition P.
*)
  intros P H R S T U W f g h i j p.
(* We will then apply the hypothesis (P -> R) to p.
*)
  apply (@lemma_composition_of_functions_4 P H R S T U W f g h i j p).
Qed.

Lemma lemma_implication_transitivity_2 : forall P H : Prop, forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the constructors of the implications.
*)
  intros P H R S T U W.
apply (@lemma_implication_transitivity_3 P H R S T U W).
Qed.

Lemma property_chain_transitivity_1 : forall P : Prop,
Prop ->
forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.




Proof.
(* We will proceed by induction on the proposition P.
*)
  
intros P H.
(* We will also need to use the axiom of propositional extensionality.
*)
  
apply (@lemma_implication_transitivity_2 P H).
Qed.

Lemma property_implication_transitivity_0 : forall P Q R S T U W : Prop, forall H : U -> T, forall H0 : W -> U, forall H1 : R -> S, forall H2 : S -> T, forall H3 : P -> R, forall H4 : U -> T, forall H5 : P, T.

Proof.
(* We will apply the implication transitivity rule (H3, H4, H5) to obtain the result.
*)
  apply (@property_chain_transitivity_1 ).
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED EXAMPLE PROOF (LEMMAS USED: 1)


Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Lia.
From LF Require Import Maps.
From LF Require Import Imp.



Theorem ceval_deterministic: forall c st st1 st2,
  st =[ c ]=> st1  ->
  st =[ c ]=> st2 ->
  st1 = st2.
Proof.
  intros c st st1 st2 E1 E2;
  generalize dependent st2;
  induction E1; intros st2 E2; inversion E2; subst.
  -  reflexivity.
  -  reflexivity.
  - 
    rewrite (IHE1_1 st'0 H1) in *.
    apply IHE1_2. assumption.
  
  - 
    apply IHE1. assumption.
  - 
    rewrite H in H5. discriminate.
  
  - 
    rewrite H in H5. discriminate.
  - 
    apply IHE1. assumption.
  
  - 
    reflexivity.
  - 
    rewrite H in H2. discriminate.
  
  - 
    rewrite H in H4. discriminate.
  - 
    rewrite (IHE1_1 st'0 H3) in *.
    apply IHE1_2. assumption.  Qed.






Example auto_example_1 : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  intros P Q R H1 H2 H3.
  apply H2. apply H1. assumption.
Qed.



Example auto_example_1' : forall (P Q R: Prop),
  (P -> Q) -> (Q -> R) -> P -> R.
Proof.
  auto.
Qed.







Example auto_example_2 : forall P Q R S T U : Prop,
  (P -> Q) ->
  (P -> R) ->
  (T -> R) ->
  (S -> T -> U) ->
  ((P -> Q) -> (P -> S)) ->
  T ->
  P ->
  U.
Proof. auto. Qed.




Example auto_example_3 : forall (P Q R S T U: Prop),
  (P -> Q) ->
  (Q -> R) ->
  (R -> S) ->
  (S -> T) ->
  (T -> U) ->
  P ->
  U.
Proof.
  
  auto.

  
  

  
  auto 6.
Qed.



Example auto_example_4 : forall P Q R : Prop,
  Q ->
  (Q -> R) ->
  P \/ (Q /\ R).
Proof. auto. Qed.



Example auto_example_5: 2 = 2.
Proof.
  auto.
Qed.



Lemma helper_lemma_composition_of_functions_5 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, forall P_to_R : P, T.

Proof.
intros P H R S T U W f g h i j p P_to_R.
apply (i (h (j P_to_R))).
Qed.

Lemma lemma_composition_of_functions_4 : forall P H R S T U W : Prop, forall f : U -> T, forall g : W -> U, forall h : R -> S, forall i : S -> T, forall j : P -> R, forall p : U -> T, P -> T.

Proof.
(* The goal is to prove P -> T.
We will use the given functions and the
     hypothesis P -> R to prove this.
*)
  intros P H R S T U W f g h i j p P_to_R.
(* We apply the function j to the hypothesis P_to_R to obtain a term of type R.
*)
  apply (@helper_lemma_composition_of_functions_5 P H R S T U W f g h i j p P_to_R).
Qed.

Lemma lemma_implication_transitivity_3 : forall P H R S T U W : Prop, (U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the proposition P.
*)
  intros P H R S T U W f g h i j p.
(* We will then apply the hypothesis (P -> R) to p.
*)
  apply (@lemma_composition_of_functions_4 P H R S T U W f g h i j p).
Qed.

Lemma lemma_implication_transitivity_2 : forall P H : Prop, forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.

Proof.
(* We will proceed by induction on the constructors of the implications.
*)
  intros P H R S T U W.
apply (@lemma_implication_transitivity_3 P H R S T U W).
Qed.

Lemma property_chain_transitivity_1 : forall P : Prop,
Prop ->
forall R S T U W : Prop,
(U -> T) ->
(W -> U) ->
(R -> S) -> (S -> T) -> (P -> R) -> (U -> T) -> P -> T.




Proof.
(* We will proceed by induction on the proposition P.
*)
  
intros P H.
(* We will also need to use the axiom of propositional extensionality.
*)
  
apply (@lemma_implication_transitivity_2 P H).
Qed.

Lemma property_implication_transitivity_0 : forall P Q R S T U W : Prop, forall H : U -> T, forall H0 : W -> U, forall H1 : R -> S, forall H2 : S -> T, forall H3 : P -> R, forall H4 : U -> T, forall H5 : P, T.

Proof.
(* We will apply the implication transitivity rule (H3, H4, H5) to obtain the result.
*)
  apply (@property_chain_transitivity_1 ).
Qed.

Example auto_example_5' : forall (P Q R S T U W: Prop),
  (U -> T) ->
  (W -> U) ->
  (R -> S) ->
  (S -> T) ->
  (P -> R) ->
  (U -> T) ->
  P ->
  T.

Proof.
(*
     We will proceed by induction on the constructors of the
     propositions P, Q, R, S, T, U, and W.
*)
  intros.
apply (@property_implication_transitivity_0 P Q R S T U W H H0 H1 H2 H3 H4 H5).
- (* U -> T *)
    intros.
apply IHU'.
assumption.
- (* W -> U *)
    intros.
apply IHU.
assumption.
- (* R -> S *)
    intros.
apply IHS.
assumption.
- (* S -> T *)
    intros.
apply IHT.
assumption.
- (* P -> R *)
    intros.
apply IHR.
assumption.
- (* U -> T *)
    intros.
apply IHU'.
assumption.
- (* P *)
    intros.
apply IHR.
assumption.
Qed.

Outdated contents in ..cache: recomputing
Outdated contents in ..cache: recomputing
EXAMPLE PROOF IS VALID

