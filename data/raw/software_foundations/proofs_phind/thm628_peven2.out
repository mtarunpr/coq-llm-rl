PROVING peven2
ATTEMPTED EXAMPLE PROOF (LEMMAS USED: 0)







From Coq Require Import Lia.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.PeanoNat.
Import Nat.
From Coq Require Import Arith.EqNat.
From LF Require Import Imp Maps.



Fixpoint ceval_step1 (st : state) (c : com) : state :=
  match c with
    | <{ skip }> =>
        st
    | <{ l := a1 }> =>
        (l !-> aeval st a1 ; st)
    | <{ c1 ; c2 }> =>
        let st' := ceval_step1 st c1 in
        ceval_step1 st' c2
    | <{ if b then c1 else c2 end }> =>
        if (beval st b)
          then ceval_step1 st c1
          else ceval_step1 st c2
    | <{ while b1 do c1 end }> =>
        st  
  end.








Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :=
  match i with
  | O => empty_st
  | S i' =>
    match c with
      | <{ skip }> =>
          st
      | <{ l := a1 }> =>
          (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          let st' := ceval_step2 st c1 i' in
          ceval_step2 st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step2 st c1 i'
            else ceval_step2 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then let st' := ceval_step2 st c1 i' in
               ceval_step2 st' c i'
          else st
    end
  end.



Fixpoint ceval_step3 (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          match (ceval_step3 st c1 i') with
          | Some st' => ceval_step3 st' c2 i'
          | None => None
          end
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step3 st c1 i'
            else ceval_step3 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then match (ceval_step3 st c1 i') with
               | Some st' => ceval_step3 st' c i'
               | None => None
               end
          else Some st
    end
  end.



Notation "'LETOPT' x <== e1 'IN' e2"
   := (match e1 with
         | Some x => e2
         | None => None
       end)
   (right associativity, at level 60).

Fixpoint ceval_step (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          LETOPT st' <== ceval_step st c1 i' IN
          ceval_step st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step st c1 i'
            else ceval_step st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then LETOPT st' <== ceval_step st c1 i' IN
               ceval_step st' c i'
          else Some st
    end
  end.

Definition test_ceval (st:state) (c:com) :=
  match ceval_step st c 500 with
  | None    => None
  | Some st => Some (st X, st Y, st Z)
  end.

Example example_test_ceval :
     test_ceval empty_st

     <{ X := 2;
        if (X <= 1)
        then Y := 3
        else Z := 4
        end }>

     = Some (2, 0, 4).
Proof. reflexivity. Qed.



Definition pup_to_n : com
  := <{ Y := 0;
        while X > 0 do
          Y := Y + X;
          X := X - 1
        end }>.

Example pup_to_n_1 :
  test_ceval (X !-> 5) pup_to_n
  = Some (0, 15, 0).
Proof. reflexivity. Qed.




Definition peven : com
  := <{ Z := 0;
        while X > 0 do
          if Z = 0 then Z := 1 else Z := 0 end;
          X := X - 1
        end }>.

Example peven0 :
  test_ceval (X !-> 0) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven1 :
  test_ceval (X !-> 1) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.



Example peven2 : test_ceval (X !-> 2) peven = Some (0, 0, 0).

Proof.
intros.
unfold test_ceval.
unfold peven.
unfold pup_to_n.
unfold pup_to_n_1.
unfold peven0.
unfold peven1.
unfold empty_st.
unfold ceval_step.
unfold ceval_step1.
unfold ceval_step2.
unfold ceval_step3.
unfold aeval.
unfold beval.
unfold aeval_times.
unfold aeval_plus.
unfold aeval_minus.
unfold aeval_equal.
unfold aeval_le.
unfold aeval_gt.
unfold aeval_ge.
unfold aeval_ne.
unfold aeval_and.
unfold aeval_or.
unfold aeval_not.
unfold aeval_if.
unfold aeval_while.
unfold aeval_seq.
unfold aeval_assign.
unfold aeval_var.
unfold aeval_num.
unfold aeval_true.
unfold aeval_false.
unfold aeval_succ.
unfold aeval_pred.
unfold aeval_is_zero.
unfold aeval_if_else.
unfold aeval_while_do.
unfold aeval_seq_plus.
unfold aeval_seq_minus.
unfold aeval_seq_times.
unfold aeval_seq_equal.
unfold aeval_seq_le.
unfold aeval_seq_gt.
unfold aeval_seq_ge.
unfold aeval_seq_ne.
unfold aeval_seq_and.
unfold aeval_seq_or.
unfold aeval_seq_not.
unfold aeval_seq_if.
unfold aeval_seq_while.
unfold aeval_seq_seq.
unfold aeval_seq_assign.
unfold aeval_seq_var.
unfold aeval_seq_num.
unfold aeval_seq_true.
unfold aeval_seq_false.
unfold
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN EXAMPLE PROOF (FRAGMENT #78)
Error in step "unfold pup_to_n_1.".
Message: pup_to_n_1 is opaque..
Goal: LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).


TRYING TO PROVE LEMMA
Lemma lemma_even_number_check_and_reset_0 : LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)







From Coq Require Import Lia.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.PeanoNat.
Import Nat.
From Coq Require Import Arith.EqNat.
From LF Require Import Imp Maps.



Fixpoint ceval_step1 (st : state) (c : com) : state :=
  match c with
    | <{ skip }> =>
        st
    | <{ l := a1 }> =>
        (l !-> aeval st a1 ; st)
    | <{ c1 ; c2 }> =>
        let st' := ceval_step1 st c1 in
        ceval_step1 st' c2
    | <{ if b then c1 else c2 end }> =>
        if (beval st b)
          then ceval_step1 st c1
          else ceval_step1 st c2
    | <{ while b1 do c1 end }> =>
        st  
  end.








Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :=
  match i with
  | O => empty_st
  | S i' =>
    match c with
      | <{ skip }> =>
          st
      | <{ l := a1 }> =>
          (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          let st' := ceval_step2 st c1 i' in
          ceval_step2 st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step2 st c1 i'
            else ceval_step2 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then let st' := ceval_step2 st c1 i' in
               ceval_step2 st' c i'
          else st
    end
  end.



Fixpoint ceval_step3 (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          match (ceval_step3 st c1 i') with
          | Some st' => ceval_step3 st' c2 i'
          | None => None
          end
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step3 st c1 i'
            else ceval_step3 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then match (ceval_step3 st c1 i') with
               | Some st' => ceval_step3 st' c i'
               | None => None
               end
          else Some st
    end
  end.



Notation "'LETOPT' x <== e1 'IN' e2"
   := (match e1 with
         | Some x => e2
         | None => None
       end)
   (right associativity, at level 60).

Fixpoint ceval_step (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          LETOPT st' <== ceval_step st c1 i' IN
          ceval_step st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step st c1 i'
            else ceval_step st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then LETOPT st' <== ceval_step st c1 i' IN
               ceval_step st' c i'
          else Some st
    end
  end.

Definition test_ceval (st:state) (c:com) :=
  match ceval_step st c 500 with
  | None    => None
  | Some st => Some (st X, st Y, st Z)
  end.

Example example_test_ceval :
     test_ceval empty_st

     <{ X := 2;
        if (X <= 1)
        then Y := 3
        else Z := 4
        end }>

     = Some (2, 0, 4).
Proof. reflexivity. Qed.



Definition pup_to_n : com
  := <{ Y := 0;
        while X > 0 do
          Y := Y + X;
          X := X - 1
        end }>.

Example pup_to_n_1 :
  test_ceval (X !-> 5) pup_to_n
  = Some (0, 15, 0).
Proof. reflexivity. Qed.




Definition peven : com
  := <{ Z := 0;
        while X > 0 do
          if Z = 0 then Z := 1 else Z := 0 end;
          X := X - 1
        end }>.

Example peven0 :
  test_ceval (X !-> 0) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven1 :
  test_ceval (X !-> 1) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.



Lemma lemma_even_number_check_and_reset_0 : LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).

Proof.
(* We will first prove a lemma that will help us in the main proof.
*)
  Lemma lemma_even_number_check_and_reset_0_helper : LETOPT st <==
  ceval_step (X !-> 2)
    <{
    Z := 0;
    while X > 0
    do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
    end }> 500 IN Some (st X, st Y, st Z) =
  Some (0, 0, 1).
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #70)
Error after step "Proof.".
Message: There are still unproven goals.
Goal: LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).


TRYING TO PROVE LEMMA
Lemma lemma_even_number_check_and_reset_1 : LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)







From Coq Require Import Lia.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.PeanoNat.
Import Nat.
From Coq Require Import Arith.EqNat.
From LF Require Import Imp Maps.



Fixpoint ceval_step1 (st : state) (c : com) : state :=
  match c with
    | <{ skip }> =>
        st
    | <{ l := a1 }> =>
        (l !-> aeval st a1 ; st)
    | <{ c1 ; c2 }> =>
        let st' := ceval_step1 st c1 in
        ceval_step1 st' c2
    | <{ if b then c1 else c2 end }> =>
        if (beval st b)
          then ceval_step1 st c1
          else ceval_step1 st c2
    | <{ while b1 do c1 end }> =>
        st  
  end.








Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :=
  match i with
  | O => empty_st
  | S i' =>
    match c with
      | <{ skip }> =>
          st
      | <{ l := a1 }> =>
          (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          let st' := ceval_step2 st c1 i' in
          ceval_step2 st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step2 st c1 i'
            else ceval_step2 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then let st' := ceval_step2 st c1 i' in
               ceval_step2 st' c i'
          else st
    end
  end.



Fixpoint ceval_step3 (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          match (ceval_step3 st c1 i') with
          | Some st' => ceval_step3 st' c2 i'
          | None => None
          end
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step3 st c1 i'
            else ceval_step3 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then match (ceval_step3 st c1 i') with
               | Some st' => ceval_step3 st' c i'
               | None => None
               end
          else Some st
    end
  end.



Notation "'LETOPT' x <== e1 'IN' e2"
   := (match e1 with
         | Some x => e2
         | None => None
       end)
   (right associativity, at level 60).

Fixpoint ceval_step (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          LETOPT st' <== ceval_step st c1 i' IN
          ceval_step st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step st c1 i'
            else ceval_step st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then LETOPT st' <== ceval_step st c1 i' IN
               ceval_step st' c i'
          else Some st
    end
  end.

Definition test_ceval (st:state) (c:com) :=
  match ceval_step st c 500 with
  | None    => None
  | Some st => Some (st X, st Y, st Z)
  end.

Example example_test_ceval :
     test_ceval empty_st

     <{ X := 2;
        if (X <= 1)
        then Y := 3
        else Z := 4
        end }>

     = Some (2, 0, 4).
Proof. reflexivity. Qed.



Definition pup_to_n : com
  := <{ Y := 0;
        while X > 0 do
          Y := Y + X;
          X := X - 1
        end }>.

Example pup_to_n_1 :
  test_ceval (X !-> 5) pup_to_n
  = Some (0, 15, 0).
Proof. reflexivity. Qed.




Definition peven : com
  := <{ Z := 0;
        while X > 0 do
          if Z = 0 then Z := 1 else Z := 0 end;
          X := X - 1
        end }>.

Example peven0 :
  test_ceval (X !-> 0) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven1 :
  test_ceval (X !-> 1) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.



Lemma lemma_even_number_check_and_reset_1 : LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).

Proof.
(* We will first prove that the state after executing the program is as expected.
*)
  intros st.
(* We will then prove that the value of X is 0.
*)
  assert (H : st X = 0).
(* We will use induction on the number of steps taken.
*)
    induction 500 as [ | n IHn].
(* Base case: n = 0.
*)
    - simpl.
reflexivity.
(* Inductive case: n = S n'.
*)
    - simpl.
(* We will consider the different cases for the command executed in a step.
*)
      destruct (ceval_step st _ 1) as [st' | st'].
- (* Case: skip.
*)
        simpl in H.
rewrite H in IHn.
subst.
- (* Case: l := a1.
*)
        simpl in H.
rewrite H in IHn.
subst.
- (* Case: c1 ; c2.
*)
        simpl in H.
rewrite H in IHn.
subst.
- (* Case: if b then c1 else c2 end.
*)
        simpl in H.
rewrite H in IHn.
subst.
- (* Case: while b1 do c1 end.
*)
        simpl in H.
rewrite H in IHn.
subst.
(* We will then prove that the value of Y is 0.
*)
    assert (H : st Y = 0).
(* We will use induction on the number of steps taken.
*)
      induction 500 as [ | n IHn].
(* Base case: n = 0.
*)
      - simpl.
reflexivity.
(* Inductive case: n = S n'.
*)
      - simpl.
(* We will consider the different cases for the command executed in a step.
*)
        destruct (ceval_step st _ 1) as [st' | st'].
- (* Case: skip.
*)
          simpl in H.
rewrite H in IHn.
subst.
- (* Case: l := a1.
*)
          simpl in H.
rewrite H in IHn.
subst.
- (* Case: c1
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #70)
Error in step "intros st.".
Message: No product even after head-reduction..
Goal: LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).


TRYING TO PROVE LEMMA
Lemma lemma_even_number_check_and_reset_2 : LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)







From Coq Require Import Lia.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.PeanoNat.
Import Nat.
From Coq Require Import Arith.EqNat.
From LF Require Import Imp Maps.



Fixpoint ceval_step1 (st : state) (c : com) : state :=
  match c with
    | <{ skip }> =>
        st
    | <{ l := a1 }> =>
        (l !-> aeval st a1 ; st)
    | <{ c1 ; c2 }> =>
        let st' := ceval_step1 st c1 in
        ceval_step1 st' c2
    | <{ if b then c1 else c2 end }> =>
        if (beval st b)
          then ceval_step1 st c1
          else ceval_step1 st c2
    | <{ while b1 do c1 end }> =>
        st  
  end.








Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :=
  match i with
  | O => empty_st
  | S i' =>
    match c with
      | <{ skip }> =>
          st
      | <{ l := a1 }> =>
          (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          let st' := ceval_step2 st c1 i' in
          ceval_step2 st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step2 st c1 i'
            else ceval_step2 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then let st' := ceval_step2 st c1 i' in
               ceval_step2 st' c i'
          else st
    end
  end.



Fixpoint ceval_step3 (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          match (ceval_step3 st c1 i') with
          | Some st' => ceval_step3 st' c2 i'
          | None => None
          end
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step3 st c1 i'
            else ceval_step3 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then match (ceval_step3 st c1 i') with
               | Some st' => ceval_step3 st' c i'
               | None => None
               end
          else Some st
    end
  end.



Notation "'LETOPT' x <== e1 'IN' e2"
   := (match e1 with
         | Some x => e2
         | None => None
       end)
   (right associativity, at level 60).

Fixpoint ceval_step (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          LETOPT st' <== ceval_step st c1 i' IN
          ceval_step st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step st c1 i'
            else ceval_step st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then LETOPT st' <== ceval_step st c1 i' IN
               ceval_step st' c i'
          else Some st
    end
  end.

Definition test_ceval (st:state) (c:com) :=
  match ceval_step st c 500 with
  | None    => None
  | Some st => Some (st X, st Y, st Z)
  end.

Example example_test_ceval :
     test_ceval empty_st

     <{ X := 2;
        if (X <= 1)
        then Y := 3
        else Z := 4
        end }>

     = Some (2, 0, 4).
Proof. reflexivity. Qed.



Definition pup_to_n : com
  := <{ Y := 0;
        while X > 0 do
          Y := Y + X;
          X := X - 1
        end }>.

Example pup_to_n_1 :
  test_ceval (X !-> 5) pup_to_n
  = Some (0, 15, 0).
Proof. reflexivity. Qed.




Definition peven : com
  := <{ Z := 0;
        while X > 0 do
          if Z = 0 then Z := 1 else Z := 0 end;
          X := X - 1
        end }>.

Example peven0 :
  test_ceval (X !-> 0) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven1 :
  test_ceval (X !-> 1) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.



Lemma lemma_even_number_check_and_reset_2 : LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).

Proof.
intros.
destruct (ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500) as [st' Hst'].
destruct (st' X) as [n Hn].
induction n as [|n' IHn'].
- simpl.
rewrite Hn.
reflexivity.
- simpl.
rewrite Hn.
rewrite IHn'.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #72)
Error in step "destruct (ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500) as [st' Hst'].".
Message: Expects a disjunctive pattern with 2 branches..
Goal: LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).


TRYING TO PROVE LEMMA
Lemma lemma_even_number_check_and_reset_3 : LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)







From Coq Require Import Lia.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.PeanoNat.
Import Nat.
From Coq Require Import Arith.EqNat.
From LF Require Import Imp Maps.



Fixpoint ceval_step1 (st : state) (c : com) : state :=
  match c with
    | <{ skip }> =>
        st
    | <{ l := a1 }> =>
        (l !-> aeval st a1 ; st)
    | <{ c1 ; c2 }> =>
        let st' := ceval_step1 st c1 in
        ceval_step1 st' c2
    | <{ if b then c1 else c2 end }> =>
        if (beval st b)
          then ceval_step1 st c1
          else ceval_step1 st c2
    | <{ while b1 do c1 end }> =>
        st  
  end.








Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :=
  match i with
  | O => empty_st
  | S i' =>
    match c with
      | <{ skip }> =>
          st
      | <{ l := a1 }> =>
          (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          let st' := ceval_step2 st c1 i' in
          ceval_step2 st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step2 st c1 i'
            else ceval_step2 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then let st' := ceval_step2 st c1 i' in
               ceval_step2 st' c i'
          else st
    end
  end.



Fixpoint ceval_step3 (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          match (ceval_step3 st c1 i') with
          | Some st' => ceval_step3 st' c2 i'
          | None => None
          end
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step3 st c1 i'
            else ceval_step3 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then match (ceval_step3 st c1 i') with
               | Some st' => ceval_step3 st' c i'
               | None => None
               end
          else Some st
    end
  end.



Notation "'LETOPT' x <== e1 'IN' e2"
   := (match e1 with
         | Some x => e2
         | None => None
       end)
   (right associativity, at level 60).

Fixpoint ceval_step (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          LETOPT st' <== ceval_step st c1 i' IN
          ceval_step st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step st c1 i'
            else ceval_step st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then LETOPT st' <== ceval_step st c1 i' IN
               ceval_step st' c i'
          else Some st
    end
  end.

Definition test_ceval (st:state) (c:com) :=
  match ceval_step st c 500 with
  | None    => None
  | Some st => Some (st X, st Y, st Z)
  end.

Example example_test_ceval :
     test_ceval empty_st

     <{ X := 2;
        if (X <= 1)
        then Y := 3
        else Z := 4
        end }>

     = Some (2, 0, 4).
Proof. reflexivity. Qed.



Definition pup_to_n : com
  := <{ Y := 0;
        while X > 0 do
          Y := Y + X;
          X := X - 1
        end }>.

Example pup_to_n_1 :
  test_ceval (X !-> 5) pup_to_n
  = Some (0, 15, 0).
Proof. reflexivity. Qed.




Definition peven : com
  := <{ Z := 0;
        while X > 0 do
          if Z = 0 then Z := 1 else Z := 0 end;
          X := X - 1
        end }>.

Example peven0 :
  test_ceval (X !-> 0) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven1 :
  test_ceval (X !-> 1) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.



Lemma lemma_even_number_check_and_reset_3 : LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).

Proof.
intros.
destruct (ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500) as [st' Hst'].
destruct (st' X) as [n Hn].
induction n as [|n' IHn'].
- simpl.
rewrite Hn.
reflexivity.
- simpl.
rewrite Hn.
rewrite IHn'.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #72)
Error in step "destruct (ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500) as [st' Hst'].".
Message: Expects a disjunctive pattern with 2 branches..
Goal: LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).


TRYING TO PROVE LEMMA
Lemma lemma_even_number_check_and_reset_4 : LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)







From Coq Require Import Lia.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.PeanoNat.
Import Nat.
From Coq Require Import Arith.EqNat.
From LF Require Import Imp Maps.



Fixpoint ceval_step1 (st : state) (c : com) : state :=
  match c with
    | <{ skip }> =>
        st
    | <{ l := a1 }> =>
        (l !-> aeval st a1 ; st)
    | <{ c1 ; c2 }> =>
        let st' := ceval_step1 st c1 in
        ceval_step1 st' c2
    | <{ if b then c1 else c2 end }> =>
        if (beval st b)
          then ceval_step1 st c1
          else ceval_step1 st c2
    | <{ while b1 do c1 end }> =>
        st  
  end.








Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :=
  match i with
  | O => empty_st
  | S i' =>
    match c with
      | <{ skip }> =>
          st
      | <{ l := a1 }> =>
          (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          let st' := ceval_step2 st c1 i' in
          ceval_step2 st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step2 st c1 i'
            else ceval_step2 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then let st' := ceval_step2 st c1 i' in
               ceval_step2 st' c i'
          else st
    end
  end.



Fixpoint ceval_step3 (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          match (ceval_step3 st c1 i') with
          | Some st' => ceval_step3 st' c2 i'
          | None => None
          end
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step3 st c1 i'
            else ceval_step3 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then match (ceval_step3 st c1 i') with
               | Some st' => ceval_step3 st' c i'
               | None => None
               end
          else Some st
    end
  end.



Notation "'LETOPT' x <== e1 'IN' e2"
   := (match e1 with
         | Some x => e2
         | None => None
       end)
   (right associativity, at level 60).

Fixpoint ceval_step (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          LETOPT st' <== ceval_step st c1 i' IN
          ceval_step st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step st c1 i'
            else ceval_step st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then LETOPT st' <== ceval_step st c1 i' IN
               ceval_step st' c i'
          else Some st
    end
  end.

Definition test_ceval (st:state) (c:com) :=
  match ceval_step st c 500 with
  | None    => None
  | Some st => Some (st X, st Y, st Z)
  end.

Example example_test_ceval :
     test_ceval empty_st

     <{ X := 2;
        if (X <= 1)
        then Y := 3
        else Z := 4
        end }>

     = Some (2, 0, 4).
Proof. reflexivity. Qed.



Definition pup_to_n : com
  := <{ Y := 0;
        while X > 0 do
          Y := Y + X;
          X := X - 1
        end }>.

Example pup_to_n_1 :
  test_ceval (X !-> 5) pup_to_n
  = Some (0, 15, 0).
Proof. reflexivity. Qed.




Definition peven : com
  := <{ Z := 0;
        while X > 0 do
          if Z = 0 then Z := 1 else Z := 0 end;
          X := X - 1
        end }>.

Example peven0 :
  test_ceval (X !-> 0) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven1 :
  test_ceval (X !-> 1) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.



Lemma lemma_even_number_check_and_reset_4 : LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).

Proof.
intros.
destruct (ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500) as [st' Hst'].
destruct (st' X) as [n Hn].
induction n as [|n' IHn'].
- simpl.
rewrite Hn.
reflexivity.
- simpl.
rewrite Hn.
rewrite IHn'.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #72)
Error in step "destruct (ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500) as [st' Hst'].".
Message: Expects a disjunctive pattern with 2 branches..
Goal: LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).


TRYING TO PROVE LEMMA
Lemma lemma_even_number_check_and_reset_5 : LETOPT st <==
ceval_step (X !-> 2)
  <{
  Z := 0;
  while X > 0
  do if Z = 0 then Z := 1 else Z := 0 end; X := X - 1
  end }> 500 IN Some (st X, st Y, st Z) =
Some (0, 0, 0).


Error proving peven2
MAX LEMMA DEPTH REACHED. GIVING UP.