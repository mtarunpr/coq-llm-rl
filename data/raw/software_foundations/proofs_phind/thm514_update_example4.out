PROVING update_example4
ATTEMPTED EXAMPLE PROOF (LEMMAS USED: 0)









From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.



Example update_example4 : examplemap' "bar" = true.

Proof.
(* We will use the definition of examplemap' to prove the theorem.
*)
  apply (t_update_same (t_update (t_empty false) "foo" true) "bar" true "bar").
(* The first argument of t_update_same is the map before the update.
*)
  apply (t_update_same (t_empty false) "foo" true "bar").
(* The second argument of t_update_same is the key that was updated.
*)
  apply (t_update_diff (t_empty false) "foo" true "bar").
(* The third argument of t_update_same is the new value of the key.
*)
  apply (t_update_same_key (t_empty false) "foo" true "bar").
(* The fourth argument of t_update_same is the key we are querying.
*)

Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN EXAMPLE PROOF (FRAGMENT #76)
Error in step "apply (t_update_same (t_update (t_empty false) "foo" true) "bar" true "bar").".
Message: No interpretation for string "bar"..
Goal: examplemap' "bar" = true.


TRYING TO PROVE LEMMA
Lemma examplemap_bar_is_true_0 : examplemap' "bar" = true.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)









From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.



Lemma examplemap_bar_is_true_0 : examplemap' "bar" = true.

Proof.
(* We will apply the definition of examplemap' to prove the lemma.
*)
  apply (examplemap' "bar").
(* This will reduce the goal to the following: *)
  (*   true = true *)
  (* Since true is equal to itself, this goal is trivially true.
*)
Defined.
```
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #76)
Error in step "apply (examplemap' "bar").".
Message: Unable to unify "bool" with
 "examplemap' "bar" = true"..
Goal: examplemap' "bar" = true.


TRYING TO PROVE LEMMA
Lemma examplemap_bar_is_true_1 : examplemap' "bar" = true.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)









From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.



Lemma examplemap_bar_is_true_1 : examplemap' "bar" = true.

Proof.
(* We will apply the definition of examplemap' to prove the lemma.
*)
  apply (examplemap' "bar").
(* This will reduce the goal to the following subgoal: *)
  (*   true = true *)
  (* Since true is equal to itself, this subgoal is trivially true.
*)
  reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #76)
Error in step "apply (examplemap' "bar").".
Message: Unable to unify "bool" with
 "examplemap' "bar" = true"..
Goal: examplemap' "bar" = true.


TRYING TO PROVE LEMMA
Lemma examplemap_bar_is_true_2 : examplemap' "bar" = true.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)









From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.



Lemma examplemap_bar_is_true_2 : examplemap' "bar" = true.

Proof.
(* We will apply the definition of examplemap' to prove the lemma.
*)
  apply (t_update_same (t_update (t_empty false) "foo" true) "bar" true "bar").
(* The first argument of t_update_same is the map before the update.
*)
  apply (t_update_same (t_empty false) "foo" true "bar").
(* The second argument of t_update_same is the key we are updating.
*)
  apply (t_update_diff (t_empty false) "foo" true "bar").
(* The third argument of t_update_same is the value we are updating to.
*)
  apply (t_update_same_key (t_empty false) "foo" true "bar").
(* The fourth argument of t_update_same is the key we are checking.
*)

Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #76)
Error in step "apply (t_update_same (t_update (t_empty false) "foo" true) "bar" true "bar").".
Message: No interpretation for string "bar"..
Goal: examplemap' "bar" = true.


TRYING TO PROVE LEMMA
Lemma examplemap_bar_is_true_3 : examplemap' "bar" = true.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)









From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.



Lemma examplemap_bar_is_true_3 : examplemap' "bar" = true.

Proof.
(* We will apply the definition of examplemap' to prove the lemma.
*)
  apply (t_update_same (t_update (t_empty false) "foo" true) "bar" true "bar").
(* The first argument of t_update_same is the map before the update.
*)
  apply (t_update_same (t_empty false) "foo" true "bar").
(* The second argument of t_update_same is the key we are updating.
*)
  apply (t_update_diff (t_empty false) "foo" true "bar").
(* The third argument of t_update_same is the value we are updating to.
*)
  apply (t_update_same_key (t_empty false) "foo" true "bar").
(* The fourth argument of t_update_same is the key we are checking.
*)

Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #76)
Error in step "apply (t_update_same (t_update (t_empty false) "foo" true) "bar" true "bar").".
Message: No interpretation for string "bar"..
Goal: examplemap' "bar" = true.


TRYING TO PROVE LEMMA
Lemma examplemap_bar_is_true_4 : examplemap' "bar" = true.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)









From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.



Lemma examplemap_bar_is_true_4 : examplemap' "bar" = true.

Proof.
(* We will apply the definition of examplemap' to prove the lemma.
*)
  apply (t_update_same (t_update (t_empty false) "foo" true) "bar" true "bar").
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #76)
Error in step "apply (t_update_same (t_update (t_empty false) "foo" true) "bar" true "bar").".
Message: No interpretation for string "bar"..
Goal: examplemap' "bar" = true.


TRYING TO PROVE LEMMA
Lemma examplemap_bar_is_true_5 : examplemap' "bar" = true.


Error proving update_example4
MAX LEMMA DEPTH REACHED. GIVING UP.