PROVING app_assoc
ATTEMPTED THEOREM PROOF (LEMMAS USED: 0)





Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Lists.











Inductive boollist : Type :=
  | bool_nil
  | bool_cons (b : bool) (l : boollist).





Inductive list (X:Type) : Type :=
  | nil
  | cons (x : X) (l : list X).



Check list : Type -> Type.



Check (nil nat) : list nat.



Check (cons nat 3 (nil nat)) : list nat.



Check nil : forall X : Type, list X.



Check cons : forall X : Type, X -> list X -> list X.





Check (cons nat 2 (cons nat 1 (nil nat)))
      : list nat.



Fixpoint repeat (X : Type) (x : X) (count : nat) : list X :=
  match count with
  | 0 => nil X
  | S count' => cons X x (repeat X x count')
  end.



Example test_repeat1 :
  repeat nat 4 2 = cons nat 4 (cons nat 4 (nil nat)).
Proof. reflexivity. Qed.



Example test_repeat2 :
  repeat bool false 1 = cons bool false (nil bool).
Proof. reflexivity. Qed.



Module MumbleGrumble.

Inductive mumble : Type :=
  | a
  | b (x : mumble) (y : nat)
  | c.

Inductive grumble (X:Type) : Type :=
  | d (m : mumble)
  | e (x : X).


Eval compute in d mumble (b a 5).
Eval compute in d bool (b a 5).
Eval compute in e bool true.
Eval compute in e mumble (b c 0).
End MumbleGrumble.







Fixpoint repeat' X x count : list X :=
  match count with
  | 0        => nil X
  | S count' => cons X x (repeat' X x count')
  end.



Check repeat'
  : forall X : Type, X -> nat -> list X.
Check repeat
  : forall X : Type, X -> nat -> list X.








Fixpoint repeat'' X x count : list X :=
  match count with
  | 0        => nil _
  | S count' => cons _ x (repeat'' _ x count')
  end.



Definition list123 :=
  cons nat 1 (cons nat 2 (cons nat 3 (nil nat))).



Definition list123' :=
  cons _ 1 (cons _ 2 (cons _ 3 (nil _))).






Arguments nil {X}.
Arguments cons {X}.
Arguments repeat {X}.



Definition list123'' := cons 1 (cons 2 (cons 3 nil)).



Fixpoint repeat''' {X : Type} (x : X) (count : nat) : list X :=
  match count with
  | 0        => nil
  | S count' => cons x (repeat''' x count')
  end.



Inductive list' {X:Type} : Type :=
  | nil'
  | cons' (x : X) (l : list').





Fixpoint app {X : Type} (l1 l2 : list X) : list X :=
  match l1 with
  | nil      => l2
  | cons h t => cons h (app t l2)
  end.

Fixpoint rev {X:Type} (l:list X) : list X :=
  match l with
  | nil      => nil
  | cons h t => app (rev t) (cons h nil)
  end.

Fixpoint length {X : Type} (l : list X) : nat :=
  match l with
  | nil => 0
  | cons _ l' => S (length l')
  end.

Example test_rev1 :
  rev (cons 1 (cons 2 nil)) = (cons 2 (cons 1 nil)).
Proof. reflexivity. Qed.

Example test_rev2:
  rev (cons true nil) = cons true nil.
Proof. reflexivity. Qed.

Example test_length1: length (cons 1 (cons 2 (cons 3 nil))) = 3.
Proof. reflexivity. Qed.






Fail Definition mynil := nil.



Definition mynil : list nat := nil.



Check @nil : forall X : Type, list X.

Definition mynil' := @nil nat.



Notation "x :: y" := (cons x y)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y []) ..).
Notation "x ++ y" := (app x y)
                     (at level 60, right associativity).



Definition list123''' := [1; 2; 3].






Theorem app_nil_r : forall (X:Type), forall l:list X,
  l ++ [] = l.
Proof.
  intros X.
  induction l as [| n l'].
  - reflexivity.
  - simpl. rewrite -> IHl'.
    reflexivity.
Qed.



Theorem app_assoc : forall A (l m n:list A),
  l ++ m ++ n = (l ++ m) ++ n.

Proof.
(* We will proceed by induction on the list n.
*)
  intros A l m n.
induction n as [| n' hn'].
(* Base case: n = nil *)
  - simpl.
reflexivity.
(* Inductive case: n = cons a n' *)
  - simpl.
(* We will now use the associativity of appending lists.
*)
    rewrite -> IHn'.
(* The goal is now l ++ m ++ cons a n' = (l ++ m) ++ cons a n'.
*)
    (* By the definition of appending lists, this is true.
*)
    reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN THEOREM PROOF (FRAGMENT #166)
Error in step "reflexivity.".
Message: In environment
A : Type
l, m : list A
Unable to unify "(l ++ m) ++ [ ]" with
 "l ++ m ++ [ ]"..
Goal: l ++ m ++ [ ] = (l ++ m) ++ [ ].


TRYING TO PROVE LEMMA
Lemma append_nil_associativity_0 : forall A : Type, forall l m : list A, l ++ m ++ [ ] = (l ++ m) ++ [ ].


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)





Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Lists.











Inductive boollist : Type :=
  | bool_nil
  | bool_cons (b : bool) (l : boollist).





Inductive list (X:Type) : Type :=
  | nil
  | cons (x : X) (l : list X).



Check list : Type -> Type.



Check (nil nat) : list nat.



Check (cons nat 3 (nil nat)) : list nat.



Check nil : forall X : Type, list X.



Check cons : forall X : Type, X -> list X -> list X.





Check (cons nat 2 (cons nat 1 (nil nat)))
      : list nat.



Fixpoint repeat (X : Type) (x : X) (count : nat) : list X :=
  match count with
  | 0 => nil X
  | S count' => cons X x (repeat X x count')
  end.



Example test_repeat1 :
  repeat nat 4 2 = cons nat 4 (cons nat 4 (nil nat)).
Proof. reflexivity. Qed.



Example test_repeat2 :
  repeat bool false 1 = cons bool false (nil bool).
Proof. reflexivity. Qed.



Module MumbleGrumble.

Inductive mumble : Type :=
  | a
  | b (x : mumble) (y : nat)
  | c.

Inductive grumble (X:Type) : Type :=
  | d (m : mumble)
  | e (x : X).


Eval compute in d mumble (b a 5).
Eval compute in d bool (b a 5).
Eval compute in e bool true.
Eval compute in e mumble (b c 0).
End MumbleGrumble.







Fixpoint repeat' X x count : list X :=
  match count with
  | 0        => nil X
  | S count' => cons X x (repeat' X x count')
  end.



Check repeat'
  : forall X : Type, X -> nat -> list X.
Check repeat
  : forall X : Type, X -> nat -> list X.








Fixpoint repeat'' X x count : list X :=
  match count with
  | 0        => nil _
  | S count' => cons _ x (repeat'' _ x count')
  end.



Definition list123 :=
  cons nat 1 (cons nat 2 (cons nat 3 (nil nat))).



Definition list123' :=
  cons _ 1 (cons _ 2 (cons _ 3 (nil _))).






Arguments nil {X}.
Arguments cons {X}.
Arguments repeat {X}.



Definition list123'' := cons 1 (cons 2 (cons 3 nil)).



Fixpoint repeat''' {X : Type} (x : X) (count : nat) : list X :=
  match count with
  | 0        => nil
  | S count' => cons x (repeat''' x count')
  end.



Inductive list' {X:Type} : Type :=
  | nil'
  | cons' (x : X) (l : list').





Fixpoint app {X : Type} (l1 l2 : list X) : list X :=
  match l1 with
  | nil      => l2
  | cons h t => cons h (app t l2)
  end.

Fixpoint rev {X:Type} (l:list X) : list X :=
  match l with
  | nil      => nil
  | cons h t => app (rev t) (cons h nil)
  end.

Fixpoint length {X : Type} (l : list X) : nat :=
  match l with
  | nil => 0
  | cons _ l' => S (length l')
  end.

Example test_rev1 :
  rev (cons 1 (cons 2 nil)) = (cons 2 (cons 1 nil)).
Proof. reflexivity. Qed.

Example test_rev2:
  rev (cons true nil) = cons true nil.
Proof. reflexivity. Qed.

Example test_length1: length (cons 1 (cons 2 (cons 3 nil))) = 3.
Proof. reflexivity. Qed.






Fail Definition mynil := nil.



Definition mynil : list nat := nil.



Check @nil : forall X : Type, list X.

Definition mynil' := @nil nat.



Notation "x :: y" := (cons x y)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y []) ..).
Notation "x ++ y" := (app x y)
                     (at level 60, right associativity).



Definition list123''' := [1; 2; 3].






Theorem app_nil_r : forall (X:Type), forall l:list X,
  l ++ [] = l.
Proof.
  intros X.
  induction l as [| n l'].
  - reflexivity.
  - simpl. rewrite -> IHl'.
    reflexivity.
Qed.



Lemma append_nil_associativity_0 : forall A : Type, forall l m : list A, l ++ m ++ [ ] = (l ++ m) ++ [ ].

Proof.
intros A l m.
induction l as [|x l' IHl'].
- (* l = nil *)
    reflexivity.
- (* l = cons x l' *)
    simpl.
rewrite IHl'.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED THEOREM PROOF (LEMMAS USED: 1)





Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Lists.











Inductive boollist : Type :=
  | bool_nil
  | bool_cons (b : bool) (l : boollist).





Inductive list (X:Type) : Type :=
  | nil
  | cons (x : X) (l : list X).



Check list : Type -> Type.



Check (nil nat) : list nat.



Check (cons nat 3 (nil nat)) : list nat.



Check nil : forall X : Type, list X.



Check cons : forall X : Type, X -> list X -> list X.





Check (cons nat 2 (cons nat 1 (nil nat)))
      : list nat.



Fixpoint repeat (X : Type) (x : X) (count : nat) : list X :=
  match count with
  | 0 => nil X
  | S count' => cons X x (repeat X x count')
  end.



Example test_repeat1 :
  repeat nat 4 2 = cons nat 4 (cons nat 4 (nil nat)).
Proof. reflexivity. Qed.



Example test_repeat2 :
  repeat bool false 1 = cons bool false (nil bool).
Proof. reflexivity. Qed.



Module MumbleGrumble.

Inductive mumble : Type :=
  | a
  | b (x : mumble) (y : nat)
  | c.

Inductive grumble (X:Type) : Type :=
  | d (m : mumble)
  | e (x : X).


Eval compute in d mumble (b a 5).
Eval compute in d bool (b a 5).
Eval compute in e bool true.
Eval compute in e mumble (b c 0).
End MumbleGrumble.







Fixpoint repeat' X x count : list X :=
  match count with
  | 0        => nil X
  | S count' => cons X x (repeat' X x count')
  end.



Check repeat'
  : forall X : Type, X -> nat -> list X.
Check repeat
  : forall X : Type, X -> nat -> list X.








Fixpoint repeat'' X x count : list X :=
  match count with
  | 0        => nil _
  | S count' => cons _ x (repeat'' _ x count')
  end.



Definition list123 :=
  cons nat 1 (cons nat 2 (cons nat 3 (nil nat))).



Definition list123' :=
  cons _ 1 (cons _ 2 (cons _ 3 (nil _))).






Arguments nil {X}.
Arguments cons {X}.
Arguments repeat {X}.



Definition list123'' := cons 1 (cons 2 (cons 3 nil)).



Fixpoint repeat''' {X : Type} (x : X) (count : nat) : list X :=
  match count with
  | 0        => nil
  | S count' => cons x (repeat''' x count')
  end.



Inductive list' {X:Type} : Type :=
  | nil'
  | cons' (x : X) (l : list').





Fixpoint app {X : Type} (l1 l2 : list X) : list X :=
  match l1 with
  | nil      => l2
  | cons h t => cons h (app t l2)
  end.

Fixpoint rev {X:Type} (l:list X) : list X :=
  match l with
  | nil      => nil
  | cons h t => app (rev t) (cons h nil)
  end.

Fixpoint length {X : Type} (l : list X) : nat :=
  match l with
  | nil => 0
  | cons _ l' => S (length l')
  end.

Example test_rev1 :
  rev (cons 1 (cons 2 nil)) = (cons 2 (cons 1 nil)).
Proof. reflexivity. Qed.

Example test_rev2:
  rev (cons true nil) = cons true nil.
Proof. reflexivity. Qed.

Example test_length1: length (cons 1 (cons 2 (cons 3 nil))) = 3.
Proof. reflexivity. Qed.






Fail Definition mynil := nil.



Definition mynil : list nat := nil.



Check @nil : forall X : Type, list X.

Definition mynil' := @nil nat.



Notation "x :: y" := (cons x y)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y []) ..).
Notation "x ++ y" := (app x y)
                     (at level 60, right associativity).



Definition list123''' := [1; 2; 3].






Theorem app_nil_r : forall (X:Type), forall l:list X,
  l ++ [] = l.
Proof.
  intros X.
  induction l as [| n l'].
  - reflexivity.
  - simpl. rewrite -> IHl'.
    reflexivity.
Qed.



Lemma append_nil_associativity_0 : forall A : Type, forall l m : list A, l ++ m ++ [ ] = (l ++ m) ++ [ ].

Proof.
intros A l m.
induction l as [|x l' IHl'].
- (* l = nil *)
    reflexivity.
- (* l = cons x l' *)
    simpl.
rewrite IHl'.
reflexivity.
Qed.

Theorem app_assoc : forall A (l m n:list A),
  l ++ m ++ n = (l ++ m) ++ n.

Proof.
(* We will proceed by induction on the list n.
*)
  intros A l m n.
induction n as [| n' hn'].
(* Base case: n = nil *)
  - simpl.
apply (@append_nil_associativity_0 A l m).
- simpl.
(* We will now use the associativity of appending lists.
*)
    rewrite -> IHn'.
(* The goal is now l ++ m ++ cons a n' = (l ++ m) ++ cons a n'.
*)
    (* By the definition of appending lists, this is true.
*)
    reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN THEOREM PROOF (FRAGMENT #194)
Error in step "rewrite -> IHn'.".
Message: The variable IHn' was not found in the current
environment..
Goal: l ++ m ++ n' :: hn' = (l ++ m) ++ n' :: hn'.


TRYING TO PROVE LEMMA
Lemma app_assoc_1 : forall A : Type, forall l m : list A, forall n' : A, forall hn' : list A, forall IHhn' : l ++ m ++ hn' = (l ++ m) ++ hn', l ++ m ++ n' :: hn' = (l ++ m) ++ n' :: hn'.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)





Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Lists.











Inductive boollist : Type :=
  | bool_nil
  | bool_cons (b : bool) (l : boollist).





Inductive list (X:Type) : Type :=
  | nil
  | cons (x : X) (l : list X).



Check list : Type -> Type.



Check (nil nat) : list nat.



Check (cons nat 3 (nil nat)) : list nat.



Check nil : forall X : Type, list X.



Check cons : forall X : Type, X -> list X -> list X.





Check (cons nat 2 (cons nat 1 (nil nat)))
      : list nat.



Fixpoint repeat (X : Type) (x : X) (count : nat) : list X :=
  match count with
  | 0 => nil X
  | S count' => cons X x (repeat X x count')
  end.



Example test_repeat1 :
  repeat nat 4 2 = cons nat 4 (cons nat 4 (nil nat)).
Proof. reflexivity. Qed.



Example test_repeat2 :
  repeat bool false 1 = cons bool false (nil bool).
Proof. reflexivity. Qed.



Module MumbleGrumble.

Inductive mumble : Type :=
  | a
  | b (x : mumble) (y : nat)
  | c.

Inductive grumble (X:Type) : Type :=
  | d (m : mumble)
  | e (x : X).


Eval compute in d mumble (b a 5).
Eval compute in d bool (b a 5).
Eval compute in e bool true.
Eval compute in e mumble (b c 0).
End MumbleGrumble.







Fixpoint repeat' X x count : list X :=
  match count with
  | 0        => nil X
  | S count' => cons X x (repeat' X x count')
  end.



Check repeat'
  : forall X : Type, X -> nat -> list X.
Check repeat
  : forall X : Type, X -> nat -> list X.








Fixpoint repeat'' X x count : list X :=
  match count with
  | 0        => nil _
  | S count' => cons _ x (repeat'' _ x count')
  end.



Definition list123 :=
  cons nat 1 (cons nat 2 (cons nat 3 (nil nat))).



Definition list123' :=
  cons _ 1 (cons _ 2 (cons _ 3 (nil _))).






Arguments nil {X}.
Arguments cons {X}.
Arguments repeat {X}.



Definition list123'' := cons 1 (cons 2 (cons 3 nil)).



Fixpoint repeat''' {X : Type} (x : X) (count : nat) : list X :=
  match count with
  | 0        => nil
  | S count' => cons x (repeat''' x count')
  end.



Inductive list' {X:Type} : Type :=
  | nil'
  | cons' (x : X) (l : list').





Fixpoint app {X : Type} (l1 l2 : list X) : list X :=
  match l1 with
  | nil      => l2
  | cons h t => cons h (app t l2)
  end.

Fixpoint rev {X:Type} (l:list X) : list X :=
  match l with
  | nil      => nil
  | cons h t => app (rev t) (cons h nil)
  end.

Fixpoint length {X : Type} (l : list X) : nat :=
  match l with
  | nil => 0
  | cons _ l' => S (length l')
  end.

Example test_rev1 :
  rev (cons 1 (cons 2 nil)) = (cons 2 (cons 1 nil)).
Proof. reflexivity. Qed.

Example test_rev2:
  rev (cons true nil) = cons true nil.
Proof. reflexivity. Qed.

Example test_length1: length (cons 1 (cons 2 (cons 3 nil))) = 3.
Proof. reflexivity. Qed.






Fail Definition mynil := nil.



Definition mynil : list nat := nil.



Check @nil : forall X : Type, list X.

Definition mynil' := @nil nat.



Notation "x :: y" := (cons x y)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y []) ..).
Notation "x ++ y" := (app x y)
                     (at level 60, right associativity).



Definition list123''' := [1; 2; 3].






Theorem app_nil_r : forall (X:Type), forall l:list X,
  l ++ [] = l.
Proof.
  intros X.
  induction l as [| n l'].
  - reflexivity.
  - simpl. rewrite -> IHl'.
    reflexivity.
Qed.



Lemma append_nil_associativity_0 : forall A : Type, forall l m : list A, l ++ m ++ [ ] = (l ++ m) ++ [ ].

Proof.
intros A l m.
induction l as [|x l' IHl'].
- (* l = nil *)
    reflexivity.
- (* l = cons x l' *)
    simpl.
rewrite IHl'.
reflexivity.
Qed.

Lemma app_assoc_1 : forall A : Type, forall l m : list A, forall n' : A, forall hn' : list A, forall IHhn' : l ++ m ++ hn' = (l ++ m) ++ hn', l ++ m ++ n' :: hn' = (l ++ m) ++ n' :: hn'.

Proof.
(*
     We will proceed by induction on the list m.
Base case: m = nil.
In this case, we have l ++ nil ++ n' :: hn' = (l ++ nil) ++ n' :: hn' by definition of append.
By the induction hypothesis, we have l ++ nil = l, so l ++ nil ++ n' :: hn' = l ++ n' :: hn' = (l ++ m) ++ n' :: hn'.
Step case: m = cons a m'.
In this case, we have l ++ (cons a m') ++ n' :: hn' = (l ++ cons a m') ++ n' :: hn'.
By the definition of append, we have l ++ (cons a m') ++ n' :: hn' = (l ++ cons a m') ++ n' :: hn' = (l ++ cons a m') ++ n' :: hn'.
By the induction hypothesis, we have l ++ cons a m' = cons a (l ++ m'), so (l ++ cons a m') ++ n' :: hn' = cons a ((l ++ m') ++ n' :: hn').
By the definition of append, we have cons a ((l ++ m') ++ n' :: hn') = cons a (l ++ m') ++ n' :: hn' = (l ++ cons a m') ++ n' :: hn'.
Therefore, the lemma holds for the step case.
*)
  intros A l m n' hn' IHhn'.
induction m as [|a m' IHm'].
- simpl.
rewrite IHhn'.
reflexivity.
- simpl.
rewrite IHm'.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #188)
Error in step "rewrite IHhn'.".
Message: Found no subterm matching 
"l ++ [ ] ++ hn'" in the current goal..
Goal: l ++ n' :: hn' = (l ++ [ ]) ++ n' :: hn'.


TRYING TO PROVE LEMMA
Lemma append_nil_assoc_2 : forall A : Type, forall l : list A, forall n' : A, forall hn' : list A, forall IHhn' : l ++ [ ] ++ hn' = (l ++ [ ]) ++ hn', l ++ n' :: hn' = (l ++ [ ]) ++ n' :: hn'.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)





Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Lists.











Inductive boollist : Type :=
  | bool_nil
  | bool_cons (b : bool) (l : boollist).





Inductive list (X:Type) : Type :=
  | nil
  | cons (x : X) (l : list X).



Check list : Type -> Type.



Check (nil nat) : list nat.



Check (cons nat 3 (nil nat)) : list nat.



Check nil : forall X : Type, list X.



Check cons : forall X : Type, X -> list X -> list X.





Check (cons nat 2 (cons nat 1 (nil nat)))
      : list nat.



Fixpoint repeat (X : Type) (x : X) (count : nat) : list X :=
  match count with
  | 0 => nil X
  | S count' => cons X x (repeat X x count')
  end.



Example test_repeat1 :
  repeat nat 4 2 = cons nat 4 (cons nat 4 (nil nat)).
Proof. reflexivity. Qed.



Example test_repeat2 :
  repeat bool false 1 = cons bool false (nil bool).
Proof. reflexivity. Qed.



Module MumbleGrumble.

Inductive mumble : Type :=
  | a
  | b (x : mumble) (y : nat)
  | c.

Inductive grumble (X:Type) : Type :=
  | d (m : mumble)
  | e (x : X).


Eval compute in d mumble (b a 5).
Eval compute in d bool (b a 5).
Eval compute in e bool true.
Eval compute in e mumble (b c 0).
End MumbleGrumble.







Fixpoint repeat' X x count : list X :=
  match count with
  | 0        => nil X
  | S count' => cons X x (repeat' X x count')
  end.



Check repeat'
  : forall X : Type, X -> nat -> list X.
Check repeat
  : forall X : Type, X -> nat -> list X.








Fixpoint repeat'' X x count : list X :=
  match count with
  | 0        => nil _
  | S count' => cons _ x (repeat'' _ x count')
  end.



Definition list123 :=
  cons nat 1 (cons nat 2 (cons nat 3 (nil nat))).



Definition list123' :=
  cons _ 1 (cons _ 2 (cons _ 3 (nil _))).






Arguments nil {X}.
Arguments cons {X}.
Arguments repeat {X}.



Definition list123'' := cons 1 (cons 2 (cons 3 nil)).



Fixpoint repeat''' {X : Type} (x : X) (count : nat) : list X :=
  match count with
  | 0        => nil
  | S count' => cons x (repeat''' x count')
  end.



Inductive list' {X:Type} : Type :=
  | nil'
  | cons' (x : X) (l : list').





Fixpoint app {X : Type} (l1 l2 : list X) : list X :=
  match l1 with
  | nil      => l2
  | cons h t => cons h (app t l2)
  end.

Fixpoint rev {X:Type} (l:list X) : list X :=
  match l with
  | nil      => nil
  | cons h t => app (rev t) (cons h nil)
  end.

Fixpoint length {X : Type} (l : list X) : nat :=
  match l with
  | nil => 0
  | cons _ l' => S (length l')
  end.

Example test_rev1 :
  rev (cons 1 (cons 2 nil)) = (cons 2 (cons 1 nil)).
Proof. reflexivity. Qed.

Example test_rev2:
  rev (cons true nil) = cons true nil.
Proof. reflexivity. Qed.

Example test_length1: length (cons 1 (cons 2 (cons 3 nil))) = 3.
Proof. reflexivity. Qed.






Fail Definition mynil := nil.



Definition mynil : list nat := nil.



Check @nil : forall X : Type, list X.

Definition mynil' := @nil nat.



Notation "x :: y" := (cons x y)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y []) ..).
Notation "x ++ y" := (app x y)
                     (at level 60, right associativity).



Definition list123''' := [1; 2; 3].






Theorem app_nil_r : forall (X:Type), forall l:list X,
  l ++ [] = l.
Proof.
  intros X.
  induction l as [| n l'].
  - reflexivity.
  - simpl. rewrite -> IHl'.
    reflexivity.
Qed.



Lemma append_nil_associativity_0 : forall A : Type, forall l m : list A, l ++ m ++ [ ] = (l ++ m) ++ [ ].

Proof.
intros A l m.
induction l as [|x l' IHl'].
- (* l = nil *)
    reflexivity.
- (* l = cons x l' *)
    simpl.
rewrite IHl'.
reflexivity.
Qed.

Lemma append_nil_assoc_2 : forall A : Type, forall l : list A, forall n' : A, forall hn' : list A, forall IHhn' : l ++ [ ] ++ hn' = (l ++ [ ]) ++ hn', l ++ n' :: hn' = (l ++ [ ]) ++ n' :: hn'.

Proof.
(*
    We will proceed by induction on l.
Base case: l = nil.
In this case, we have l ++ n' :: hn' = n' :: hn' = (l ++ [ ]) ++ n' :: hn' = (nil ++ [ ]) ++ n' :: hn' = (nil ++ [ ]) ++ hn'.
Step case: l = cons a l'.
We will use the induction hypothesis IHl' to prove l' ++ n' :: hn' = (l' ++ [ ]) ++ n' :: hn'.
Then, we have l ++ n' :: hn' = (cons a l') ++ n' :: hn' = a :: (l' ++ n' :: hn') = a :: ((l' ++ [ ]) ++ n' :: hn') = (cons a (l' ++ [ ]) ++ n' :: hn').
*)
  intros A l n' hn' IHhn'.
induction l as [|a l' IHl'].
- (* l = nil *)
    simpl.
reflexivity.
- (* l = cons a l' *)
    simpl.
rewrite IHl'.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #198)
Error in step "Qed.".
Message:  (in proof append_nil_assoc_2): Attempt to save an incomplete proof.
Goal: l' ++ [ ] ++ hn' = (l' ++ [ ]) ++ hn'.


TRYING TO PROVE LEMMA
Lemma append_nil_assoc_3 : forall A : Type, forall a : A, forall l' : list A, forall n' : A, forall hn' : list A, forall IHhn' : (a :: l') ++ [ ] ++ hn' =
((a :: l') ++ [ ]) ++ hn', forall IHl' : l' ++ [ ] ++ hn' = (l' ++ [ ]) ++ hn' ->
l' ++ n' :: hn' = (l' ++ [ ]) ++ n' :: hn', l' ++ [ ] ++ hn' = (l' ++ [ ]) ++ hn'.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)





Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Lists.











Inductive boollist : Type :=
  | bool_nil
  | bool_cons (b : bool) (l : boollist).





Inductive list (X:Type) : Type :=
  | nil
  | cons (x : X) (l : list X).



Check list : Type -> Type.



Check (nil nat) : list nat.



Check (cons nat 3 (nil nat)) : list nat.



Check nil : forall X : Type, list X.



Check cons : forall X : Type, X -> list X -> list X.





Check (cons nat 2 (cons nat 1 (nil nat)))
      : list nat.



Fixpoint repeat (X : Type) (x : X) (count : nat) : list X :=
  match count with
  | 0 => nil X
  | S count' => cons X x (repeat X x count')
  end.



Example test_repeat1 :
  repeat nat 4 2 = cons nat 4 (cons nat 4 (nil nat)).
Proof. reflexivity. Qed.



Example test_repeat2 :
  repeat bool false 1 = cons bool false (nil bool).
Proof. reflexivity. Qed.



Module MumbleGrumble.

Inductive mumble : Type :=
  | a
  | b (x : mumble) (y : nat)
  | c.

Inductive grumble (X:Type) : Type :=
  | d (m : mumble)
  | e (x : X).


Eval compute in d mumble (b a 5).
Eval compute in d bool (b a 5).
Eval compute in e bool true.
Eval compute in e mumble (b c 0).
End MumbleGrumble.







Fixpoint repeat' X x count : list X :=
  match count with
  | 0        => nil X
  | S count' => cons X x (repeat' X x count')
  end.



Check repeat'
  : forall X : Type, X -> nat -> list X.
Check repeat
  : forall X : Type, X -> nat -> list X.








Fixpoint repeat'' X x count : list X :=
  match count with
  | 0        => nil _
  | S count' => cons _ x (repeat'' _ x count')
  end.



Definition list123 :=
  cons nat 1 (cons nat 2 (cons nat 3 (nil nat))).



Definition list123' :=
  cons _ 1 (cons _ 2 (cons _ 3 (nil _))).






Arguments nil {X}.
Arguments cons {X}.
Arguments repeat {X}.



Definition list123'' := cons 1 (cons 2 (cons 3 nil)).



Fixpoint repeat''' {X : Type} (x : X) (count : nat) : list X :=
  match count with
  | 0        => nil
  | S count' => cons x (repeat''' x count')
  end.



Inductive list' {X:Type} : Type :=
  | nil'
  | cons' (x : X) (l : list').





Fixpoint app {X : Type} (l1 l2 : list X) : list X :=
  match l1 with
  | nil      => l2
  | cons h t => cons h (app t l2)
  end.

Fixpoint rev {X:Type} (l:list X) : list X :=
  match l with
  | nil      => nil
  | cons h t => app (rev t) (cons h nil)
  end.

Fixpoint length {X : Type} (l : list X) : nat :=
  match l with
  | nil => 0
  | cons _ l' => S (length l')
  end.

Example test_rev1 :
  rev (cons 1 (cons 2 nil)) = (cons 2 (cons 1 nil)).
Proof. reflexivity. Qed.

Example test_rev2:
  rev (cons true nil) = cons true nil.
Proof. reflexivity. Qed.

Example test_length1: length (cons 1 (cons 2 (cons 3 nil))) = 3.
Proof. reflexivity. Qed.






Fail Definition mynil := nil.



Definition mynil : list nat := nil.



Check @nil : forall X : Type, list X.

Definition mynil' := @nil nat.



Notation "x :: y" := (cons x y)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y []) ..).
Notation "x ++ y" := (app x y)
                     (at level 60, right associativity).



Definition list123''' := [1; 2; 3].






Theorem app_nil_r : forall (X:Type), forall l:list X,
  l ++ [] = l.
Proof.
  intros X.
  induction l as [| n l'].
  - reflexivity.
  - simpl. rewrite -> IHl'.
    reflexivity.
Qed.



Lemma append_nil_associativity_0 : forall A : Type, forall l m : list A, l ++ m ++ [ ] = (l ++ m) ++ [ ].

Proof.
intros A l m.
induction l as [|x l' IHl'].
- (* l = nil *)
    reflexivity.
- (* l = cons x l' *)
    simpl.
rewrite IHl'.
reflexivity.
Qed.

Lemma append_nil_assoc_3 : forall A : Type, forall a : A, forall l' : list A, forall n' : A, forall hn' : list A, forall IHhn' : (a :: l') ++ [ ] ++ hn' =
((a :: l') ++ [ ]) ++ hn', forall IHl' : l' ++ [ ] ++ hn' = (l' ++ [ ]) ++ hn' ->
l' ++ n' :: hn' = (l' ++ [ ]) ++ n' :: hn', l' ++ [ ] ++ hn' = (l' ++ [ ]) ++ hn'.

Proof.
intros A a l' n' hn' IHhn' IHl'.
assert (l' ++ [n'] ++ hn' = (l' ++ []) ++ n' :: hn') as H1.
{
    apply app_nil_r.
rewrite IHl'.
reflexivity.
}
  assert (l' ++ [ ] ++ hn' = (l' ++ []) ++ hn') as H2.
{
    apply app_nil_r.
rewrite IHl'.
reflexivity.
}
  rewrite H1, H2.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #186)
Error in step "apply app_nil_r.".
Message: In environment
A : Type
a : A
l' : list A
n' : A
hn' : list A
IHhn' : (a :: l') ++ [ ] ++ hn' =
        ((a :: l') ++ [ ]) ++ hn'
IHl' : l' ++ [ ] ++ hn' = (l' ++ [ ]) ++ hn' ->
       l' ++ n' :: hn' = (l' ++ [ ]) ++ n' :: hn'
Unable to unify "?M1091 ++ [ ] = ?M1091" with
 "l' ++ [n'] ++ hn' = (l' ++ [ ]) ++ n' :: hn'"..
Goal: l' ++ [n'] ++ hn' = (l' ++ [ ]) ++ n' :: hn'.


TRYING TO PROVE LEMMA
Lemma append_nil_assoc_4 : forall A : Type, forall a : A, forall l' : list A, forall n' : A, forall hn' : list A, forall IHhn' : (a :: l') ++ [ ] ++ hn' =
((a :: l') ++ [ ]) ++ hn', forall IHl' : l' ++ [ ] ++ hn' = (l' ++ [ ]) ++ hn' ->
l' ++ n' :: hn' = (l' ++ [ ]) ++ n' :: hn', l' ++ [n'] ++ hn' = (l' ++ [ ]) ++ n' :: hn'.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)





Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Lists.











Inductive boollist : Type :=
  | bool_nil
  | bool_cons (b : bool) (l : boollist).





Inductive list (X:Type) : Type :=
  | nil
  | cons (x : X) (l : list X).



Check list : Type -> Type.



Check (nil nat) : list nat.



Check (cons nat 3 (nil nat)) : list nat.



Check nil : forall X : Type, list X.



Check cons : forall X : Type, X -> list X -> list X.





Check (cons nat 2 (cons nat 1 (nil nat)))
      : list nat.



Fixpoint repeat (X : Type) (x : X) (count : nat) : list X :=
  match count with
  | 0 => nil X
  | S count' => cons X x (repeat X x count')
  end.



Example test_repeat1 :
  repeat nat 4 2 = cons nat 4 (cons nat 4 (nil nat)).
Proof. reflexivity. Qed.



Example test_repeat2 :
  repeat bool false 1 = cons bool false (nil bool).
Proof. reflexivity. Qed.



Module MumbleGrumble.

Inductive mumble : Type :=
  | a
  | b (x : mumble) (y : nat)
  | c.

Inductive grumble (X:Type) : Type :=
  | d (m : mumble)
  | e (x : X).


Eval compute in d mumble (b a 5).
Eval compute in d bool (b a 5).
Eval compute in e bool true.
Eval compute in e mumble (b c 0).
End MumbleGrumble.







Fixpoint repeat' X x count : list X :=
  match count with
  | 0        => nil X
  | S count' => cons X x (repeat' X x count')
  end.



Check repeat'
  : forall X : Type, X -> nat -> list X.
Check repeat
  : forall X : Type, X -> nat -> list X.








Fixpoint repeat'' X x count : list X :=
  match count with
  | 0        => nil _
  | S count' => cons _ x (repeat'' _ x count')
  end.



Definition list123 :=
  cons nat 1 (cons nat 2 (cons nat 3 (nil nat))).



Definition list123' :=
  cons _ 1 (cons _ 2 (cons _ 3 (nil _))).






Arguments nil {X}.
Arguments cons {X}.
Arguments repeat {X}.



Definition list123'' := cons 1 (cons 2 (cons 3 nil)).



Fixpoint repeat''' {X : Type} (x : X) (count : nat) : list X :=
  match count with
  | 0        => nil
  | S count' => cons x (repeat''' x count')
  end.



Inductive list' {X:Type} : Type :=
  | nil'
  | cons' (x : X) (l : list').





Fixpoint app {X : Type} (l1 l2 : list X) : list X :=
  match l1 with
  | nil      => l2
  | cons h t => cons h (app t l2)
  end.

Fixpoint rev {X:Type} (l:list X) : list X :=
  match l with
  | nil      => nil
  | cons h t => app (rev t) (cons h nil)
  end.

Fixpoint length {X : Type} (l : list X) : nat :=
  match l with
  | nil => 0
  | cons _ l' => S (length l')
  end.

Example test_rev1 :
  rev (cons 1 (cons 2 nil)) = (cons 2 (cons 1 nil)).
Proof. reflexivity. Qed.

Example test_rev2:
  rev (cons true nil) = cons true nil.
Proof. reflexivity. Qed.

Example test_length1: length (cons 1 (cons 2 (cons 3 nil))) = 3.
Proof. reflexivity. Qed.






Fail Definition mynil := nil.



Definition mynil : list nat := nil.



Check @nil : forall X : Type, list X.

Definition mynil' := @nil nat.



Notation "x :: y" := (cons x y)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y []) ..).
Notation "x ++ y" := (app x y)
                     (at level 60, right associativity).



Definition list123''' := [1; 2; 3].






Theorem app_nil_r : forall (X:Type), forall l:list X,
  l ++ [] = l.
Proof.
  intros X.
  induction l as [| n l'].
  - reflexivity.
  - simpl. rewrite -> IHl'.
    reflexivity.
Qed.



Lemma append_nil_associativity_0 : forall A : Type, forall l m : list A, l ++ m ++ [ ] = (l ++ m) ++ [ ].

Proof.
intros A l m.
induction l as [|x l' IHl'].
- (* l = nil *)
    reflexivity.
- (* l = cons x l' *)
    simpl.
rewrite IHl'.
reflexivity.
Qed.

Lemma append_nil_assoc_4 : forall A : Type, forall a : A, forall l' : list A, forall n' : A, forall hn' : list A, forall IHhn' : (a :: l') ++ [ ] ++ hn' =
((a :: l') ++ [ ]) ++ hn', forall IHl' : l' ++ [ ] ++ hn' = (l' ++ [ ]) ++ hn' ->
l' ++ n' :: hn' = (l' ++ [ ]) ++ n' :: hn', l' ++ [n'] ++ hn' = (l' ++ [ ]) ++ n' :: hn'.

Proof.
intros A a l' n' hn' IHhn' IHl'.
assert (l' ++ [n'] ++ hn' = l' ++ [n'] ++ hn') as H.
{
    (* We first prove that l' ++ [n'] ++ hn' = l' ++ [n'] ++ hn' *)
    rewrite H.
}
  assert (l' ++ [n'] ++ hn' = (l' ++ [n']) ++ hn') as H'.
{
    (* We then prove that l' ++ [n'] ++ hn' = (l' ++ [n']) ++ hn' *)
    apply append_assoc.
- (* l' ++ [n'] = l' ++ [n'] *)
      reflexivity.
- (* hn' = hn' *)
      reflexivity.
}
  rewrite H'.
(* We now prove that l' ++ [n'] ++ hn' = (l' ++ []) ++ n' :: hn' *)
  apply IHl'.
(* We now prove that l' ++ [n'] ++ hn' = (l' ++ []) ++ n' :: hn' *)
  apply IHhn'.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #186)
Error in step "rewrite H.".
Message: The variable H was not found in the current
environment..
Goal: l' ++ [n'] ++ hn' = l' ++ [n'] ++ hn'.


TRYING TO PROVE LEMMA
Lemma append_nil_assoc_5 : forall A : Type, forall a : A, forall l' : list A, forall n' : A, forall hn' : list A, forall IHhn' : (a :: l') ++ [ ] ++ hn' =
((a :: l') ++ [ ]) ++ hn', forall IHl' : l' ++ [ ] ++ hn' = (l' ++ [ ]) ++ hn' ->
l' ++ n' :: hn' = (l' ++ [ ]) ++ n' :: hn', l' ++ [n'] ++ hn' = l' ++ [n'] ++ hn'.


Error proving app_assoc
MAX LEMMA DEPTH REACHED. GIVING UP.