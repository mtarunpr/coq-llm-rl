PROVING t_update_permute
ATTEMPTED THEOREM PROOF (LEMMAS USED: 0)









From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.

Example update_example4 : examplemap' "bar" = true.
Proof. reflexivity. Qed.









Lemma t_apply_empty : forall (A : Type) (x : string) (v : A),
  (_ !-> v) x = v.
Proof.
  reflexivity. Qed.




Lemma t_update_eq : forall (A : Type) (m : total_map A) x v,
  (x !-> v ; m) x = v.
Proof.
  intros. unfold t_update. rewrite eqb_refl. reflexivity.
Qed.




Theorem t_update_neq : forall (A : Type) (m : total_map A) x1 x2 v,
  x1 <> x2 ->
  (x1 !-> v ; m) x2 = m x2.
Proof.
  intros A m x1 x2 v H.
  unfold t_update. destruct (eqb_spec x1 x2). exfalso. apply H. apply e. reflexivity.
Qed.




Lemma t_update_shadow : forall (A : Type) (m : total_map A) x v1 v2,
  (x !-> v2 ; x !-> v1 ; m) = (x !-> v2 ; m).
Proof.
  intros A m x v1 v2.
  apply functional_extensionality. intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [_ | _]. reflexivity. reflexivity.
Qed.



Theorem t_update_same : forall (A : Type) (m : total_map A) x,
  (x !-> m x ; m) = m.
Proof.
  intros A m x.
  apply functional_extensionality.
  intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [H | _]. rewrite H. reflexivity. reflexivity.
Qed.






Theorem t_update_permute : forall (A : Type) (m : total_map A)
                                  v1 v2 x1 x2,
  x2 <> x1 ->
  (x1 !-> v1 ; x2 !-> v2 ; m)
  =
  (x2 !-> v2 ; x1 !-> v1 ; m).

Proof.
(* We will proceed by induction on the equality of x1 and x2.
*)
  intros A m v1 v2 x1 x2 Hneq.
(* We will need to use the t_update_shadow lemma, so we first prove a lemma
     that will allow us to apply it.
*)
  assert (H1 : (x1 !-> v1 ; x2 !-> v2 ; m) = (x2 !-> v2 ; x1 !-> v1 ; m)).
{
    (* We will use the t_update_shadow lemma to prove this equality.
*)
    apply (t_update_shadow A m x1 v1 v2).
(* The t_update_shadow lemma requires us to prove that x1 <> x2.
*)
    exact Hneq.
}
  (* Now we can apply the lemma we just proved.
*)
  rewrite H1.
(* The goal is now trivially true.
*)
  reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN THEOREM PROOF (FRAGMENT #174)
Error in step "apply (t_update_shadow A m x1 v1 v2).".
Message: In environment
A : Type
m : total_map A
v1, v2 : A
x1, x2 : string
Hneq : x2 <> x1
Unable to unify
 "(x1 !-> v2; x1 !-> v1; m) = (x1 !-> v2; m)"
with
 "(x1 !-> v1; x2 !-> v2; m) =
  (x2 !-> v2; x1 !-> v1; m)"..
Goal: (x1 !-> v1; x2 !-> v2; m) = (x2 !-> v2; x1 !-> v1; m).


TRYING TO PROVE LEMMA
Lemma map_swap_keys_0 : forall A : Type, forall m : total_map A, forall v1 v2 : A, forall x1 x2 : string, forall Hneq : x2 <> x1, (x1 !-> v1; x2 !-> v2; m) = (x2 !-> v2; x1 !-> v1; m).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)









From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.

Example update_example4 : examplemap' "bar" = true.
Proof. reflexivity. Qed.









Lemma t_apply_empty : forall (A : Type) (x : string) (v : A),
  (_ !-> v) x = v.
Proof.
  reflexivity. Qed.




Lemma t_update_eq : forall (A : Type) (m : total_map A) x v,
  (x !-> v ; m) x = v.
Proof.
  intros. unfold t_update. rewrite eqb_refl. reflexivity.
Qed.




Theorem t_update_neq : forall (A : Type) (m : total_map A) x1 x2 v,
  x1 <> x2 ->
  (x1 !-> v ; m) x2 = m x2.
Proof.
  intros A m x1 x2 v H.
  unfold t_update. destruct (eqb_spec x1 x2). exfalso. apply H. apply e. reflexivity.
Qed.




Lemma t_update_shadow : forall (A : Type) (m : total_map A) x v1 v2,
  (x !-> v2 ; x !-> v1 ; m) = (x !-> v2 ; m).
Proof.
  intros A m x v1 v2.
  apply functional_extensionality. intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [_ | _]. reflexivity. reflexivity.
Qed.



Theorem t_update_same : forall (A : Type) (m : total_map A) x,
  (x !-> m x ; m) = m.
Proof.
  intros A m x.
  apply functional_extensionality.
  intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [H | _]. rewrite H. reflexivity. reflexivity.
Qed.






Lemma map_swap_keys_0 : forall A : Type, forall m : total_map A, forall v1 v2 : A, forall x1 x2 : string, forall Hneq : x2 <> x1, (x1 !-> v1; x2 !-> v2; m) = (x2 !-> v2; x1 !-> v1; m).

Proof.
(* We will proceed by induction on the total map m.
*)
  intros A m v1 v2 x1 x2 Hneq.
(* We will need to use the induction principle for total maps.
*)
  induction m; intros.
(* We will need to use the induction principle for string equality.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
*)
  induction v1; intros.
(* We will need to use the induction principle for the update function.
*)
  induction v2; intros.
(* We will need to use the induction principle for the update function.
*)
  induction x1; intros.
(* We will need to use the induction principle for the update function.
*)
  induction x2; intros.
(* We will need to use the induction principle for the update function.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
*)
  induction Hneq; intros.
(* We will need to use the induction principle for the update function.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #170)
Error in step "induction m; intros.".
Message: Not an inductive definition..
Goal: (x1 !-> v1; x2 !-> v2; m) = (x2 !-> v2; x1 !-> v1; m).


TRYING TO PROVE LEMMA
Lemma map_swap_keys_1 : forall A : Type, forall m : total_map A, forall v1 v2 : A, forall x1 x2 : string, forall Hneq : x2 <> x1, (x1 !-> v1; x2 !-> v2; m) = (x2 !-> v2; x1 !-> v1; m).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)









From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.

Example update_example4 : examplemap' "bar" = true.
Proof. reflexivity. Qed.









Lemma t_apply_empty : forall (A : Type) (x : string) (v : A),
  (_ !-> v) x = v.
Proof.
  reflexivity. Qed.




Lemma t_update_eq : forall (A : Type) (m : total_map A) x v,
  (x !-> v ; m) x = v.
Proof.
  intros. unfold t_update. rewrite eqb_refl. reflexivity.
Qed.




Theorem t_update_neq : forall (A : Type) (m : total_map A) x1 x2 v,
  x1 <> x2 ->
  (x1 !-> v ; m) x2 = m x2.
Proof.
  intros A m x1 x2 v H.
  unfold t_update. destruct (eqb_spec x1 x2). exfalso. apply H. apply e. reflexivity.
Qed.




Lemma t_update_shadow : forall (A : Type) (m : total_map A) x v1 v2,
  (x !-> v2 ; x !-> v1 ; m) = (x !-> v2 ; m).
Proof.
  intros A m x v1 v2.
  apply functional_extensionality. intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [_ | _]. reflexivity. reflexivity.
Qed.



Theorem t_update_same : forall (A : Type) (m : total_map A) x,
  (x !-> m x ; m) = m.
Proof.
  intros A m x.
  apply functional_extensionality.
  intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [H | _]. rewrite H. reflexivity. reflexivity.
Qed.






Lemma map_swap_keys_1 : forall A : Type, forall m : total_map A, forall v1 v2 : A, forall x1 x2 : string, forall Hneq : x2 <> x1, (x1 !-> v1; x2 !-> v2; m) = (x2 !-> v2; x1 !-> v1; m).

Proof.
(* We will proceed by induction on the total map m.
*)
  intros A m v1 v2 x1 x2 Hneq.
(* We will need to use the definition of total_map.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update operator.
*)
  generalize dependent m.
induction m; intros.
(* We will need to use the definition of the update
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #172)
Error in step "induction m; intros.".
Message: Not an inductive definition..
Goal: forall m : total_map A,
(x1 !-> v1; x2 !-> v2; m) = (x2 !-> v2; x1 !-> v1; m).


TRYING TO PROVE LEMMA
Lemma map_order_independent_2 : forall A : Type, forall v1 v2 : A, forall x1 x2 : string, forall Hneq : x2 <> x1, forall m : total_map A,
(x1 !-> v1; x2 !-> v2; m) = (x2 !-> v2; x1 !-> v1; m).


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)









From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.

Example update_example4 : examplemap' "bar" = true.
Proof. reflexivity. Qed.









Lemma t_apply_empty : forall (A : Type) (x : string) (v : A),
  (_ !-> v) x = v.
Proof.
  reflexivity. Qed.




Lemma t_update_eq : forall (A : Type) (m : total_map A) x v,
  (x !-> v ; m) x = v.
Proof.
  intros. unfold t_update. rewrite eqb_refl. reflexivity.
Qed.




Theorem t_update_neq : forall (A : Type) (m : total_map A) x1 x2 v,
  x1 <> x2 ->
  (x1 !-> v ; m) x2 = m x2.
Proof.
  intros A m x1 x2 v H.
  unfold t_update. destruct (eqb_spec x1 x2). exfalso. apply H. apply e. reflexivity.
Qed.




Lemma t_update_shadow : forall (A : Type) (m : total_map A) x v1 v2,
  (x !-> v2 ; x !-> v1 ; m) = (x !-> v2 ; m).
Proof.
  intros A m x v1 v2.
  apply functional_extensionality. intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [_ | _]. reflexivity. reflexivity.
Qed.



Theorem t_update_same : forall (A : Type) (m : total_map A) x,
  (x !-> m x ; m) = m.
Proof.
  intros A m x.
  apply functional_extensionality.
  intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [H | _]. rewrite H. reflexivity. reflexivity.
Qed.






Lemma map_order_independent_2 : forall A : Type, forall v1 v2 : A, forall x1 x2 : string, forall Hneq : x2 <> x1, forall m : total_map A,
(x1 !-> v1; x2 !-> v2; m) = (x2 !-> v2; x1 !-> v1; m).

Proof.
intros A v1 v2 x1 x2 Hneq m.
apply functional_extensionality.
intros y.
destruct (x1 = y) eqn:E1.
destruct (x2 = y) eqn:E2.
- (* Case: y = x1 *)
    rewrite E1.
reflexivity.
- (* Case: y = x2 *)
    rewrite E2.
reflexivity.
- (* Case: y <> x1 and y <> x2 *)
    rewrite Hneq.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #174)
Error in step "destruct (x1 = y) eqn:E1.".
Message: Not an inductive definition..
Goal: (x1 !-> v1; x2 !-> v2; m) y =
(x2 !-> v2; x1 !-> v1; m) y.


TRYING TO PROVE LEMMA
Lemma map_swap_keys_3 : forall A : Type, forall v1 v2 : A, forall x1 x2 : string, forall Hneq : x2 <> x1, forall m : total_map A, forall y : string, (x1 !-> v1; x2 !-> v2; m) y =
(x2 !-> v2; x1 !-> v1; m) y.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)









From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.

Example update_example4 : examplemap' "bar" = true.
Proof. reflexivity. Qed.









Lemma t_apply_empty : forall (A : Type) (x : string) (v : A),
  (_ !-> v) x = v.
Proof.
  reflexivity. Qed.




Lemma t_update_eq : forall (A : Type) (m : total_map A) x v,
  (x !-> v ; m) x = v.
Proof.
  intros. unfold t_update. rewrite eqb_refl. reflexivity.
Qed.




Theorem t_update_neq : forall (A : Type) (m : total_map A) x1 x2 v,
  x1 <> x2 ->
  (x1 !-> v ; m) x2 = m x2.
Proof.
  intros A m x1 x2 v H.
  unfold t_update. destruct (eqb_spec x1 x2). exfalso. apply H. apply e. reflexivity.
Qed.




Lemma t_update_shadow : forall (A : Type) (m : total_map A) x v1 v2,
  (x !-> v2 ; x !-> v1 ; m) = (x !-> v2 ; m).
Proof.
  intros A m x v1 v2.
  apply functional_extensionality. intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [_ | _]. reflexivity. reflexivity.
Qed.



Theorem t_update_same : forall (A : Type) (m : total_map A) x,
  (x !-> m x ; m) = m.
Proof.
  intros A m x.
  apply functional_extensionality.
  intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [H | _]. rewrite H. reflexivity. reflexivity.
Qed.






Lemma map_swap_keys_3 : forall A : Type, forall v1 v2 : A, forall x1 x2 : string, forall Hneq : x2 <> x1, forall m : total_map A, forall y : string, (x1 !-> v1; x2 !-> v2; m) y =
(x2 !-> v2; x1 !-> v1; m) y.

Proof.
(* We will proceed by induction on the value y of the map.
*)
  intros A v1 v2 x1 x2 Hneq m y.
(* We will consider two cases: when y is equal to x1 or x2, and when y is different from x1 and x2.
*)
  destruct (beq_string y x1) eqn:E1.
- (* Case y = x1 *)
    rewrite E1 in Hneq.
(* We know that (x1 !-> v1; x2 !-> v2; m) x1 = v1 by definition of t_update.
*)
    reflexivity.
destruct (beq_string y x2) eqn:E2.
- (* Case y = x2 *)
    (* We know that (x1 !-> v1; x2 !-> v2; m) x2 = v2 by definition of t_update.
*)
    reflexivity.
- (* Case y <> x1 and y <> x2 *)
    (* We know that (x1 !-> v1; x2 !-> v2; m) y = m y by definition of t_update.
*)
    reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #170)
Error in step "destruct (beq_string y x1) eqn:E1.".
Message: The variable beq_string was not found in the current
environment..
Goal: (x1 !-> v1; x2 !-> v2; m) y =
(x2 !-> v2; x1 !-> v1; m) y.


TRYING TO PROVE LEMMA
Lemma map_swap_keys_4 : forall A : Type, forall v1 v2 : A, forall x1 x2 : string, forall Hneq : x2 <> x1, forall m : total_map A, forall y : string, (x1 !-> v1; x2 !-> v2; m) y =
(x2 !-> v2; x1 !-> v1; m) y.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)









From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.

Example update_example4 : examplemap' "bar" = true.
Proof. reflexivity. Qed.









Lemma t_apply_empty : forall (A : Type) (x : string) (v : A),
  (_ !-> v) x = v.
Proof.
  reflexivity. Qed.




Lemma t_update_eq : forall (A : Type) (m : total_map A) x v,
  (x !-> v ; m) x = v.
Proof.
  intros. unfold t_update. rewrite eqb_refl. reflexivity.
Qed.




Theorem t_update_neq : forall (A : Type) (m : total_map A) x1 x2 v,
  x1 <> x2 ->
  (x1 !-> v ; m) x2 = m x2.
Proof.
  intros A m x1 x2 v H.
  unfold t_update. destruct (eqb_spec x1 x2). exfalso. apply H. apply e. reflexivity.
Qed.




Lemma t_update_shadow : forall (A : Type) (m : total_map A) x v1 v2,
  (x !-> v2 ; x !-> v1 ; m) = (x !-> v2 ; m).
Proof.
  intros A m x v1 v2.
  apply functional_extensionality. intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [_ | _]. reflexivity. reflexivity.
Qed.



Theorem t_update_same : forall (A : Type) (m : total_map A) x,
  (x !-> m x ; m) = m.
Proof.
  intros A m x.
  apply functional_extensionality.
  intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [H | _]. rewrite H. reflexivity. reflexivity.
Qed.






Lemma map_swap_keys_4 : forall A : Type, forall v1 v2 : A, forall x1 x2 : string, forall Hneq : x2 <> x1, forall m : total_map A, forall y : string, (x1 !-> v1; x2 !-> v2; m) y =
(x2 !-> v2; x1 !-> v1; m) y.

Proof.
intros A v1 v2 x1 x2 Hneq m y.
destruct (x1 = y) as [Heq1 | Hneq1].
- (* x1 = y *)
    rewrite Heq1.
destruct (x2 = y) as [Heq2 | Hneq2].
+ (* x2 = y *)
      rewrite Heq2.
(* Since x1 = y and x2 = y, we have v1 = v2 and m y = v1 = v2 *)
      reflexivity.
+ (* x2 <> y *)
      (* Since x1 = y and x2 <> y, we have v1 = m y *)
      reflexivity.
+ (* x1 <> y *)
    destruct (x2 = y) as [Heq2 | Hneq2].
+ (* x2 = y *)
      (* Since x1 <> y and x2 = y, we have v2 = m y *)
      reflexivity.
+ (* x2 <> y *)
      (* Since x1 <> y and x2 <> y, we have m y = m y *)
      reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #170)
Error in step "destruct (x1 = y) as [Heq1 | Hneq1].".
Message: Not an inductive definition..
Goal: (x1 !-> v1; x2 !-> v2; m) y =
(x2 !-> v2; x1 !-> v1; m) y.


TRYING TO PROVE LEMMA
Lemma map_swap_keys_5 : forall A : Type, forall v1 v2 : A, forall x1 x2 : string, forall Hneq : x2 <> x1, forall m : total_map A, forall y : string, (x1 !-> v1; x2 !-> v2; m) y =
(x2 !-> v2; x1 !-> v1; m) y.


Error proving t_update_permute
MAX LEMMA DEPTH REACHED. GIVING UP.