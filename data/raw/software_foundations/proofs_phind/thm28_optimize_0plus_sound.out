PROVING optimize_0plus_sound
ATTEMPTED THEOREM PROOF (LEMMAS USED: 0)






Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Bool.Bool.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.EqNat. Import Nat.
From Coq Require Import Lia.
From Coq Require Import Lists.List. Import ListNotations.
From Coq Require Import Strings.String.
From LF Require Import Maps.









Module AExp.



Inductive aexp : Type :=
  | ANum (n : nat)
  | APlus (a1 a2 : aexp)
  | AMinus (a1 a2 : aexp)
  | AMult (a1 a2 : aexp).

Inductive bexp : Type :=
  | BTrue
  | BFalse
  | BEq (a1 a2 : aexp)
  | BNeq (a1 a2 : aexp)
  | BLe (a1 a2 : aexp)
  | BGt (a1 a2 : aexp)
  | BNot (b : bexp)
  | BAnd (b1 b2 : bexp).












Fixpoint aeval (a : aexp) : nat :=
  match a with
  | ANum n => n
  | APlus  a1 a2 => (aeval a1) + (aeval a2)
  | AMinus a1 a2 => (aeval a1) - (aeval a2)
  | AMult  a1 a2 => (aeval a1) * (aeval a2)
  end.

Example test_aeval1:
  aeval (APlus (ANum 2) (ANum 2)) = 4.
Proof. reflexivity. Qed.



Fixpoint beval (b : bexp) : bool :=
  match b with
  | BTrue       => true
  | BFalse      => false
  | BEq a1 a2   => (aeval a1) =? (aeval a2)
  | BNeq a1 a2  => negb ((aeval a1) =? (aeval a2))
  | BLe a1 a2   => (aeval a1) <=? (aeval a2)
  | BGt a1 a2   => negb ((aeval a1) <=? (aeval a2))
  | BNot b1     => negb (beval b1)
  | BAnd b1 b2  => andb (beval b1) (beval b2)
  end.






Fixpoint optimize_0plus (a:aexp) : aexp :=
  match a with
  | ANum n => ANum n
  | APlus (ANum 0) e2 => optimize_0plus e2
  | APlus  e1 e2 => APlus  (optimize_0plus e1) (optimize_0plus e2)
  | AMinus e1 e2 => AMinus (optimize_0plus e1) (optimize_0plus e2)
  | AMult  e1 e2 => AMult  (optimize_0plus e1) (optimize_0plus e2)
  end.



Example test_optimize_0plus:
  optimize_0plus (APlus (ANum 2)
                        (APlus (ANum 0)
                               (APlus (ANum 0) (ANum 1))))
  = APlus (ANum 2) (ANum 1).
Proof. reflexivity. Qed.





Theorem optimize_0plus_sound : forall a,
  aeval (optimize_0plus a) = aeval a.

Proof.
(* We will proceed by induction on the structure of aexp.
*)
  intros a.
induction a as [| a1 a2 | a1 a2 | a1 a2].
(* In each case, we will simplify the goal by applying the IH to the subterms.
*)
  - (* Case ANum *)
    reflexivity.
- (* Case APlus *)
    simpl.
rewrite IHa1, IHa2.
reflexivity.
- (* Case AMinus *)
    simpl.
rewrite IHa1, IHa2.
reflexivity.
- (* Case AMult *)
    simpl.
rewrite IHa1, IHa2.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN THEOREM PROOF (FRAGMENT #72)
Error in step "rewrite IHa1, IHa2.".
Message: Found no subterm matching 
"aeval (optimize_0plus a3)" in the current goal..
Goal: aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.


TRYING TO PROVE LEMMA
Lemma optimize_0plus_distributive_0 : forall a1 a3 : aexp, forall a2 : aeval (optimize_0plus a1) = aeval a1, forall IHa1 : aeval (optimize_0plus a3) = aeval a3, aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)






Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Bool.Bool.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.EqNat. Import Nat.
From Coq Require Import Lia.
From Coq Require Import Lists.List. Import ListNotations.
From Coq Require Import Strings.String.
From LF Require Import Maps.









Module AExp.



Inductive aexp : Type :=
  | ANum (n : nat)
  | APlus (a1 a2 : aexp)
  | AMinus (a1 a2 : aexp)
  | AMult (a1 a2 : aexp).

Inductive bexp : Type :=
  | BTrue
  | BFalse
  | BEq (a1 a2 : aexp)
  | BNeq (a1 a2 : aexp)
  | BLe (a1 a2 : aexp)
  | BGt (a1 a2 : aexp)
  | BNot (b : bexp)
  | BAnd (b1 b2 : bexp).












Fixpoint aeval (a : aexp) : nat :=
  match a with
  | ANum n => n
  | APlus  a1 a2 => (aeval a1) + (aeval a2)
  | AMinus a1 a2 => (aeval a1) - (aeval a2)
  | AMult  a1 a2 => (aeval a1) * (aeval a2)
  end.

Example test_aeval1:
  aeval (APlus (ANum 2) (ANum 2)) = 4.
Proof. reflexivity. Qed.



Fixpoint beval (b : bexp) : bool :=
  match b with
  | BTrue       => true
  | BFalse      => false
  | BEq a1 a2   => (aeval a1) =? (aeval a2)
  | BNeq a1 a2  => negb ((aeval a1) =? (aeval a2))
  | BLe a1 a2   => (aeval a1) <=? (aeval a2)
  | BGt a1 a2   => negb ((aeval a1) <=? (aeval a2))
  | BNot b1     => negb (beval b1)
  | BAnd b1 b2  => andb (beval b1) (beval b2)
  end.






Fixpoint optimize_0plus (a:aexp) : aexp :=
  match a with
  | ANum n => ANum n
  | APlus (ANum 0) e2 => optimize_0plus e2
  | APlus  e1 e2 => APlus  (optimize_0plus e1) (optimize_0plus e2)
  | AMinus e1 e2 => AMinus (optimize_0plus e1) (optimize_0plus e2)
  | AMult  e1 e2 => AMult  (optimize_0plus e1) (optimize_0plus e2)
  end.



Example test_optimize_0plus:
  optimize_0plus (APlus (ANum 2)
                        (APlus (ANum 0)
                               (APlus (ANum 0) (ANum 1))))
  = APlus (ANum 2) (ANum 1).
Proof. reflexivity. Qed.





Lemma optimize_0plus_distributive_0 : forall a1 a3 : aexp, forall a2 : aeval (optimize_0plus a1) = aeval a1, forall IHa1 : aeval (optimize_0plus a3) = aeval a3, aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.

Proof.
(* We will proceed by induction on a1.
*)
  intros a1 a3 a2 IHa1.
(* We will need to use the induction hypothesis on a3.
*)
  generalize dependent a3.
induction a1 as [| a1' a2' IHa1']; rewrite IHa1'.
(* Case 1: a1 is ANum 0.
*)
  - simpl; rewrite IHa1.
(* Case 2: a1 is APlus.
*)
  - simpl; rewrite IHa1'; simpl; rewrite IHa1.
(* Case 3: a1 is AMinus.
*)
  - simpl; rewrite IHa1'; simpl; rewrite IHa1.
(* Case 4: a1 is AMult.
*)
  - simpl; rewrite IHa1'; simpl; rewrite IHa1.
(* All cases are proven.
*)
  
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #64)
Error in step "induction a1 as [| a1' a2' IHa1']; rewrite IHa1'.".
Message: Expects a disjunctive pattern with 4 branches..
Goal: forall a3 : aexp,
aeval (optimize_0plus a3) = aeval a3 ->
aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.


TRYING TO PROVE LEMMA
Lemma optimize_0plus_correctness_1 : forall a1 : aexp, forall a2 : aeval (optimize_0plus a1) = aeval a1, forall a3 : aexp,
aeval (optimize_0plus a3) = aeval a3 ->
aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)






Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Bool.Bool.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.EqNat. Import Nat.
From Coq Require Import Lia.
From Coq Require Import Lists.List. Import ListNotations.
From Coq Require Import Strings.String.
From LF Require Import Maps.









Module AExp.



Inductive aexp : Type :=
  | ANum (n : nat)
  | APlus (a1 a2 : aexp)
  | AMinus (a1 a2 : aexp)
  | AMult (a1 a2 : aexp).

Inductive bexp : Type :=
  | BTrue
  | BFalse
  | BEq (a1 a2 : aexp)
  | BNeq (a1 a2 : aexp)
  | BLe (a1 a2 : aexp)
  | BGt (a1 a2 : aexp)
  | BNot (b : bexp)
  | BAnd (b1 b2 : bexp).












Fixpoint aeval (a : aexp) : nat :=
  match a with
  | ANum n => n
  | APlus  a1 a2 => (aeval a1) + (aeval a2)
  | AMinus a1 a2 => (aeval a1) - (aeval a2)
  | AMult  a1 a2 => (aeval a1) * (aeval a2)
  end.

Example test_aeval1:
  aeval (APlus (ANum 2) (ANum 2)) = 4.
Proof. reflexivity. Qed.



Fixpoint beval (b : bexp) : bool :=
  match b with
  | BTrue       => true
  | BFalse      => false
  | BEq a1 a2   => (aeval a1) =? (aeval a2)
  | BNeq a1 a2  => negb ((aeval a1) =? (aeval a2))
  | BLe a1 a2   => (aeval a1) <=? (aeval a2)
  | BGt a1 a2   => negb ((aeval a1) <=? (aeval a2))
  | BNot b1     => negb (beval b1)
  | BAnd b1 b2  => andb (beval b1) (beval b2)
  end.






Fixpoint optimize_0plus (a:aexp) : aexp :=
  match a with
  | ANum n => ANum n
  | APlus (ANum 0) e2 => optimize_0plus e2
  | APlus  e1 e2 => APlus  (optimize_0plus e1) (optimize_0plus e2)
  | AMinus e1 e2 => AMinus (optimize_0plus e1) (optimize_0plus e2)
  | AMult  e1 e2 => AMult  (optimize_0plus e1) (optimize_0plus e2)
  end.



Example test_optimize_0plus:
  optimize_0plus (APlus (ANum 2)
                        (APlus (ANum 0)
                               (APlus (ANum 0) (ANum 1))))
  = APlus (ANum 2) (ANum 1).
Proof. reflexivity. Qed.





Lemma optimize_0plus_correctness_1 : forall a1 : aexp, forall a2 : aeval (optimize_0plus a1) = aeval a1, forall a3 : aexp,
aeval (optimize_0plus a3) = aeval a3 ->
aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.

Proof.
intros a1 a2 a3 a4.
destruct a1 as [| a1_num n | a1_plus a1_left a1_right | a1_minus a1_left a1_right | a1_mult a1_left a1_right].
- (* Case ANum *)
    simpl.
rewrite a2.
reflexivity.
- (* Case APlus *)
    simpl.
rewrite a2.
rewrite a4.
reflexivity.
- (* Case AMinus *)
    simpl.
rewrite a2.
rewrite a4.
reflexivity.
- (* Case AMult *)
    simpl.
rewrite a2.
rewrite a4.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #62)
Error in step "destruct a1 as [| a1_num n | a1_plus a1_left a1_right | a1_minus a1_left a1_right | a1_mult a1_left a1_right].".
Message: Expects a disjunctive pattern with 4 branches..
Goal: aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.


TRYING TO PROVE LEMMA
Lemma optimize_0plus_distributive_2 : forall a1 : aexp, forall a2 : aeval (optimize_0plus a1) = aeval a1, forall a3 : aexp, forall a4 : aeval (optimize_0plus a3) = aeval a3, aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)






Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Bool.Bool.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.EqNat. Import Nat.
From Coq Require Import Lia.
From Coq Require Import Lists.List. Import ListNotations.
From Coq Require Import Strings.String.
From LF Require Import Maps.









Module AExp.



Inductive aexp : Type :=
  | ANum (n : nat)
  | APlus (a1 a2 : aexp)
  | AMinus (a1 a2 : aexp)
  | AMult (a1 a2 : aexp).

Inductive bexp : Type :=
  | BTrue
  | BFalse
  | BEq (a1 a2 : aexp)
  | BNeq (a1 a2 : aexp)
  | BLe (a1 a2 : aexp)
  | BGt (a1 a2 : aexp)
  | BNot (b : bexp)
  | BAnd (b1 b2 : bexp).












Fixpoint aeval (a : aexp) : nat :=
  match a with
  | ANum n => n
  | APlus  a1 a2 => (aeval a1) + (aeval a2)
  | AMinus a1 a2 => (aeval a1) - (aeval a2)
  | AMult  a1 a2 => (aeval a1) * (aeval a2)
  end.

Example test_aeval1:
  aeval (APlus (ANum 2) (ANum 2)) = 4.
Proof. reflexivity. Qed.



Fixpoint beval (b : bexp) : bool :=
  match b with
  | BTrue       => true
  | BFalse      => false
  | BEq a1 a2   => (aeval a1) =? (aeval a2)
  | BNeq a1 a2  => negb ((aeval a1) =? (aeval a2))
  | BLe a1 a2   => (aeval a1) <=? (aeval a2)
  | BGt a1 a2   => negb ((aeval a1) <=? (aeval a2))
  | BNot b1     => negb (beval b1)
  | BAnd b1 b2  => andb (beval b1) (beval b2)
  end.






Fixpoint optimize_0plus (a:aexp) : aexp :=
  match a with
  | ANum n => ANum n
  | APlus (ANum 0) e2 => optimize_0plus e2
  | APlus  e1 e2 => APlus  (optimize_0plus e1) (optimize_0plus e2)
  | AMinus e1 e2 => AMinus (optimize_0plus e1) (optimize_0plus e2)
  | AMult  e1 e2 => AMult  (optimize_0plus e1) (optimize_0plus e2)
  end.



Example test_optimize_0plus:
  optimize_0plus (APlus (ANum 2)
                        (APlus (ANum 0)
                               (APlus (ANum 0) (ANum 1))))
  = APlus (ANum 2) (ANum 1).
Proof. reflexivity. Qed.





Lemma optimize_0plus_distributive_2 : forall a1 : aexp, forall a2 : aeval (optimize_0plus a1) = aeval a1, forall a3 : aexp, forall a4 : aeval (optimize_0plus a3) = aeval a3, aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.

Proof.
(* We will proceed by induction on a1 and a3.
*)
  intros a1 H1 a3 H3.
(* We will need to use the induction hypothesis later, so we name it.
*)
  Definition H := fun a1 a3 => aeval (optimize_0plus a1) = aeval a1 /\ aeval (optimize_0plus a3) = aeval a3.
(* We will also need to use the induction hypothesis for the recursive case.
*)
  Definition Hrec := fun a1 a3 => aeval (optimize_0plus (APlus a1 a3)) = aeval a1 + aeval a3.
(* We will now proceed by induction on a1.
*)
  induction a1 as [| a1' a2' IH1' a1'' a2'' IH1'']; intros a3.
(* Base case: a1 is ANum.
*)
  - simpl.
(* We know that aeval (optimize_0plus a3) = aeval a3 by the induction hypothesis for a3.
*)
    rewrite H3.
(* We also know that aeval (ANum 0) = 0.
*)
    reflexivity.
(* Inductive case: a1 is APlus.
*)
  - simpl.
(* We know that aeval (optimize_0plus a1') = aeval a1' and aeval (optimize_0plus a3) = aeval a3 by the induction hypothesis for a1' and a3.
*)
    rewrite H1', H3.
(* We also know that aeval (APlus a1' a2') = aeval a1' + aeval a2' and aeval (APlus a1'' a2'') = aeval a1'' + aeval a2''.
*)
    rewrite IH1', IH1''.
(* Therefore, the statement holds.
*)
    reflexivity.
(* Inductive case: a1 is AMinus or AMult.
*)
  - simpl.
(* We know that aeval (optimize_0plus a1') = aeval a1
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #66)
Error in step "induction a1 as [| a1' a2' IH1' a1'' a2'' IH1'']; intros a3.".
Message: Expects a disjunctive pattern with 4 branches..
Goal: aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.


TRYING TO PROVE LEMMA
Lemma optimize_0plus_distributive_3 : forall a1 : aexp, forall H1 : aeval (optimize_0plus a1) = aeval a1, forall a3 : aexp, forall H3 : aeval (optimize_0plus a3) = aeval a3, aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)






Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Bool.Bool.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.EqNat. Import Nat.
From Coq Require Import Lia.
From Coq Require Import Lists.List. Import ListNotations.
From Coq Require Import Strings.String.
From LF Require Import Maps.









Module AExp.



Inductive aexp : Type :=
  | ANum (n : nat)
  | APlus (a1 a2 : aexp)
  | AMinus (a1 a2 : aexp)
  | AMult (a1 a2 : aexp).

Inductive bexp : Type :=
  | BTrue
  | BFalse
  | BEq (a1 a2 : aexp)
  | BNeq (a1 a2 : aexp)
  | BLe (a1 a2 : aexp)
  | BGt (a1 a2 : aexp)
  | BNot (b : bexp)
  | BAnd (b1 b2 : bexp).












Fixpoint aeval (a : aexp) : nat :=
  match a with
  | ANum n => n
  | APlus  a1 a2 => (aeval a1) + (aeval a2)
  | AMinus a1 a2 => (aeval a1) - (aeval a2)
  | AMult  a1 a2 => (aeval a1) * (aeval a2)
  end.

Example test_aeval1:
  aeval (APlus (ANum 2) (ANum 2)) = 4.
Proof. reflexivity. Qed.



Fixpoint beval (b : bexp) : bool :=
  match b with
  | BTrue       => true
  | BFalse      => false
  | BEq a1 a2   => (aeval a1) =? (aeval a2)
  | BNeq a1 a2  => negb ((aeval a1) =? (aeval a2))
  | BLe a1 a2   => (aeval a1) <=? (aeval a2)
  | BGt a1 a2   => negb ((aeval a1) <=? (aeval a2))
  | BNot b1     => negb (beval b1)
  | BAnd b1 b2  => andb (beval b1) (beval b2)
  end.






Fixpoint optimize_0plus (a:aexp) : aexp :=
  match a with
  | ANum n => ANum n
  | APlus (ANum 0) e2 => optimize_0plus e2
  | APlus  e1 e2 => APlus  (optimize_0plus e1) (optimize_0plus e2)
  | AMinus e1 e2 => AMinus (optimize_0plus e1) (optimize_0plus e2)
  | AMult  e1 e2 => AMult  (optimize_0plus e1) (optimize_0plus e2)
  end.



Example test_optimize_0plus:
  optimize_0plus (APlus (ANum 2)
                        (APlus (ANum 0)
                               (APlus (ANum 0) (ANum 1))))
  = APlus (ANum 2) (ANum 1).
Proof. reflexivity. Qed.





Lemma optimize_0plus_distributive_3 : forall a1 : aexp, forall H1 : aeval (optimize_0plus a1) = aeval a1, forall a3 : aexp, forall H3 : aeval (optimize_0plus a3) = aeval a3, aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.

Proof.
intros a1 H1 a3 H3.
generalize dependent a1.
induction a1 as [| a1' a1'' H1' IH1' a1''' H1''' IH1''']; simpl.
- (* ANum case *)
    simpl in H1.
rewrite H1 in H3.
simpl in H3.
rewrite H3.
reflexivity.
- (* APlus case *)
    simpl in H1.
rewrite H1 in H3.
simpl in H3.
rewrite H3.
simpl.
rewrite IH1'.
rewrite IH1''.
reflexivity.
- (* AMinus case *)
    simpl in H1.
rewrite H1 in H3.
simpl in H3.
rewrite H3.
simpl.
rewrite IH1'.
rewrite IH1''.
reflexivity.
- (* AMult case *)
    simpl in H1.
rewrite H1 in H3.
simpl in H3.
rewrite H3.
simpl.
rewrite IH1'.
rewrite IH1''.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #64)
Error in step "induction a1 as [| a1' a1'' H1' IH1' a1''' H1''' IH1''']; simpl.".
Message: Expects a disjunctive pattern with 4 branches..
Goal: forall a1 : aexp,
aeval (optimize_0plus a1) = aeval a1 ->
aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.


TRYING TO PROVE LEMMA
Lemma optimize_0plus_distributive_4 : forall a3 : aexp, forall H3 : aeval (optimize_0plus a3) = aeval a3, forall a1 : aexp,
aeval (optimize_0plus a1) = aeval a1 ->
aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)






Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From Coq Require Import Bool.Bool.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.EqNat. Import Nat.
From Coq Require Import Lia.
From Coq Require Import Lists.List. Import ListNotations.
From Coq Require Import Strings.String.
From LF Require Import Maps.









Module AExp.



Inductive aexp : Type :=
  | ANum (n : nat)
  | APlus (a1 a2 : aexp)
  | AMinus (a1 a2 : aexp)
  | AMult (a1 a2 : aexp).

Inductive bexp : Type :=
  | BTrue
  | BFalse
  | BEq (a1 a2 : aexp)
  | BNeq (a1 a2 : aexp)
  | BLe (a1 a2 : aexp)
  | BGt (a1 a2 : aexp)
  | BNot (b : bexp)
  | BAnd (b1 b2 : bexp).












Fixpoint aeval (a : aexp) : nat :=
  match a with
  | ANum n => n
  | APlus  a1 a2 => (aeval a1) + (aeval a2)
  | AMinus a1 a2 => (aeval a1) - (aeval a2)
  | AMult  a1 a2 => (aeval a1) * (aeval a2)
  end.

Example test_aeval1:
  aeval (APlus (ANum 2) (ANum 2)) = 4.
Proof. reflexivity. Qed.



Fixpoint beval (b : bexp) : bool :=
  match b with
  | BTrue       => true
  | BFalse      => false
  | BEq a1 a2   => (aeval a1) =? (aeval a2)
  | BNeq a1 a2  => negb ((aeval a1) =? (aeval a2))
  | BLe a1 a2   => (aeval a1) <=? (aeval a2)
  | BGt a1 a2   => negb ((aeval a1) <=? (aeval a2))
  | BNot b1     => negb (beval b1)
  | BAnd b1 b2  => andb (beval b1) (beval b2)
  end.






Fixpoint optimize_0plus (a:aexp) : aexp :=
  match a with
  | ANum n => ANum n
  | APlus (ANum 0) e2 => optimize_0plus e2
  | APlus  e1 e2 => APlus  (optimize_0plus e1) (optimize_0plus e2)
  | AMinus e1 e2 => AMinus (optimize_0plus e1) (optimize_0plus e2)
  | AMult  e1 e2 => AMult  (optimize_0plus e1) (optimize_0plus e2)
  end.



Example test_optimize_0plus:
  optimize_0plus (APlus (ANum 2)
                        (APlus (ANum 0)
                               (APlus (ANum 0) (ANum 1))))
  = APlus (ANum 2) (ANum 1).
Proof. reflexivity. Qed.





Lemma optimize_0plus_distributive_4 : forall a3 : aexp, forall H3 : aeval (optimize_0plus a3) = aeval a3, forall a1 : aexp,
aeval (optimize_0plus a1) = aeval a1 ->
aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.

Proof.
intros a3 H3 a1 H1.
destruct a1 as [| n | a1 a2 | a1 a2 | a1 a2].
- simpl.
rewrite H3.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
- simpl.
rewrite H1.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #62)
Error in step "destruct a1 as [| n | a1 a2 | a1 a2 | a1 a2].".
Message: Expects a disjunctive pattern with 4 branches..
Goal: aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.


TRYING TO PROVE LEMMA
Lemma optimize_0plus_distributive_5 : forall a3 : aexp, forall H3 : aeval (optimize_0plus a3) = aeval a3, forall a1 : aexp, forall H1 : aeval (optimize_0plus a1) = aeval a1, aeval
  match a1 with
  | ANum 0 => optimize_0plus a3
  | _ => APlus (optimize_0plus a1) (optimize_0plus a3)
  end = aeval a1 + aeval a3.


Error proving optimize_0plus_sound
MAX LEMMA DEPTH REACHED. GIVING UP.