PROVING trans_eq_exercise
ATTEMPTED EXAMPLE PROOF (LEMMAS USED: 0)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Poly.






Theorem silly1 : forall (n m : nat),
  n = m ->
  n = m.
Proof.
  intros n m eq.



  apply eq.  Qed.



Theorem silly2 : forall (n m o p : nat),
  n = m ->
  (n = m -> [n;o] = [m;p]) ->
  [n;o] = [m;p].
Proof.
  intros n m o p eq1 eq2.
  apply eq2. apply eq1.  Qed.



Theorem silly2a : forall (n m : nat),
  (n,n) = (m,m)  ->
  (forall (q r : nat), (q,q) = (r,r) -> [q] = [r]) ->
  [n] = [m].
Proof.
  intros n m eq1 eq2.
  apply eq2. apply eq1.  Qed.


Theorem silly_ex : forall p,
  (forall n, even n = true -> even (S n) = false) ->
  (forall n, even n = false -> odd n = true) ->
  even p = true ->
  odd (S p) = true.
Proof.
  intros eq1 eq2 eq3 eq4.
  apply eq3.
  apply eq2.
  apply eq4.
  Qed.




Theorem silly3 : forall (n m : nat),
  n = m ->
  m = n.
Proof.
  intros n m H.

  

  Fail apply H.

  

  symmetry. apply H.  Qed.



Theorem rev_exercise1 : forall (l l' : list nat),
  l = rev l' ->
  l' = rev l.
Proof.
  intros l l' eq.
  rewrite -> eq.
  symmetry.
  apply rev_involutive.
Qed.












Example trans_eq_example : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  rewrite -> eq1. rewrite -> eq2. reflexivity.  Qed.



Theorem trans_eq : forall (X:Type) (n m o : X),
  n = m -> m = o -> n = o.
Proof.
  intros X n m o eq1 eq2. rewrite -> eq1. rewrite -> eq2.
  reflexivity.  Qed.



Example trans_eq_example' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.



  apply trans_eq with (m:=[c;d]).
  apply eq1. apply eq2.   Qed.





Example trans_eq_example'' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  transitivity [c;d].
  apply eq1. apply eq2.   Qed.




Example trans_eq_exercise : forall (n m o p : nat),
     m = (minustwo o) ->
     (n + p) = m ->
     (n + p) = (minustwo o).

Proof.
(* We will proceed by induction on the equality n + p = m.
*)
  intros n m o p H1 H2.
(* We will need the following lemmas: *)
  (* Lemma minustwo_plus: forall n, minustwo (S n) = n.
*)
  (* Lemma plus_n_Sm: forall n m, n + S m = S (n + m).
*)
  (* Lemma plus_n_O: forall n, n + O = n.
*)
  (* Lemma plus_comm: forall n m, n + m = m + n.
*)
  (* Lemma plus_assoc: forall n m p, n + (m + p) = (n + m) + p.
*)
  (* Lemma plus_O_n: forall n, O + n = n.
*)
  (* Lemma plus_S_m: forall n m, S (n + m) = n + S m.
*)
  (* Lemma plus_cancel_left: forall n m p, n + m = n + p -> m = p.
*)
  (* Lemma plus_cancel_right: forall n m p, n + m = p + m -> n = p.
*)
  (* Lemma plus_cancel_both: forall n m p q, n + m = p + q -> n = p /\ m = q.
*)
  (* Lemma plus_cancel_swap: forall n m p q, n + m = p + q -> m + n = q + p.
*)
  (* Lemma plus_cancel_add_left: forall n m p, n + m = n + p -> m = p.
*)
  (* Lemma plus_cancel_add_right: forall n m p, n + m = p + n -> m = p.
*)
  (* Lemma plus_cancel_add_both: forall n m p q, n + m = p + q -> m = p /\ n = q.
*)
  (* Lemma plus_cancel_add_swap: forall n m p q, n + m = p + q -> m + n = q + p.
*)
  (* Lemma plus_cancel_Sn_Sm: forall n m, S n + m = S (n + m).
*)
  (* Lemma plus_
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN EXAMPLE PROOF (FRAGMENT #148)
Error after step "intros n m o p H1 H2.".
Message: There are still unproven goals.
Goal: n + p = minustwo o.


TRYING TO PROVE LEMMA
Lemma minustwo_addition_commutativity_0 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Poly.






Theorem silly1 : forall (n m : nat),
  n = m ->
  n = m.
Proof.
  intros n m eq.



  apply eq.  Qed.



Theorem silly2 : forall (n m o p : nat),
  n = m ->
  (n = m -> [n;o] = [m;p]) ->
  [n;o] = [m;p].
Proof.
  intros n m o p eq1 eq2.
  apply eq2. apply eq1.  Qed.



Theorem silly2a : forall (n m : nat),
  (n,n) = (m,m)  ->
  (forall (q r : nat), (q,q) = (r,r) -> [q] = [r]) ->
  [n] = [m].
Proof.
  intros n m eq1 eq2.
  apply eq2. apply eq1.  Qed.


Theorem silly_ex : forall p,
  (forall n, even n = true -> even (S n) = false) ->
  (forall n, even n = false -> odd n = true) ->
  even p = true ->
  odd (S p) = true.
Proof.
  intros eq1 eq2 eq3 eq4.
  apply eq3.
  apply eq2.
  apply eq4.
  Qed.




Theorem silly3 : forall (n m : nat),
  n = m ->
  m = n.
Proof.
  intros n m H.

  

  Fail apply H.

  

  symmetry. apply H.  Qed.



Theorem rev_exercise1 : forall (l l' : list nat),
  l = rev l' ->
  l' = rev l.
Proof.
  intros l l' eq.
  rewrite -> eq.
  symmetry.
  apply rev_involutive.
Qed.












Example trans_eq_example : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  rewrite -> eq1. rewrite -> eq2. reflexivity.  Qed.



Theorem trans_eq : forall (X:Type) (n m o : X),
  n = m -> m = o -> n = o.
Proof.
  intros X n m o eq1 eq2. rewrite -> eq1. rewrite -> eq2.
  reflexivity.  Qed.



Example trans_eq_example' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.



  apply trans_eq with (m:=[c;d]).
  apply eq1. apply eq2.   Qed.





Example trans_eq_example'' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  transitivity [c;d].
  apply eq1. apply eq2.   Qed.




Lemma minustwo_addition_commutativity_0 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H1 in H2.
now rewrite H2.
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED EXAMPLE PROOF (LEMMAS USED: 1)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Poly.






Theorem silly1 : forall (n m : nat),
  n = m ->
  n = m.
Proof.
  intros n m eq.



  apply eq.  Qed.



Theorem silly2 : forall (n m o p : nat),
  n = m ->
  (n = m -> [n;o] = [m;p]) ->
  [n;o] = [m;p].
Proof.
  intros n m o p eq1 eq2.
  apply eq2. apply eq1.  Qed.



Theorem silly2a : forall (n m : nat),
  (n,n) = (m,m)  ->
  (forall (q r : nat), (q,q) = (r,r) -> [q] = [r]) ->
  [n] = [m].
Proof.
  intros n m eq1 eq2.
  apply eq2. apply eq1.  Qed.


Theorem silly_ex : forall p,
  (forall n, even n = true -> even (S n) = false) ->
  (forall n, even n = false -> odd n = true) ->
  even p = true ->
  odd (S p) = true.
Proof.
  intros eq1 eq2 eq3 eq4.
  apply eq3.
  apply eq2.
  apply eq4.
  Qed.




Theorem silly3 : forall (n m : nat),
  n = m ->
  m = n.
Proof.
  intros n m H.

  

  Fail apply H.

  

  symmetry. apply H.  Qed.



Theorem rev_exercise1 : forall (l l' : list nat),
  l = rev l' ->
  l' = rev l.
Proof.
  intros l l' eq.
  rewrite -> eq.
  symmetry.
  apply rev_involutive.
Qed.












Example trans_eq_example : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  rewrite -> eq1. rewrite -> eq2. reflexivity.  Qed.



Theorem trans_eq : forall (X:Type) (n m o : X),
  n = m -> m = o -> n = o.
Proof.
  intros X n m o eq1 eq2. rewrite -> eq1. rewrite -> eq2.
  reflexivity.  Qed.



Example trans_eq_example' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.



  apply trans_eq with (m:=[c;d]).
  apply eq1. apply eq2.   Qed.





Example trans_eq_example'' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  transitivity [c;d].
  apply eq1. apply eq2.   Qed.




Lemma minustwo_addition_commutativity_0 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H1 in H2.
now rewrite H2.
Qed.

Example trans_eq_exercise : forall (n m o p : nat),
     m = (minustwo o) ->
     (n + p) = m ->
     (n + p) = (minustwo o).

Proof.
(* We will proceed by induction on the equality n + p = m.
*)
  intros n m o p H1 H2.
(* We will need the following lemmas: *)
  (* Lemma minustwo_plus: forall n, minustwo (S n) = n.
*)
  (* Lemma plus_n_Sm: forall n m, n + S m = S (n + m).
*)
  (* Lemma plus_n_O: forall n, n + O = n.
*)
  (* Lemma plus_comm: forall n m, n + m = m + n.
*)
  (* Lemma plus_assoc: forall n m p, n + (m + p) = (n + m) + p.
*)
  (* Lemma plus_O_n: forall n, O + n = n.
*)
  (* Lemma plus_S_m: forall n m, S (n + m) = n + S m.
*)
  (* Lemma plus_cancel_left: forall n m p, n + m = n + p -> m = p.
*)
  (* Lemma plus_cancel_right: forall n m p, n + m = p + m -> n = p.
*)
  (* Lemma plus_cancel_both: forall n m p q, n + m = p + q -> n = p /\ m = q.
*)
  (* Lemma plus_cancel_swap: forall n m p q, n + m = p + q -> m + n = q + p.
*)
  (* Lemma plus_cancel_add_left: forall n m p, n + m = n + p -> m = p.
*)
  (* Lemma plus_cancel_add_right: forall n m p, n + m = p + n -> m = p.
*)
  (* Lemma plus_cancel_add_both: forall n m p q, n + m = p + q -> m = p /\ n = q.
*)
  (* Lemma plus_cancel_add_swap: forall n m p q, n + m = p + q -> m + n = q + p.
*)
  (* Lemma plus_cancel_Sn_Sm: forall n m, S n + m = S (n + m).
*)
  (* Lemma plus_

Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN EXAMPLE PROOF (FRAGMENT #160)
Error after step "intros n m o p H1 H2.".
Message: There are still unproven goals.
Goal: n + p = minustwo o.


TRYING TO PROVE LEMMA
Lemma minustwo_addition_commutativity_1 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Poly.






Theorem silly1 : forall (n m : nat),
  n = m ->
  n = m.
Proof.
  intros n m eq.



  apply eq.  Qed.



Theorem silly2 : forall (n m o p : nat),
  n = m ->
  (n = m -> [n;o] = [m;p]) ->
  [n;o] = [m;p].
Proof.
  intros n m o p eq1 eq2.
  apply eq2. apply eq1.  Qed.



Theorem silly2a : forall (n m : nat),
  (n,n) = (m,m)  ->
  (forall (q r : nat), (q,q) = (r,r) -> [q] = [r]) ->
  [n] = [m].
Proof.
  intros n m eq1 eq2.
  apply eq2. apply eq1.  Qed.


Theorem silly_ex : forall p,
  (forall n, even n = true -> even (S n) = false) ->
  (forall n, even n = false -> odd n = true) ->
  even p = true ->
  odd (S p) = true.
Proof.
  intros eq1 eq2 eq3 eq4.
  apply eq3.
  apply eq2.
  apply eq4.
  Qed.




Theorem silly3 : forall (n m : nat),
  n = m ->
  m = n.
Proof.
  intros n m H.

  

  Fail apply H.

  

  symmetry. apply H.  Qed.



Theorem rev_exercise1 : forall (l l' : list nat),
  l = rev l' ->
  l' = rev l.
Proof.
  intros l l' eq.
  rewrite -> eq.
  symmetry.
  apply rev_involutive.
Qed.












Example trans_eq_example : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  rewrite -> eq1. rewrite -> eq2. reflexivity.  Qed.



Theorem trans_eq : forall (X:Type) (n m o : X),
  n = m -> m = o -> n = o.
Proof.
  intros X n m o eq1 eq2. rewrite -> eq1. rewrite -> eq2.
  reflexivity.  Qed.



Example trans_eq_example' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.



  apply trans_eq with (m:=[c;d]).
  apply eq1. apply eq2.   Qed.





Example trans_eq_example'' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  transitivity [c;d].
  apply eq1. apply eq2.   Qed.




Lemma minustwo_addition_commutativity_0 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H1 in H2.
now rewrite H2.
Qed.

Lemma minustwo_addition_commutativity_1 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H2.
rewrite H1.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED EXAMPLE PROOF (LEMMAS USED: 2)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Poly.






Theorem silly1 : forall (n m : nat),
  n = m ->
  n = m.
Proof.
  intros n m eq.



  apply eq.  Qed.



Theorem silly2 : forall (n m o p : nat),
  n = m ->
  (n = m -> [n;o] = [m;p]) ->
  [n;o] = [m;p].
Proof.
  intros n m o p eq1 eq2.
  apply eq2. apply eq1.  Qed.



Theorem silly2a : forall (n m : nat),
  (n,n) = (m,m)  ->
  (forall (q r : nat), (q,q) = (r,r) -> [q] = [r]) ->
  [n] = [m].
Proof.
  intros n m eq1 eq2.
  apply eq2. apply eq1.  Qed.


Theorem silly_ex : forall p,
  (forall n, even n = true -> even (S n) = false) ->
  (forall n, even n = false -> odd n = true) ->
  even p = true ->
  odd (S p) = true.
Proof.
  intros eq1 eq2 eq3 eq4.
  apply eq3.
  apply eq2.
  apply eq4.
  Qed.




Theorem silly3 : forall (n m : nat),
  n = m ->
  m = n.
Proof.
  intros n m H.

  

  Fail apply H.

  

  symmetry. apply H.  Qed.



Theorem rev_exercise1 : forall (l l' : list nat),
  l = rev l' ->
  l' = rev l.
Proof.
  intros l l' eq.
  rewrite -> eq.
  symmetry.
  apply rev_involutive.
Qed.












Example trans_eq_example : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  rewrite -> eq1. rewrite -> eq2. reflexivity.  Qed.



Theorem trans_eq : forall (X:Type) (n m o : X),
  n = m -> m = o -> n = o.
Proof.
  intros X n m o eq1 eq2. rewrite -> eq1. rewrite -> eq2.
  reflexivity.  Qed.



Example trans_eq_example' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.



  apply trans_eq with (m:=[c;d]).
  apply eq1. apply eq2.   Qed.





Example trans_eq_example'' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  transitivity [c;d].
  apply eq1. apply eq2.   Qed.




Lemma minustwo_addition_commutativity_0 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H1 in H2.
now rewrite H2.
Qed.

Lemma minustwo_addition_commutativity_1 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H2.
rewrite H1.
reflexivity.
Qed.

Example trans_eq_exercise : forall (n m o p : nat),
     m = (minustwo o) ->
     (n + p) = m ->
     (n + p) = (minustwo o).

Proof.
(* We will proceed by induction on the equality n + p = m.
*)
  intros n m o p H1 H2.
(* We will need the following lemmas: *)
  (* Lemma minustwo_plus: forall n, minustwo (S n) = n.
*)
  (* Lemma plus_n_Sm: forall n m, n + S m = S (n + m).
*)
  (* Lemma plus_n_O: forall n, n + O = n.
*)
  (* Lemma plus_comm: forall n m, n + m = m + n.
*)
  (* Lemma plus_assoc: forall n m p, n + (m + p) = (n + m) + p.
*)
  (* Lemma plus_O_n: forall n, O + n = n.
*)
  (* Lemma plus_S_m: forall n m, S (n + m) = n + S m.
*)
  (* Lemma plus_cancel_left: forall n m p, n + m = n + p -> m = p.
*)
  (* Lemma plus_cancel_right: forall n m p, n + m = p + m -> n = p.
*)
  (* Lemma plus_cancel_both: forall n m p q, n + m = p + q -> n = p /\ m = q.
*)
  (* Lemma plus_cancel_swap: forall n m p q, n + m = p + q -> m + n = q + p.
*)
  (* Lemma plus_cancel_add_left: forall n m p, n + m = n + p -> m = p.
*)
  (* Lemma plus_cancel_add_right: forall n m p, n + m = p + n -> m = p.
*)
  (* Lemma plus_cancel_add_both: forall n m p q, n + m = p + q -> m = p /\ n = q.
*)
  (* Lemma plus_cancel_add_swap: forall n m p q, n + m = p + q -> m + n = q + p.
*)
  (* Lemma plus_cancel_Sn_Sm: forall n m, S n + m = S (n + m).
*)
  (* Lemma plus_


Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN EXAMPLE PROOF (FRAGMENT #174)
Error after step "intros n m o p H1 H2.".
Message: There are still unproven goals.
Goal: n + p = minustwo o.


TRYING TO PROVE LEMMA
Lemma minustwo_addition_commutativity_2 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Poly.






Theorem silly1 : forall (n m : nat),
  n = m ->
  n = m.
Proof.
  intros n m eq.



  apply eq.  Qed.



Theorem silly2 : forall (n m o p : nat),
  n = m ->
  (n = m -> [n;o] = [m;p]) ->
  [n;o] = [m;p].
Proof.
  intros n m o p eq1 eq2.
  apply eq2. apply eq1.  Qed.



Theorem silly2a : forall (n m : nat),
  (n,n) = (m,m)  ->
  (forall (q r : nat), (q,q) = (r,r) -> [q] = [r]) ->
  [n] = [m].
Proof.
  intros n m eq1 eq2.
  apply eq2. apply eq1.  Qed.


Theorem silly_ex : forall p,
  (forall n, even n = true -> even (S n) = false) ->
  (forall n, even n = false -> odd n = true) ->
  even p = true ->
  odd (S p) = true.
Proof.
  intros eq1 eq2 eq3 eq4.
  apply eq3.
  apply eq2.
  apply eq4.
  Qed.




Theorem silly3 : forall (n m : nat),
  n = m ->
  m = n.
Proof.
  intros n m H.

  

  Fail apply H.

  

  symmetry. apply H.  Qed.



Theorem rev_exercise1 : forall (l l' : list nat),
  l = rev l' ->
  l' = rev l.
Proof.
  intros l l' eq.
  rewrite -> eq.
  symmetry.
  apply rev_involutive.
Qed.












Example trans_eq_example : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  rewrite -> eq1. rewrite -> eq2. reflexivity.  Qed.



Theorem trans_eq : forall (X:Type) (n m o : X),
  n = m -> m = o -> n = o.
Proof.
  intros X n m o eq1 eq2. rewrite -> eq1. rewrite -> eq2.
  reflexivity.  Qed.



Example trans_eq_example' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.



  apply trans_eq with (m:=[c;d]).
  apply eq1. apply eq2.   Qed.





Example trans_eq_example'' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  transitivity [c;d].
  apply eq1. apply eq2.   Qed.




Lemma minustwo_addition_commutativity_0 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H1 in H2.
now rewrite H2.
Qed.

Lemma minustwo_addition_commutativity_1 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H2.
rewrite H1.
reflexivity.
Qed.

Lemma minustwo_addition_commutativity_2 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H2.
rewrite H1.
reflexivity.
Qed.

Outdated contents in ..cache: recomputing
LEMMA PROOF IS VALID

ATTEMPTED EXAMPLE PROOF (LEMMAS USED: 3)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Poly.






Theorem silly1 : forall (n m : nat),
  n = m ->
  n = m.
Proof.
  intros n m eq.



  apply eq.  Qed.



Theorem silly2 : forall (n m o p : nat),
  n = m ->
  (n = m -> [n;o] = [m;p]) ->
  [n;o] = [m;p].
Proof.
  intros n m o p eq1 eq2.
  apply eq2. apply eq1.  Qed.



Theorem silly2a : forall (n m : nat),
  (n,n) = (m,m)  ->
  (forall (q r : nat), (q,q) = (r,r) -> [q] = [r]) ->
  [n] = [m].
Proof.
  intros n m eq1 eq2.
  apply eq2. apply eq1.  Qed.


Theorem silly_ex : forall p,
  (forall n, even n = true -> even (S n) = false) ->
  (forall n, even n = false -> odd n = true) ->
  even p = true ->
  odd (S p) = true.
Proof.
  intros eq1 eq2 eq3 eq4.
  apply eq3.
  apply eq2.
  apply eq4.
  Qed.




Theorem silly3 : forall (n m : nat),
  n = m ->
  m = n.
Proof.
  intros n m H.

  

  Fail apply H.

  

  symmetry. apply H.  Qed.



Theorem rev_exercise1 : forall (l l' : list nat),
  l = rev l' ->
  l' = rev l.
Proof.
  intros l l' eq.
  rewrite -> eq.
  symmetry.
  apply rev_involutive.
Qed.












Example trans_eq_example : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  rewrite -> eq1. rewrite -> eq2. reflexivity.  Qed.



Theorem trans_eq : forall (X:Type) (n m o : X),
  n = m -> m = o -> n = o.
Proof.
  intros X n m o eq1 eq2. rewrite -> eq1. rewrite -> eq2.
  reflexivity.  Qed.



Example trans_eq_example' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.



  apply trans_eq with (m:=[c;d]).
  apply eq1. apply eq2.   Qed.





Example trans_eq_example'' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  transitivity [c;d].
  apply eq1. apply eq2.   Qed.




Lemma minustwo_addition_commutativity_0 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H1 in H2.
now rewrite H2.
Qed.

Lemma minustwo_addition_commutativity_1 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H2.
rewrite H1.
reflexivity.
Qed.

Lemma minustwo_addition_commutativity_2 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H2.
rewrite H1.
reflexivity.
Qed.

Example trans_eq_exercise : forall (n m o p : nat),
     m = (minustwo o) ->
     (n + p) = m ->
     (n + p) = (minustwo o).

Proof.
(* We will proceed by induction on the equality n + p = m.
*)
  intros n m o p H1 H2.
(* We will need the following lemmas: *)
  (* Lemma minustwo_plus: forall n, minustwo (S n) = n.
*)
  (* Lemma plus_n_Sm: forall n m, n + S m = S (n + m).
*)
  (* Lemma plus_n_O: forall n, n + O = n.
*)
  (* Lemma plus_comm: forall n m, n + m = m + n.
*)
  (* Lemma plus_assoc: forall n m p, n + (m + p) = (n + m) + p.
*)
  (* Lemma plus_O_n: forall n, O + n = n.
*)
  (* Lemma plus_S_m: forall n m, S (n + m) = n + S m.
*)
  (* Lemma plus_cancel_left: forall n m p, n + m = n + p -> m = p.
*)
  (* Lemma plus_cancel_right: forall n m p, n + m = p + m -> n = p.
*)
  (* Lemma plus_cancel_both: forall n m p q, n + m = p + q -> n = p /\ m = q.
*)
  (* Lemma plus_cancel_swap: forall n m p q, n + m = p + q -> m + n = q + p.
*)
  (* Lemma plus_cancel_add_left: forall n m p, n + m = n + p -> m = p.
*)
  (* Lemma plus_cancel_add_right: forall n m p, n + m = p + n -> m = p.
*)
  (* Lemma plus_cancel_add_both: forall n m p q, n + m = p + q -> m = p /\ n = q.
*)
  (* Lemma plus_cancel_add_swap: forall n m p q, n + m = p + q -> m + n = q + p.
*)
  (* Lemma plus_cancel_Sn_Sm: forall n m, S n + m = S (n + m).
*)
  (* Lemma plus_



Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN EXAMPLE PROOF (FRAGMENT #188)
Error after step "intros n m o p H1 H2.".
Message: There are still unproven goals.
Goal: n + p = minustwo o.


TRYING TO PROVE LEMMA
Lemma minustwo_addition_commutativity_3 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Poly.






Theorem silly1 : forall (n m : nat),
  n = m ->
  n = m.
Proof.
  intros n m eq.



  apply eq.  Qed.



Theorem silly2 : forall (n m o p : nat),
  n = m ->
  (n = m -> [n;o] = [m;p]) ->
  [n;o] = [m;p].
Proof.
  intros n m o p eq1 eq2.
  apply eq2. apply eq1.  Qed.



Theorem silly2a : forall (n m : nat),
  (n,n) = (m,m)  ->
  (forall (q r : nat), (q,q) = (r,r) -> [q] = [r]) ->
  [n] = [m].
Proof.
  intros n m eq1 eq2.
  apply eq2. apply eq1.  Qed.


Theorem silly_ex : forall p,
  (forall n, even n = true -> even (S n) = false) ->
  (forall n, even n = false -> odd n = true) ->
  even p = true ->
  odd (S p) = true.
Proof.
  intros eq1 eq2 eq3 eq4.
  apply eq3.
  apply eq2.
  apply eq4.
  Qed.




Theorem silly3 : forall (n m : nat),
  n = m ->
  m = n.
Proof.
  intros n m H.

  

  Fail apply H.

  

  symmetry. apply H.  Qed.



Theorem rev_exercise1 : forall (l l' : list nat),
  l = rev l' ->
  l' = rev l.
Proof.
  intros l l' eq.
  rewrite -> eq.
  symmetry.
  apply rev_involutive.
Qed.












Example trans_eq_example : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  rewrite -> eq1. rewrite -> eq2. reflexivity.  Qed.



Theorem trans_eq : forall (X:Type) (n m o : X),
  n = m -> m = o -> n = o.
Proof.
  intros X n m o eq1 eq2. rewrite -> eq1. rewrite -> eq2.
  reflexivity.  Qed.



Example trans_eq_example' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.



  apply trans_eq with (m:=[c;d]).
  apply eq1. apply eq2.   Qed.





Example trans_eq_example'' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  transitivity [c;d].
  apply eq1. apply eq2.   Qed.




Lemma minustwo_addition_commutativity_0 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H1 in H2.
now rewrite H2.
Qed.

Lemma minustwo_addition_commutativity_1 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H2.
rewrite H1.
reflexivity.
Qed.

Lemma minustwo_addition_commutativity_2 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H2.
rewrite H1.
reflexivity.
Qed.

Lemma minustwo_addition_commutativity_3 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H2 in H1.
now rewrite H1.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #188)
Error in step "rewrite H2 in H1.".
Message: Found no subterm matching "n + p" in H1..
Goal: n + p = minustwo o.


TRYING TO PROVE LEMMA
Lemma minustwo_addition_commutativity_4 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.


ATTEMPTED LEMMA PROOF (LEMMAS USED: 5)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export Poly.






Theorem silly1 : forall (n m : nat),
  n = m ->
  n = m.
Proof.
  intros n m eq.



  apply eq.  Qed.



Theorem silly2 : forall (n m o p : nat),
  n = m ->
  (n = m -> [n;o] = [m;p]) ->
  [n;o] = [m;p].
Proof.
  intros n m o p eq1 eq2.
  apply eq2. apply eq1.  Qed.



Theorem silly2a : forall (n m : nat),
  (n,n) = (m,m)  ->
  (forall (q r : nat), (q,q) = (r,r) -> [q] = [r]) ->
  [n] = [m].
Proof.
  intros n m eq1 eq2.
  apply eq2. apply eq1.  Qed.


Theorem silly_ex : forall p,
  (forall n, even n = true -> even (S n) = false) ->
  (forall n, even n = false -> odd n = true) ->
  even p = true ->
  odd (S p) = true.
Proof.
  intros eq1 eq2 eq3 eq4.
  apply eq3.
  apply eq2.
  apply eq4.
  Qed.




Theorem silly3 : forall (n m : nat),
  n = m ->
  m = n.
Proof.
  intros n m H.

  

  Fail apply H.

  

  symmetry. apply H.  Qed.



Theorem rev_exercise1 : forall (l l' : list nat),
  l = rev l' ->
  l' = rev l.
Proof.
  intros l l' eq.
  rewrite -> eq.
  symmetry.
  apply rev_involutive.
Qed.












Example trans_eq_example : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  rewrite -> eq1. rewrite -> eq2. reflexivity.  Qed.



Theorem trans_eq : forall (X:Type) (n m o : X),
  n = m -> m = o -> n = o.
Proof.
  intros X n m o eq1 eq2. rewrite -> eq1. rewrite -> eq2.
  reflexivity.  Qed.



Example trans_eq_example' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.



  apply trans_eq with (m:=[c;d]).
  apply eq1. apply eq2.   Qed.





Example trans_eq_example'' : forall (a b c d e f : nat),
     [a;b] = [c;d] ->
     [c;d] = [e;f] ->
     [a;b] = [e;f].
Proof.
  intros a b c d e f eq1 eq2.
  transitivity [c;d].
  apply eq1. apply eq2.   Qed.




Lemma minustwo_addition_commutativity_0 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H1 in H2.
now rewrite H2.
Qed.

Lemma minustwo_addition_commutativity_1 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H2.
rewrite H1.
reflexivity.
Qed.

Lemma minustwo_addition_commutativity_2 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H2.
rewrite H1.
reflexivity.
Qed.

Lemma minustwo_addition_commutativity_4 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.

Proof.
intros n m o p H1 H2.
rewrite H2 in H1.
now rewrite H1.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #188)
Error in step "rewrite H2 in H1.".
Message: Found no subterm matching "n + p" in H1..
Goal: n + p = minustwo o.


TRYING TO PROVE LEMMA
Lemma minustwo_addition_commutativity_5 : forall n m o p : nat, forall H1 : m = minustwo o, forall H2 : n + p = m, n + p = minustwo o.


Error proving trans_eq_exercise
MAX LEMMA DEPTH REACHED. GIVING UP.