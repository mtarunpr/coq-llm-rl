








From Coq Require Import Arith.Arith.
From Coq Require Import Bool.Bool.
From Coq Require Import Datatypes.
Require Export Coq.Strings.String.
From Coq Require Import Logic.FunctionalExtensionality.
From Coq Require Import Lists.List.
Import ListNotations.





Locate "+".



Print Init.Nat.add.










Check String.eqb_refl :
  forall x : string, (x =? x)%string = true.


Check String.eqb_eq :
  forall n m : string, (n =? m)%string = true <-> n = m.
Check String.eqb_neq :
  forall n m : string, (n =? m)%string = false <-> n <> m.
Check String.eqb_spec :
  forall x y : string, reflect (x = y) (String.eqb x y).








Definition total_map (A : Type) := string -> A.





Definition t_empty {A : Type} (v : A) : total_map A :=
  (fun _ => v).



Definition t_update {A : Type} (m : total_map A)
                    (x : string) (v : A) :=
  fun x' => if String.eqb x x' then v else m x'.





Definition examplemap :=
  t_update (t_update (t_empty false) "foo" true)
           "bar" true.




Notation "'_' '!->' v" := (t_empty v)
  (at level 100, right associativity).

Example example_empty := (_ !-> false).


Notation "x '!->' v ';' m" := (t_update m x v)
                              (at level 100, v at next level, right associativity).



Definition examplemap' :=
  ( "bar" !-> true;
    "foo" !-> true;
    _     !-> false
  ).



Example update_example1 : examplemap' "baz" = false.
Proof. reflexivity. Qed.

Example update_example2 : examplemap' "foo" = true.
Proof. reflexivity. Qed.

Example update_example3 : examplemap' "quux" = false.
Proof. reflexivity. Qed.

Example update_example4 : examplemap' "bar" = true.
Proof. reflexivity. Qed.









Lemma t_apply_empty : forall (A : Type) (x : string) (v : A),
  (_ !-> v) x = v.
Proof.
  reflexivity. Qed.




Lemma t_update_eq : forall (A : Type) (m : total_map A) x v,
  (x !-> v ; m) x = v.
Proof.
  intros. unfold t_update. rewrite eqb_refl. reflexivity.
Qed.




Theorem t_update_neq : forall (A : Type) (m : total_map A) x1 x2 v,
  x1 <> x2 ->
  (x1 !-> v ; m) x2 = m x2.
Proof.
  intros A m x1 x2 v H.
  unfold t_update. destruct (eqb_spec x1 x2). exfalso. apply H. apply e. reflexivity.
Qed.




Lemma t_update_shadow : forall (A : Type) (m : total_map A) x v1 v2,
  (x !-> v2 ; x !-> v1 ; m) = (x !-> v2 ; m).
Proof.
  intros A m x v1 v2.
  apply functional_extensionality. intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [_ | _]. reflexivity. reflexivity.
Qed.



Theorem t_update_same : forall (A : Type) (m : total_map A) x,
  (x !-> m x ; m) = m.
Proof.
  intros A m x.
  apply functional_extensionality.
  intros x'.
  unfold t_update.
  destruct (eqb_spec x x') as [H | _]. rewrite H. reflexivity. reflexivity.
Qed.






Lemma impossible_equality_under_strict_inequality_1 : forall A : Type, forall m : total_map A, forall v1 v2 : A, forall x : string, forall Hneq : x <> x, (if (x =? x)%string
 then v1
 else if (x =? x)%string then v2 else m x) =
(if (x =? x)%string
 then v2
 else if (x =? x)%string then v1 else m x).

Proof.
intros A m v1 v2 x Hneq.
exfalso.
(* We apply the absurdity generated by the assumption that x is not equal to x *)
  apply Hneq; reflexivity.
Qed.

Lemma total_map_value_switch_iff_neq_keys_0 : forall A : Type, forall m : total_map A, forall v1 v2 : A, forall x1 x2 : string, forall Hneq : x2 <> x1, forall x : string, forall Hx1 : x1 = x, forall Hx2 : x2 = x, (if (x1 =? x)%string
 then v1
 else if (x2 =? x)%string then v2 else m x) =
(if (x2 =? x)%string
 then v2
 else if (x1 =? x)%string then v1 else m x).

Proof.
intros A m v1 v2 x1 x2 Hneq x Hx1 Hx2.
subst x1.
subst x2.
apply (@impossible_equality_under_strict_inequality_1 A m v1 v2 x Hneq).
Qed.

Theorem t_update_permute : forall (A : Type) (m : total_map A)
                                  v1 v2 x1 x2,
  x2 <> x1 ->
  (x1 !-> v1 ; x2 !-> v2 ; m)
  =
  (x2 !-> v2 ; x1 !-> v1 ; m).

Proof.
(* To prove two functions (total maps) are equal, we use extensionality.
This requires us to show that for every input the output is the same.
*)
  intros A m v1 v2 x1 x2 Hneq.
apply functional_extensionality.
intro x.
unfold t_update.
(* Now we must consider two cases: when 'x' is equal to 'x1' or 'x2', or when it is not.
*)
  destruct (string_dec x1 x) as [Hx1 | Hnx1]; destruct (string_dec x2 x) as [Hx2 | Hnx2].
- (* Case where x = x1 and x = x2, which is impossible due to our assumption *)
    apply (@total_map_value_switch_iff_neq_keys_0 A m v1 v2 x1 x2 Hneq x Hx1 Hx2).
- (* Case where x = x1 and x ≠ x2: the updates commute because we're outside the 'impact area' of x2's update *)
    rewrite <- Hx1.
rewrite Hneq.
reflexivity.
- (* Case where x ≠ x1 and x = x2: 
       This is the 'impact area' of x2's update, but x1's update does not affect the result *)
    reflexivity.
- (* Case where x ≠ x1 and x ≠ x2: neither updates have an 'impact', so the order does not matter *)
    reflexivity.
Qed.