PROVING total_relation_not_partial_function
ATTEMPTED THEOREM PROOF (LEMMAS USED: 0)




Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
From LF Require Export IndProp.






Definition relation (X: Type) := X -> X -> Prop.





Print le.

Check le : nat -> nat -> Prop.
Check le : relation nat.












Definition partial_function {X: Type} (R: relation X) :=
  forall x y1 y2 : X, R x y1 -> R x y2 -> y1 = y2.


Inductive next_nat : nat -> nat -> Prop :=
  | nn n : next_nat n (S n).

Check next_nat : relation nat.

Theorem next_nat_partial_function :
  partial_function next_nat.
Proof.
  unfold partial_function.
  intros x y1 y2 H1 H2.
  inversion H1. inversion H2.
  reflexivity.  Qed.



Theorem le_not_a_partial_function :
  ~ (partial_function le).
Proof.
  unfold not. unfold partial_function. intros Hc.
  assert (0 = 1) as Nonsense. {
    apply Hc with (x := 0).
    - apply le_n.
    - apply le_S. apply le_n. }
  discriminate Nonsense.   Qed.




Inductive total_relation : nat -> nat -> Prop :=
  | total_rel (n m : nat) : total_relation n m
.



Theorem total_relation_not_partial_function : ~ (partial_function total_relation).

Proof.
unfold partial_function.
intros H.
assert (total_relation 0 1) as H01.
constructor.
(* total_relation holds for any pair, including (0, 1) *)
  assert (total_relation 0 2) as H02.
constructor.
(* total_relation also holds for (0, 2) *)
  specialize (H 0 1 2 H01 H02).
inversion H.
(* This leads to a contradiction, because 1 cannot be equal to 2 *)

Qed.

Outdated contents in ..cache: recomputing
THEOREM PROOF IS VALID

