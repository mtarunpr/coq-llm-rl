PROVING ceval_step_more
ATTEMPTED THEOREM PROOF (LEMMAS USED: 0)







From Coq Require Import Lia.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.PeanoNat.
Import Nat.
From Coq Require Import Arith.EqNat.
From LF Require Import Imp Maps.



Fixpoint ceval_step1 (st : state) (c : com) : state :=
  match c with
    | <{ skip }> =>
        st
    | <{ l := a1 }> =>
        (l !-> aeval st a1 ; st)
    | <{ c1 ; c2 }> =>
        let st' := ceval_step1 st c1 in
        ceval_step1 st' c2
    | <{ if b then c1 else c2 end }> =>
        if (beval st b)
          then ceval_step1 st c1
          else ceval_step1 st c2
    | <{ while b1 do c1 end }> =>
        st  
  end.








Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :=
  match i with
  | O => empty_st
  | S i' =>
    match c with
      | <{ skip }> =>
          st
      | <{ l := a1 }> =>
          (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          let st' := ceval_step2 st c1 i' in
          ceval_step2 st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step2 st c1 i'
            else ceval_step2 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then let st' := ceval_step2 st c1 i' in
               ceval_step2 st' c i'
          else st
    end
  end.



Fixpoint ceval_step3 (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          match (ceval_step3 st c1 i') with
          | Some st' => ceval_step3 st' c2 i'
          | None => None
          end
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step3 st c1 i'
            else ceval_step3 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then match (ceval_step3 st c1 i') with
               | Some st' => ceval_step3 st' c i'
               | None => None
               end
          else Some st
    end
  end.



Notation "'LETOPT' x <== e1 'IN' e2"
   := (match e1 with
         | Some x => e2
         | None => None
       end)
   (right associativity, at level 60).

Fixpoint ceval_step (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          LETOPT st' <== ceval_step st c1 i' IN
          ceval_step st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step st c1 i'
            else ceval_step st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then LETOPT st' <== ceval_step st c1 i' IN
               ceval_step st' c i'
          else Some st
    end
  end.

Definition test_ceval (st:state) (c:com) :=
  match ceval_step st c 500 with
  | None    => None
  | Some st => Some (st X, st Y, st Z)
  end.

Example example_test_ceval :
     test_ceval empty_st

     <{ X := 2;
        if (X <= 1)
        then Y := 3
        else Z := 4
        end }>

     = Some (2, 0, 4).
Proof. reflexivity. Qed.



Definition pup_to_n : com
  := <{ Y := 0;
        while X > 0 do
          Y := Y + X;
          X := X - 1
        end }>.

Example pup_to_n_1 :
  test_ceval (X !-> 5) pup_to_n
  = Some (0, 15, 0).
Proof. reflexivity. Qed.




Definition peven : com
  := <{ Z := 0;
        while X > 0 do
          if Z = 0 then Z := 1 else Z := 0 end;
          X := X - 1
        end }>.

Example peven0 :
  test_ceval (X !-> 0) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven1 :
  test_ceval (X !-> 1) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.

Example peven2 :
  test_ceval (X !-> 2) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven3 :
  test_ceval (X !-> 3) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.

Example peven4 :
  test_ceval (X !-> 4) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.






Theorem ceval_step__ceval: forall c st st',
      (exists i, ceval_step st c i = Some st') ->
      st =[ c ]=> st'.
Proof.
  intros c st st' H.
  inversion H as [i E].
  clear H.
  generalize dependent st'.
  generalize dependent st.
  generalize dependent c.
  induction i as [| i' ].

  - 
    intros c st st' H. discriminate H.

  - 
    intros c st st' H.
    destruct c;
           simpl in H; inversion H; subst; clear H.
      +  apply E_Skip.
      +  apply E_Asgn. reflexivity.

      + 
        destruct (ceval_step st c1 i') eqn:Heqr1.
        * 
          apply E_Seq with s.
            apply IHi'. rewrite Heqr1. reflexivity.
            apply IHi'. assumption.
        * 
          discriminate H1.

      + 
        destruct (beval st b) eqn:Heqr.
        * 
          apply E_IfTrue. rewrite Heqr. reflexivity.
          apply IHi'. assumption.
        * 
          apply E_IfFalse. rewrite Heqr. reflexivity.
          apply IHi'. assumption.

      +  destruct (beval st b) eqn :Heqr.
        * 
         destruct (ceval_step st c i') eqn:Heqr1.
         { 
           apply E_WhileTrue with s. rewrite Heqr.
           reflexivity.
           apply IHi'. rewrite Heqr1. reflexivity.
           apply IHi'. assumption. }
         {  discriminate H1. }
        * 
          injection H1 as H2. rewrite <- H2.
          apply E_WhileFalse. apply Heqr. Qed.






Definition manual_grade_for_ceval_step__ceval_inf : option (nat*string) := None.




Theorem ceval_step_more : forall i1 i2 st st' c,
  i1 <= i2 ->
  ceval_step st c i1 = Some st' ->
  ceval_step st c i2 = Some st'.

Proof.
intros i1 i2 st st' c Hle Hceval1.
generalize dependent st'.
generalize dependent st.
generalize dependent c.
induction i2 as [|i2' IH]; intros c st st' Hle Hceval1.
- (* Case i2 = 0: contradiction, because i1 cannot be less than or equal to 0 with a Some result *)
    inversion Hle; subst; inversion Hceval1.
- (* Case i2 = S i2': We consider if i1 is zero or has a successor *)
    destruct i1 as [|i1'].
+ (* Case i1 = 0 *)
      inversion Hceval1.
+ (* Case i1 = S i1' *)
      simpl in Hceval1.
simpl.
(* we must show that ceval_step st c (S i2') = Some st' *)
      destruct c; try (rewrite Hceval1; reflexivity).
* (* Case c = c1; c2 *)
        remember (ceval_step st c1 i1') as st_c1_result.
destruct st_c1_result as [st_c1 | ]; inversion Hceval1; subst.
apply IH with (st':=st'0) in H1; try (apply le_S_n; assumption).
rewrite <- Heqst_c1_result in H1.
simpl.
rewrite H1.
now apply IH.
* (* Case c = if b then c1 else c2 *)
        destruct (beval st b);
          now apply IH.
* (* Case c = while b1 do c1 end *)
        destruct (beval st b1).
-- remember (ceval_step st c1 i1') as st_c1_result.
destruct st_c1_result as [st_c1 | ]; inversion Hceval1; subst.
apply IH with (st':=st'0) in H1; try (apply le_S_n; assumption).
rewrite <- Heqst_c1_result in H1.
simpl.
rewrite H1.
now apply IH.
-- simpl.
now rewrite Hceval1.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN THEOREM PROOF (FRAGMENT #240)
Error in step "induction i2 as [|i2' IH]; intros c st st' Hle Hceval1.".
Message: Hle is already used..
Goal: forall (c : com) (st st' : state),
ceval_step st c i1 = Some st' ->
ceval_step st c i2 = Some st'.

TRYING TO PROVE LEMMA
Lemma ceval_step_stability_with_increasing_iterations_0 : forall i1 i2 : nat, forall Hle : i1 <= i2, forall (c : com) (st st' : state),
ceval_step st c i1 = Some st' ->
ceval_step st c i2 = Some st'.

ATTEMPTED LEMMA PROOF (LEMMAS USED: 1)







From Coq Require Import Lia.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.PeanoNat.
Import Nat.
From Coq Require Import Arith.EqNat.
From LF Require Import Imp Maps.



Fixpoint ceval_step1 (st : state) (c : com) : state :=
  match c with
    | <{ skip }> =>
        st
    | <{ l := a1 }> =>
        (l !-> aeval st a1 ; st)
    | <{ c1 ; c2 }> =>
        let st' := ceval_step1 st c1 in
        ceval_step1 st' c2
    | <{ if b then c1 else c2 end }> =>
        if (beval st b)
          then ceval_step1 st c1
          else ceval_step1 st c2
    | <{ while b1 do c1 end }> =>
        st  
  end.








Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :=
  match i with
  | O => empty_st
  | S i' =>
    match c with
      | <{ skip }> =>
          st
      | <{ l := a1 }> =>
          (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          let st' := ceval_step2 st c1 i' in
          ceval_step2 st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step2 st c1 i'
            else ceval_step2 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then let st' := ceval_step2 st c1 i' in
               ceval_step2 st' c i'
          else st
    end
  end.



Fixpoint ceval_step3 (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          match (ceval_step3 st c1 i') with
          | Some st' => ceval_step3 st' c2 i'
          | None => None
          end
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step3 st c1 i'
            else ceval_step3 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then match (ceval_step3 st c1 i') with
               | Some st' => ceval_step3 st' c i'
               | None => None
               end
          else Some st
    end
  end.



Notation "'LETOPT' x <== e1 'IN' e2"
   := (match e1 with
         | Some x => e2
         | None => None
       end)
   (right associativity, at level 60).

Fixpoint ceval_step (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          LETOPT st' <== ceval_step st c1 i' IN
          ceval_step st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step st c1 i'
            else ceval_step st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then LETOPT st' <== ceval_step st c1 i' IN
               ceval_step st' c i'
          else Some st
    end
  end.

Definition test_ceval (st:state) (c:com) :=
  match ceval_step st c 500 with
  | None    => None
  | Some st => Some (st X, st Y, st Z)
  end.

Example example_test_ceval :
     test_ceval empty_st

     <{ X := 2;
        if (X <= 1)
        then Y := 3
        else Z := 4
        end }>

     = Some (2, 0, 4).
Proof. reflexivity. Qed.



Definition pup_to_n : com
  := <{ Y := 0;
        while X > 0 do
          Y := Y + X;
          X := X - 1
        end }>.

Example pup_to_n_1 :
  test_ceval (X !-> 5) pup_to_n
  = Some (0, 15, 0).
Proof. reflexivity. Qed.




Definition peven : com
  := <{ Z := 0;
        while X > 0 do
          if Z = 0 then Z := 1 else Z := 0 end;
          X := X - 1
        end }>.

Example peven0 :
  test_ceval (X !-> 0) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven1 :
  test_ceval (X !-> 1) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.

Example peven2 :
  test_ceval (X !-> 2) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven3 :
  test_ceval (X !-> 3) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.

Example peven4 :
  test_ceval (X !-> 4) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.






Theorem ceval_step__ceval: forall c st st',
      (exists i, ceval_step st c i = Some st') ->
      st =[ c ]=> st'.
Proof.
  intros c st st' H.
  inversion H as [i E].
  clear H.
  generalize dependent st'.
  generalize dependent st.
  generalize dependent c.
  induction i as [| i' ].

  - 
    intros c st st' H. discriminate H.

  - 
    intros c st st' H.
    destruct c;
           simpl in H; inversion H; subst; clear H.
      +  apply E_Skip.
      +  apply E_Asgn. reflexivity.

      + 
        destruct (ceval_step st c1 i') eqn:Heqr1.
        * 
          apply E_Seq with s.
            apply IHi'. rewrite Heqr1. reflexivity.
            apply IHi'. assumption.
        * 
          discriminate H1.

      + 
        destruct (beval st b) eqn:Heqr.
        * 
          apply E_IfTrue. rewrite Heqr. reflexivity.
          apply IHi'. assumption.
        * 
          apply E_IfFalse. rewrite Heqr. reflexivity.
          apply IHi'. assumption.

      +  destruct (beval st b) eqn :Heqr.
        * 
         destruct (ceval_step st c i') eqn:Heqr1.
         { 
           apply E_WhileTrue with s. rewrite Heqr.
           reflexivity.
           apply IHi'. rewrite Heqr1. reflexivity.
           apply IHi'. assumption. }
         {  discriminate H1. }
        * 
          injection H1 as H2. rewrite <- H2.
          apply E_WhileFalse. apply Heqr. Qed.






Definition manual_grade_for_ceval_step__ceval_inf : option (nat*string) := None.




Lemma ceval_step_stability_with_increasing_iterations_0 : forall i1 i2 : nat, forall Hle : i1 <= i2, forall (c : com) (st st' : state),
ceval_step st c i1 = Some st' ->
ceval_step st c i2 = Some st'.

Proof.
induction i1 as [|i1' IH]; intros i2 Hle c st st' Hceval1.
- (* i1 = 0 *)
    discriminate Hceval1.
- (* i1 = S i1' *)
    destruct i2 as [|i2']; [inversion Hle|].
simpl in Hceval1.
simpl.
(* Now the goal matches the form of the hypothesis *)
    destruct c.
+ (* skip *)
      assumption.
+ (* := *)
      assumption.
+ (* ; *)
      apply le_S_n in Hle.
remember (ceval_step st c1 i1') as ceval_st_c1.
destruct ceval_st_c1 as [st''|]; try discriminate.
apply IH in H; auto.
rewrite <- Heqceval_st_c1 in H.
apply IH with i2'; auto.
+ (* if *)
      apply le_S_n in Hle.
destruct (beval st b).
* apply IH with i2'; assumption.
* apply IH with i2'; assumption.
+ (* while *)
      apply le_S_n in Hle.
destruct (beval st b0) eqn: Hb0.
* remember (ceval_step st c i1') as ceval_st_c.
destruct ceval_st_c as [st''|]; try discriminate.
apply IH in H; auto.
rewrite <- Heqceval_st_c in H.
apply IH with i2'; auto.
* assumption.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #264)
Error in step "apply IH in H; auto.".
Message: No such hypothesis: H.
Goal: LETOPT st' <== ceval_step st c1 i2'
IN ceval_step st' c2 i2' = 
Some st'.

TRYING TO PROVE LEMMA
Lemma ceval_step_deterministic_stronger_1 : forall i1' : nat, forall IH : forall i2 : nat,
i1' <= i2 ->
forall (c : com) (st st' : state),
ceval_step st c i1' = Some st' ->
ceval_step st c i2 = Some st', forall i2' : nat, forall Hle : i1' <= i2', forall c1 c2 : com, forall st st' st'' : state, forall Heqceval_st_c1 : Some st'' = ceval_step st c1 i1', forall Hceval1 : ceval_step st'' c2 i1' = Some st', LETOPT st' <== ceval_step st c1 i2'
IN ceval_step st' c2 i2' = 
Some st'.

ATTEMPTED LEMMA PROOF (LEMMAS USED: 2)







From Coq Require Import Lia.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.PeanoNat.
Import Nat.
From Coq Require Import Arith.EqNat.
From LF Require Import Imp Maps.



Fixpoint ceval_step1 (st : state) (c : com) : state :=
  match c with
    | <{ skip }> =>
        st
    | <{ l := a1 }> =>
        (l !-> aeval st a1 ; st)
    | <{ c1 ; c2 }> =>
        let st' := ceval_step1 st c1 in
        ceval_step1 st' c2
    | <{ if b then c1 else c2 end }> =>
        if (beval st b)
          then ceval_step1 st c1
          else ceval_step1 st c2
    | <{ while b1 do c1 end }> =>
        st  
  end.








Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :=
  match i with
  | O => empty_st
  | S i' =>
    match c with
      | <{ skip }> =>
          st
      | <{ l := a1 }> =>
          (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          let st' := ceval_step2 st c1 i' in
          ceval_step2 st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step2 st c1 i'
            else ceval_step2 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then let st' := ceval_step2 st c1 i' in
               ceval_step2 st' c i'
          else st
    end
  end.



Fixpoint ceval_step3 (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          match (ceval_step3 st c1 i') with
          | Some st' => ceval_step3 st' c2 i'
          | None => None
          end
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step3 st c1 i'
            else ceval_step3 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then match (ceval_step3 st c1 i') with
               | Some st' => ceval_step3 st' c i'
               | None => None
               end
          else Some st
    end
  end.



Notation "'LETOPT' x <== e1 'IN' e2"
   := (match e1 with
         | Some x => e2
         | None => None
       end)
   (right associativity, at level 60).

Fixpoint ceval_step (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          LETOPT st' <== ceval_step st c1 i' IN
          ceval_step st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step st c1 i'
            else ceval_step st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then LETOPT st' <== ceval_step st c1 i' IN
               ceval_step st' c i'
          else Some st
    end
  end.

Definition test_ceval (st:state) (c:com) :=
  match ceval_step st c 500 with
  | None    => None
  | Some st => Some (st X, st Y, st Z)
  end.

Example example_test_ceval :
     test_ceval empty_st

     <{ X := 2;
        if (X <= 1)
        then Y := 3
        else Z := 4
        end }>

     = Some (2, 0, 4).
Proof. reflexivity. Qed.



Definition pup_to_n : com
  := <{ Y := 0;
        while X > 0 do
          Y := Y + X;
          X := X - 1
        end }>.

Example pup_to_n_1 :
  test_ceval (X !-> 5) pup_to_n
  = Some (0, 15, 0).
Proof. reflexivity. Qed.




Definition peven : com
  := <{ Z := 0;
        while X > 0 do
          if Z = 0 then Z := 1 else Z := 0 end;
          X := X - 1
        end }>.

Example peven0 :
  test_ceval (X !-> 0) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven1 :
  test_ceval (X !-> 1) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.

Example peven2 :
  test_ceval (X !-> 2) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven3 :
  test_ceval (X !-> 3) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.

Example peven4 :
  test_ceval (X !-> 4) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.






Theorem ceval_step__ceval: forall c st st',
      (exists i, ceval_step st c i = Some st') ->
      st =[ c ]=> st'.
Proof.
  intros c st st' H.
  inversion H as [i E].
  clear H.
  generalize dependent st'.
  generalize dependent st.
  generalize dependent c.
  induction i as [| i' ].

  - 
    intros c st st' H. discriminate H.

  - 
    intros c st st' H.
    destruct c;
           simpl in H; inversion H; subst; clear H.
      +  apply E_Skip.
      +  apply E_Asgn. reflexivity.

      + 
        destruct (ceval_step st c1 i') eqn:Heqr1.
        * 
          apply E_Seq with s.
            apply IHi'. rewrite Heqr1. reflexivity.
            apply IHi'. assumption.
        * 
          discriminate H1.

      + 
        destruct (beval st b) eqn:Heqr.
        * 
          apply E_IfTrue. rewrite Heqr. reflexivity.
          apply IHi'. assumption.
        * 
          apply E_IfFalse. rewrite Heqr. reflexivity.
          apply IHi'. assumption.

      +  destruct (beval st b) eqn :Heqr.
        * 
         destruct (ceval_step st c i') eqn:Heqr1.
         { 
           apply E_WhileTrue with s. rewrite Heqr.
           reflexivity.
           apply IHi'. rewrite Heqr1. reflexivity.
           apply IHi'. assumption. }
         {  discriminate H1. }
        * 
          injection H1 as H2. rewrite <- H2.
          apply E_WhileFalse. apply Heqr. Qed.






Definition manual_grade_for_ceval_step__ceval_inf : option (nat*string) := None.




Lemma ceval_step_deterministic_stronger_1 : forall i1' : nat, forall IH : forall i2 : nat,
i1' <= i2 ->
forall (c : com) (st st' : state),
ceval_step st c i1' = Some st' ->
ceval_step st c i2 = Some st', forall i2' : nat, forall Hle : i1' <= i2', forall c1 c2 : com, forall st st' st'' : state, forall Heqceval_st_c1 : Some st'' = ceval_step st c1 i1', forall Hceval1 : ceval_step st'' c2 i1' = Some st', LETOPT st' <== ceval_step st c1 i2'
IN ceval_step st' c2 i2' = 
Some st'.

Proof.
intros i1' IH i2' Hle c1 c2 st st' st'' Heqceval_st_c1 Hceval1.
(* Apply the induction hypothesis (IH) on the first command 'c1' to obtain the state 'st''' after i2' steps.
*)
  assert (Hceval2: ceval_step st c1 i2' = Some st'') by (apply (IH i2' Hle c1 _ _ Heqceval_st_c1)).
(* Now replace 'ceval_step st c1 i2' with 'Some st''' in the LETOPT statement.
*)
  rewrite Hceval2.
simpl.
(* Having completed evaluating 'c1' to 'st''' in i2' steps, now we apply IH on 'c2' to show that
     it can also be evaluated from 'st''' to 'st'''.
*)
  apply (IH i2' Hle c2 _ _ Hceval1).
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #234)
Error in step "assert (Hceval2: ceval_step st c1 i2' = Some st'') by (apply (IH i2' Hle c1 _ _ Heqceval_st_c1)).".
Message: In environment
i1' : nat
IH : forall i2 : nat,
     i1' <= i2 ->
     forall (c : com) (st st' : state),
     ceval_step st c i1' = Some st' ->
     ceval_step st c i2 = Some st'
i2' : nat
Hle : i1' <= i2'
c1, c2 : com
st, st', st'' : state
Heqceval_st_c1 : Some st'' = ceval_step st c1 i1'
Hceval1 : ceval_step st'' c2 i1' = Some st'
The term "Heqceval_st_c1" has type
 "Some st'' = ceval_step st c1 i1'"
while it is expected to have type
 "ceval_step ?st c1 i1' = Some ?st'"..
Goal: LETOPT st' <== ceval_step st c1 i2'
IN ceval_step st' c2 i2' = Some st'.

TRYING TO PROVE LEMMA
Lemma ceval_step_monotonic_2 : forall i1' : nat, forall IH : forall i2 : nat,
i1' <= i2 ->
forall (c : com) (st st' : state),
ceval_step st c i1' = Some st' ->
ceval_step st c i2 = Some st', forall i2' : nat, forall Hle : i1' <= i2', forall c1 c2 : com, forall st st' st'' : state, forall Heqceval_st_c1 : Some st'' = ceval_step st c1 i1', forall Hceval1 : ceval_step st'' c2 i1' = Some st', LETOPT st' <== ceval_step st c1 i2'
IN ceval_step st' c2 i2' = Some st'.

ATTEMPTED LEMMA PROOF (LEMMAS USED: 3)







From Coq Require Import Lia.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.PeanoNat.
Import Nat.
From Coq Require Import Arith.EqNat.
From LF Require Import Imp Maps.



Fixpoint ceval_step1 (st : state) (c : com) : state :=
  match c with
    | <{ skip }> =>
        st
    | <{ l := a1 }> =>
        (l !-> aeval st a1 ; st)
    | <{ c1 ; c2 }> =>
        let st' := ceval_step1 st c1 in
        ceval_step1 st' c2
    | <{ if b then c1 else c2 end }> =>
        if (beval st b)
          then ceval_step1 st c1
          else ceval_step1 st c2
    | <{ while b1 do c1 end }> =>
        st  
  end.








Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :=
  match i with
  | O => empty_st
  | S i' =>
    match c with
      | <{ skip }> =>
          st
      | <{ l := a1 }> =>
          (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          let st' := ceval_step2 st c1 i' in
          ceval_step2 st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step2 st c1 i'
            else ceval_step2 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then let st' := ceval_step2 st c1 i' in
               ceval_step2 st' c i'
          else st
    end
  end.



Fixpoint ceval_step3 (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          match (ceval_step3 st c1 i') with
          | Some st' => ceval_step3 st' c2 i'
          | None => None
          end
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step3 st c1 i'
            else ceval_step3 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then match (ceval_step3 st c1 i') with
               | Some st' => ceval_step3 st' c i'
               | None => None
               end
          else Some st
    end
  end.



Notation "'LETOPT' x <== e1 'IN' e2"
   := (match e1 with
         | Some x => e2
         | None => None
       end)
   (right associativity, at level 60).

Fixpoint ceval_step (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          LETOPT st' <== ceval_step st c1 i' IN
          ceval_step st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step st c1 i'
            else ceval_step st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then LETOPT st' <== ceval_step st c1 i' IN
               ceval_step st' c i'
          else Some st
    end
  end.

Definition test_ceval (st:state) (c:com) :=
  match ceval_step st c 500 with
  | None    => None
  | Some st => Some (st X, st Y, st Z)
  end.

Example example_test_ceval :
     test_ceval empty_st

     <{ X := 2;
        if (X <= 1)
        then Y := 3
        else Z := 4
        end }>

     = Some (2, 0, 4).
Proof. reflexivity. Qed.



Definition pup_to_n : com
  := <{ Y := 0;
        while X > 0 do
          Y := Y + X;
          X := X - 1
        end }>.

Example pup_to_n_1 :
  test_ceval (X !-> 5) pup_to_n
  = Some (0, 15, 0).
Proof. reflexivity. Qed.




Definition peven : com
  := <{ Z := 0;
        while X > 0 do
          if Z = 0 then Z := 1 else Z := 0 end;
          X := X - 1
        end }>.

Example peven0 :
  test_ceval (X !-> 0) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven1 :
  test_ceval (X !-> 1) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.

Example peven2 :
  test_ceval (X !-> 2) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven3 :
  test_ceval (X !-> 3) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.

Example peven4 :
  test_ceval (X !-> 4) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.






Theorem ceval_step__ceval: forall c st st',
      (exists i, ceval_step st c i = Some st') ->
      st =[ c ]=> st'.
Proof.
  intros c st st' H.
  inversion H as [i E].
  clear H.
  generalize dependent st'.
  generalize dependent st.
  generalize dependent c.
  induction i as [| i' ].

  - 
    intros c st st' H. discriminate H.

  - 
    intros c st st' H.
    destruct c;
           simpl in H; inversion H; subst; clear H.
      +  apply E_Skip.
      +  apply E_Asgn. reflexivity.

      + 
        destruct (ceval_step st c1 i') eqn:Heqr1.
        * 
          apply E_Seq with s.
            apply IHi'. rewrite Heqr1. reflexivity.
            apply IHi'. assumption.
        * 
          discriminate H1.

      + 
        destruct (beval st b) eqn:Heqr.
        * 
          apply E_IfTrue. rewrite Heqr. reflexivity.
          apply IHi'. assumption.
        * 
          apply E_IfFalse. rewrite Heqr. reflexivity.
          apply IHi'. assumption.

      +  destruct (beval st b) eqn :Heqr.
        * 
         destruct (ceval_step st c i') eqn:Heqr1.
         { 
           apply E_WhileTrue with s. rewrite Heqr.
           reflexivity.
           apply IHi'. rewrite Heqr1. reflexivity.
           apply IHi'. assumption. }
         {  discriminate H1. }
        * 
          injection H1 as H2. rewrite <- H2.
          apply E_WhileFalse. apply Heqr. Qed.






Definition manual_grade_for_ceval_step__ceval_inf : option (nat*string) := None.




Lemma ceval_step_monotonic_2 : forall i1' : nat, forall IH : forall i2 : nat,
i1' <= i2 ->
forall (c : com) (st st' : state),
ceval_step st c i1' = Some st' ->
ceval_step st c i2 = Some st', forall i2' : nat, forall Hle : i1' <= i2', forall c1 c2 : com, forall st st' st'' : state, forall Heqceval_st_c1 : Some st'' = ceval_step st c1 i1', forall Hceval1 : ceval_step st'' c2 i1' = Some st', LETOPT st' <== ceval_step st c1 i2'
IN ceval_step st' c2 i2' = Some st'.

Proof.
intros i1' IH i2' Hle c1 c2 st st' st'' Heqceval_st_c1 Hceval1.
unfold LETOPT in *.
(* Let's destruct the equality to replace the placeholder with the actual state *)
  destruct (ceval_step st c1 i2') as [st1|] eqn:Hceval2.
- (* If ceval_step on i2' returns Some, we replaced st' with st1 *)
    (* Applying IH to step to the larger i2' *)
    apply IH in Heqceval_st_c1 as Hceval_st_c1_i2'; try assumption.
(* Now that we know ceval_step st c1 i2' is Some st'', we proceed *)
    rewrite Hceval_st_c1_i2' in Hceval2.
injection Hceval2 as Heqst.
rewrite <- Heqst.
(* Applying IH to step c2 from i1' to i2' *)
    apply IH in Hceval1 as Hceval1_i2'; try assumption.
assumption.
- (* In the case of ceval_step on i2' returning None, it contradicts the IH which guarantees Some *)
    rewrite <- Heqceval_st_c1 in Hceval2.
discriminate Hceval2.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #234)
Error after step "intros i1' IH i2' Hle c1 c2 st st' st'' Heqceval_st_c1 Hceval1.".
Message: There are still unproven goals.
Goal: LETOPT st' <== ceval_step st c1 i2'
IN ceval_step st' c2 i2' = Some st'.

TRYING TO PROVE LEMMA
Lemma ceval_step_monotonic_3 : forall i1' : nat, forall IH : forall i2 : nat,
i1' <= i2 ->
forall (c : com) (st st' : state),
ceval_step st c i1' = Some st' ->
ceval_step st c i2 = Some st', forall i2' : nat, forall Hle : i1' <= i2', forall c1 c2 : com, forall st st' st'' : state, forall Heqceval_st_c1 : Some st'' = ceval_step st c1 i1', forall Hceval1 : ceval_step st'' c2 i1' = Some st', LETOPT st' <== ceval_step st c1 i2'
IN ceval_step st' c2 i2' = Some st'.

ATTEMPTED LEMMA PROOF (LEMMAS USED: 4)







From Coq Require Import Lia.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.PeanoNat.
Import Nat.
From Coq Require Import Arith.EqNat.
From LF Require Import Imp Maps.



Fixpoint ceval_step1 (st : state) (c : com) : state :=
  match c with
    | <{ skip }> =>
        st
    | <{ l := a1 }> =>
        (l !-> aeval st a1 ; st)
    | <{ c1 ; c2 }> =>
        let st' := ceval_step1 st c1 in
        ceval_step1 st' c2
    | <{ if b then c1 else c2 end }> =>
        if (beval st b)
          then ceval_step1 st c1
          else ceval_step1 st c2
    | <{ while b1 do c1 end }> =>
        st  
  end.








Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :=
  match i with
  | O => empty_st
  | S i' =>
    match c with
      | <{ skip }> =>
          st
      | <{ l := a1 }> =>
          (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          let st' := ceval_step2 st c1 i' in
          ceval_step2 st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step2 st c1 i'
            else ceval_step2 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then let st' := ceval_step2 st c1 i' in
               ceval_step2 st' c i'
          else st
    end
  end.



Fixpoint ceval_step3 (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          match (ceval_step3 st c1 i') with
          | Some st' => ceval_step3 st' c2 i'
          | None => None
          end
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step3 st c1 i'
            else ceval_step3 st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then match (ceval_step3 st c1 i') with
               | Some st' => ceval_step3 st' c i'
               | None => None
               end
          else Some st
    end
  end.



Notation "'LETOPT' x <== e1 'IN' e2"
   := (match e1 with
         | Some x => e2
         | None => None
       end)
   (right associativity, at level 60).

Fixpoint ceval_step (st : state) (c : com) (i : nat)
                    : option state :=
  match i with
  | O => None
  | S i' =>
    match c with
      | <{ skip }> =>
          Some st
      | <{ l := a1 }> =>
          Some (l !-> aeval st a1 ; st)
      | <{ c1 ; c2 }> =>
          LETOPT st' <== ceval_step st c1 i' IN
          ceval_step st' c2 i'
      | <{ if b then c1 else c2 end }> =>
          if (beval st b)
            then ceval_step st c1 i'
            else ceval_step st c2 i'
      | <{ while b1 do c1 end }> =>
          if (beval st b1)
          then LETOPT st' <== ceval_step st c1 i' IN
               ceval_step st' c i'
          else Some st
    end
  end.

Definition test_ceval (st:state) (c:com) :=
  match ceval_step st c 500 with
  | None    => None
  | Some st => Some (st X, st Y, st Z)
  end.

Example example_test_ceval :
     test_ceval empty_st

     <{ X := 2;
        if (X <= 1)
        then Y := 3
        else Z := 4
        end }>

     = Some (2, 0, 4).
Proof. reflexivity. Qed.



Definition pup_to_n : com
  := <{ Y := 0;
        while X > 0 do
          Y := Y + X;
          X := X - 1
        end }>.

Example pup_to_n_1 :
  test_ceval (X !-> 5) pup_to_n
  = Some (0, 15, 0).
Proof. reflexivity. Qed.




Definition peven : com
  := <{ Z := 0;
        while X > 0 do
          if Z = 0 then Z := 1 else Z := 0 end;
          X := X - 1
        end }>.

Example peven0 :
  test_ceval (X !-> 0) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven1 :
  test_ceval (X !-> 1) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.

Example peven2 :
  test_ceval (X !-> 2) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.

Example peven3 :
  test_ceval (X !-> 3) peven = Some (0, 0, 1).
Proof. reflexivity. Qed.

Example peven4 :
  test_ceval (X !-> 4) peven = Some (0, 0, 0).
Proof. reflexivity. Qed.






Theorem ceval_step__ceval: forall c st st',
      (exists i, ceval_step st c i = Some st') ->
      st =[ c ]=> st'.
Proof.
  intros c st st' H.
  inversion H as [i E].
  clear H.
  generalize dependent st'.
  generalize dependent st.
  generalize dependent c.
  induction i as [| i' ].

  - 
    intros c st st' H. discriminate H.

  - 
    intros c st st' H.
    destruct c;
           simpl in H; inversion H; subst; clear H.
      +  apply E_Skip.
      +  apply E_Asgn. reflexivity.

      + 
        destruct (ceval_step st c1 i') eqn:Heqr1.
        * 
          apply E_Seq with s.
            apply IHi'. rewrite Heqr1. reflexivity.
            apply IHi'. assumption.
        * 
          discriminate H1.

      + 
        destruct (beval st b) eqn:Heqr.
        * 
          apply E_IfTrue. rewrite Heqr. reflexivity.
          apply IHi'. assumption.
        * 
          apply E_IfFalse. rewrite Heqr. reflexivity.
          apply IHi'. assumption.

      +  destruct (beval st b) eqn :Heqr.
        * 
         destruct (ceval_step st c i') eqn:Heqr1.
         { 
           apply E_WhileTrue with s. rewrite Heqr.
           reflexivity.
           apply IHi'. rewrite Heqr1. reflexivity.
           apply IHi'. assumption. }
         {  discriminate H1. }
        * 
          injection H1 as H2. rewrite <- H2.
          apply E_WhileFalse. apply Heqr. Qed.






Definition manual_grade_for_ceval_step__ceval_inf : option (nat*string) := None.




Lemma ceval_step_monotonic_3 : forall i1' : nat, forall IH : forall i2 : nat,
i1' <= i2 ->
forall (c : com) (st st' : state),
ceval_step st c i1' = Some st' ->
ceval_step st c i2 = Some st', forall i2' : nat, forall Hle : i1' <= i2', forall c1 c2 : com, forall st st' st'' : state, forall Heqceval_st_c1 : Some st'' = ceval_step st c1 i1', forall Hceval1 : ceval_step st'' c2 i1' = Some st', LETOPT st' <== ceval_step st c1 i2'
IN ceval_step st' c2 i2' = Some st'.

Proof.
(* First, let's generalize our induction hypothesis and introduce all necessary variables.
*)
  intros i1' IH i2'.
generalize dependent i1'.
induction i2' as [| i2' IHstp]; intros i1' Hle c1 c2 st st' st'' Heqceval_st_c1 Hceval1.
- (* For i2' = O, this is a contradiction because i1' cannot be less than or equal to 0.
*)
    inversion Hle.
- (* Now consider i2' = S i2' and destruct i1' to apply the induction hypothesis.
*)
    destruct i1' as [| i1''].
+ (* When i1' = 0, ceval_step st c1 0 = None which contradicts Heqceval_st_c1 *)
      discriminate Heqceval_st_c1.
+ (* With i1' = S i1'', apply the induction hypothesis to get that 
        ceval_step st c1 i2' = Some st''.
*)
      apply IHstp with (i1' := i1'') in Heqceval_st_c1; try assumption.
(* Once we have that, we can use this result to apply the LETOPT macro expansion.
*)
      unfold ceval_step.
fold ceval_step.
rewrite Heqceval_st_c1.
apply IH.
auto with arith.
Qed.

Outdated contents in ..cache: recomputing
ERROR MESSAGE IN LEMMA PROOF (FRAGMENT #240)
Error in step "inversion Hle.".
Message: The type of Hle is not inductive..
Goal: ceval_step Heqceval_st_c1 st i1' = Some st'' ->
LETOPT st' <== ceval_step st' c2 0
IN ceval_step st' st 0 = 
Some st''.

TRYING TO PROVE LEMMA
Lemma ceval_step_deterministic_with_increasing_steps_4 : forall i1' : nat, forall Hle : forall i2 : nat,
i1' <= i2 ->
forall (c : com) (st st' : state),
ceval_step st c i1' = Some st' ->
ceval_step st c i2 = Some st', forall c1 : i1' <= 0, forall c2 st : com, forall st' st'' Heqceval_st_c1 : state, forall Hceval1 : Some Heqceval_st_c1 = ceval_step st' c2 i1', ceval_step Heqceval_st_c1 st i1' = Some st'' ->
LETOPT st' <== ceval_step st' c2 0
IN ceval_step st' st 0 = 
Some st''.

Error proving ceval_step_more
MAX LEMMA DEPTH REACHED. GIVING UP.